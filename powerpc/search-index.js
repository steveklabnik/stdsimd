var N = null;var searchIndex = {};
searchIndex["coresimd"]={"doc":"SIMD and vendor intrinsics support library.","items":[[0,"arch","coresimd","Platform dependent vendor intrinsics.",N,N],[0,"powerpc","coresimd::arch","Platform-specific intrinsics for the `PowerPC` platform.",N,N],[3,"vector_signed_char","coresimd::arch::powerpc","PowerPC-specific 128-bit wide vector of sixteen packed `i8`",N,N],[3,"vector_unsigned_char","","PowerPC-specific 128-bit wide vector of sixteen packed `u8`",N,N],[3,"vector_bool_char","","PowerPC-specific 128-bit wide vector mask of sixteen packed elements",N,N],[3,"vector_signed_short","","PowerPC-specific 128-bit wide vector of eight packed `i16`",N,N],[3,"vector_unsigned_short","","PowerPC-specific 128-bit wide vector of eight packed `u16`",N,N],[3,"vector_bool_short","","PowerPC-specific 128-bit wide vector mask of eight packed elements",N,N],[3,"vector_signed_int","","PowerPC-specific 128-bit wide vector of four packed `i32`",N,N],[3,"vector_unsigned_int","","PowerPC-specific 128-bit wide vector of four packed `u32`",N,N],[3,"vector_bool_int","","PowerPC-specific 128-bit wide vector mask of four packed elements",N,N],[3,"vector_float","","PowerPC-specific 128-bit wide vector of four packed `f32`",N,N],[5,"vec_add","","Vector add.",N,N],[5,"vec_madds","","Vector Multiply Add Saturated",N,[[["vector_signed_short"],["vector_signed_short"],["vector_signed_short"]],["vector_signed_short"]]],[5,"vec_mradds","","Vector Multiply Round and Add Saturated",N,[[["vector_signed_short"],["vector_signed_short"],["vector_signed_short"]],["vector_signed_short"]]],[5,"vec_perm","","Vector permute.",N,[[["t"],["t"],["vector_unsigned_char"]],["t"]]],[0,"simd","coresimd","Platform independent SIMD vector types and operations.",N,N],[3,"i8x16","coresimd::simd","A 128-bit vector with 16 `i8` lanes.",N,N],[3,"u8x16","","A 128-bit vector with 16 `u8` lanes.",N,N],[3,"m8x16","","A 128-bit vector mask with 16 lanes.",N,N],[3,"i16x8","","A 128-bit vector with 8 `i16` lanes.",N,N],[3,"u16x8","","A 128-bit vector with 8 `u16` lanes.",N,N],[3,"m16x8","","A 128-bit vector mask with 8 lanes.",N,N],[3,"i32x4","","A 128-bit vector with 4 `i32` lanes.",N,N],[3,"u32x4","","A 128-bit vector with 4 `u32` lanes.",N,N],[3,"f32x4","","A 128-bit vector with 4 `f32` lanes.",N,N],[3,"m32x4","","A 128-bit vector mask with 4 lanes.",N,N],[3,"i64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[3,"u64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[3,"f64x2","","A 128-bit vector with 2 `f64` lanes.",N,N],[3,"m64x2","","A 128-bit vector mask with 2 lanes.",N,N],[3,"i8x2","","A 16-bit wide vector with 2 `i8` lanes.",N,N],[3,"u8x2","","A 16-bit wide vector with 2 `u8` lanes.",N,N],[3,"m8x2","","A 16-bit wide vector mask with 2 lanes.",N,N],[3,"i8x32","","A 256-bit vector with 32 `i8` lanes.",N,N],[3,"u8x32","","A 256-bit vector with 32 `u8` lanes.",N,N],[3,"m8x32","","A 256-bit vector mask with 32 lanes.",N,N],[3,"i16x16","","A 256-bit vector with 16 `i16` lanes.",N,N],[3,"u16x16","","A 256-bit vector with 16 `u16` lanes.",N,N],[3,"m16x16","","A 256-bit vector mask with 16 lanes.",N,N],[3,"i32x8","","A 256-bit vector with 8 `i32` lanes.",N,N],[3,"u32x8","","A 256-bit vector with 8 `u32` lanes.",N,N],[3,"f32x8","","A 256-bit vector with 8 `f32` lanes.",N,N],[3,"m32x8","","A 256-bit vector mask with 8 lanes.",N,N],[3,"i64x4","","A 256-bit vector with 4 `i64` lanes.",N,N],[3,"u64x4","","A 256-bit vector with 4 `u64` lanes.",N,N],[3,"f64x4","","A 256-bit vector with 4 `f64` lanes.",N,N],[3,"m64x4","","A 256-bit vector mask with 4 lanes.",N,N],[3,"i16x2","","A 32-bit wide vector with 2 `i16` lanes.",N,N],[3,"u16x2","","A 32-bit wide vector with 2 `u16` lanes.",N,N],[3,"m16x2","","A 32-bit wide vector mask with 2 lanes.",N,N],[3,"i8x4","","A 32-bit wide vector with 4 `i8` lanes.",N,N],[3,"u8x4","","A 32-bit wide vector with 4 `u8` lanes.",N,N],[3,"m8x4","","A 32-bit wide vector mask 4 lanes.",N,N],[3,"i8x64","","A 512-bit vector with 64 `i8` lanes.",N,N],[3,"u8x64","","A 512-bit vector with 64 `u8` lanes.",N,N],[3,"m1x64","","A 64-bit vector mask with 64 lanes (FIXME: 512-bit wide).",N,N],[3,"i16x32","","A 512-bit vector with 32 `i16` lanes.",N,N],[3,"u16x32","","A 512-bit vector with 32 `u16` lanes.",N,N],[3,"m1x32","","A 32-bit vector mask with 32 lanes (FIXME: 512-bit wide).",N,N],[3,"i32x16","","A 512-bit vector with 16 `i32` lanes.",N,N],[3,"u32x16","","A 512-bit vector with 16 `u32` lanes.",N,N],[3,"f32x16","","A 512-bit vector with 16 `f32` lanes.",N,N],[3,"m1x16","","A 16-bit vector mask with 16 lanes (FIXME: 512-bit wide).",N,N],[3,"i64x8","","A 512-bit vector with 8 `i64` lanes.",N,N],[3,"u64x8","","A 512-bit vector with 8 `u64` lanes.",N,N],[3,"f64x8","","A 512-bit vector with 8 `f64` lanes.",N,N],[3,"m1x8","","A 8-bit vector mask with 8 lanes (FIXME: 512-bit wide).",N,N],[3,"i8x8","","A 64-bit vector with 8 `i8` lanes.",N,N],[3,"u8x8","","A 64-bit vector with 8 `u8` lanes.",N,N],[3,"m8x8","","A 64-bit vector mask with 8 lanes.",N,N],[3,"i16x4","","A 64-bit vector with 4 `i16` lanes.",N,N],[3,"u16x4","","A 64-bit vector with 4 `u16` lanes.",N,N],[3,"m16x4","","A 64-bit vector mask with 4 lanes.",N,N],[3,"i32x2","","A 64-bit vector with 2 `i32` lanes.",N,N],[3,"u32x2","","A 64-bit vector with 2 `u32` lanes.",N,N],[3,"m32x2","","A 64-bit vector mask with 2 lanes.",N,N],[3,"f32x2","","A 64-bit vector with 2 `f32` lanes.",N,N],[8,"FromBits","","Safe lossless bitwise conversion from `T` to `Self`.",N,N],[10,"from_bits","","Safe lossless bitwise from `T` to `Self`.",0,[[["t"]],["self"]]],[8,"IntoBits","","Safe lossless bitwise conversion from `Self` to `T`.",N,N],[10,"into_bits","","Safe lossless bitwise transmute from `self` to `T`.",1,[[["self"]],["t"]]],[11,"clone","","",2,[[["self"]],["i8x16"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["i8x16"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["i8x16"]],["bool"]]],[11,"le","","",2,[[["self"],["i8x16"]],["bool"]]],[11,"gt","","",2,[[["self"],["i8x16"]],["bool"]]],[11,"ge","","",2,[[["self"],["i8x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",2,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",2,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",2,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",2,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",2,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",2,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",2,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",2,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",2,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",2,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",2,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"eq","","Lane-wise equality comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",2,[[["self"],["i8x16"]],["m8x16"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"add","","",2,[[["self"],["self"]],["self"]]],[11,"sub","","",2,[[["self"],["self"]],["self"]]],[11,"mul","","",2,[[["self"],["self"]],["self"]]],[11,"div","","",2,[[["self"],["self"]],["self"]]],[11,"rem","","",2,[[["self"],["self"]],["self"]]],[11,"add_assign","","",2,[[["self"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["self"]]]],[11,"div_assign","","",2,[[["self"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["self"]]]],[11,"add","","",2,[[["self"],["i8"]],["self"]]],[11,"sub","","",2,[[["self"],["i8"]],["self"]]],[11,"mul","","",2,[[["self"],["i8"]],["self"]]],[11,"div","","",2,[[["self"],["i8"]],["self"]]],[11,"rem","","",2,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",2,[[["self"],["i8"]]]],[11,"sub_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"div_assign","","",2,[[["self"],["i8"]]]],[11,"rem_assign","","",2,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",2,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",2,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",2,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",2,[[["self"]],["i8"]]],[11,"neg","","",2,[[["self"]],["self"]]],[11,"not","","",2,[[["self"]],["self"]]],[11,"bitxor","","",2,[[["self"],["self"]],["self"]]],[11,"bitand","","",2,[[["self"],["self"]],["self"]]],[11,"bitor","","",2,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",2,[[["self"],["self"]]]],[11,"bitor_assign","","",2,[[["self"],["self"]]]],[11,"bitxor_assign","","",2,[[["self"],["self"]]]],[11,"bitxor","","",2,[[["self"],["i8"]],["self"]]],[11,"bitand","","",2,[[["self"],["i8"]],["self"]]],[11,"bitor","","",2,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",2,[[["self"],["i8"]]]],[11,"bitor_assign","","",2,[[["self"],["i8"]]]],[11,"bitxor_assign","","",2,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",2,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",2,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",2,[[["self"]],["i8"]]],[11,"shl","","",2,[[["self"],["u8"]],["self"]]],[11,"shr","","",2,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["u8"]]]],[11,"shr_assign","","",2,[[["self"],["u8"]]]],[11,"shl","","",2,[[["self"],["u16"]],["self"]]],[11,"shr","","",2,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["u16"]]]],[11,"shr_assign","","",2,[[["self"],["u16"]]]],[11,"shl","","",2,[[["self"],["u32"]],["self"]]],[11,"shr","","",2,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["u32"]]]],[11,"shr_assign","","",2,[[["self"],["u32"]]]],[11,"shl","","",2,[[["self"],["u64"]],["self"]]],[11,"shr","","",2,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["u64"]]]],[11,"shr_assign","","",2,[[["self"],["u64"]]]],[11,"shl","","",2,[[["self"],["usize"]],["self"]]],[11,"shr","","",2,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"shl","","",2,[[["self"],["i8"]],["self"]]],[11,"shr","","",2,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["i8"]]]],[11,"shr_assign","","",2,[[["self"],["i8"]]]],[11,"shl","","",2,[[["self"],["i16"]],["self"]]],[11,"shr","","",2,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["i16"]]]],[11,"shr_assign","","",2,[[["self"],["i16"]]]],[11,"shl","","",2,[[["self"],["i32"]],["self"]]],[11,"shr","","",2,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["i32"]]]],[11,"shr_assign","","",2,[[["self"],["i32"]]]],[11,"shl","","",2,[[["self"],["i64"]],["self"]]],[11,"shr","","",2,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["i64"]]]],[11,"shr_assign","","",2,[[["self"],["i64"]]]],[11,"shl","","",2,[[["self"],["isize"]],["self"]]],[11,"shr","","",2,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["isize"]]]],[11,"shr_assign","","",2,[[["self"],["isize"]]]],[11,"shl","","",2,[[["self"],["self"]],["self"]]],[11,"shr","","",2,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",2,[[["self"],["self"]]]],[11,"shr_assign","","",2,[[["self"],["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"ne","","",2,[[["self"],["self"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"min","","Minimum of two vectors.",2,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",2,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",2,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",2,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["u8x16"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",3,[[["self"],["u8x16"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["u8x16"]],["bool"]]],[11,"le","","",3,[[["self"],["u8x16"]],["bool"]]],[11,"gt","","",3,[[["self"],["u8x16"]],["bool"]]],[11,"ge","","",3,[[["self"],["u8x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",3,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",3,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",3,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",3,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",3,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",3,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",3,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",3,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",3,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",3,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",3,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"eq","","Lane-wise equality comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",3,[[["self"],["u8x16"]],["m8x16"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"add","","",3,[[["self"],["self"]],["self"]]],[11,"sub","","",3,[[["self"],["self"]],["self"]]],[11,"mul","","",3,[[["self"],["self"]],["self"]]],[11,"div","","",3,[[["self"],["self"]],["self"]]],[11,"rem","","",3,[[["self"],["self"]],["self"]]],[11,"add_assign","","",3,[[["self"],["self"]]]],[11,"sub_assign","","",3,[[["self"],["self"]]]],[11,"mul_assign","","",3,[[["self"],["self"]]]],[11,"div_assign","","",3,[[["self"],["self"]]]],[11,"rem_assign","","",3,[[["self"],["self"]]]],[11,"add","","",3,[[["self"],["u8"]],["self"]]],[11,"sub","","",3,[[["self"],["u8"]],["self"]]],[11,"mul","","",3,[[["self"],["u8"]],["self"]]],[11,"div","","",3,[[["self"],["u8"]],["self"]]],[11,"rem","","",3,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",3,[[["self"],["u8"]]]],[11,"sub_assign","","",3,[[["self"],["u8"]]]],[11,"mul_assign","","",3,[[["self"],["u8"]]]],[11,"div_assign","","",3,[[["self"],["u8"]]]],[11,"rem_assign","","",3,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",3,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",3,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",3,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",3,[[["self"]],["u8"]]],[11,"bitxor","","",3,[[["self"],["u8"]],["self"]]],[11,"bitand","","",3,[[["self"],["u8"]],["self"]]],[11,"bitor","","",3,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",3,[[["self"],["u8"]]]],[11,"bitor_assign","","",3,[[["self"],["u8"]]]],[11,"bitxor_assign","","",3,[[["self"],["u8"]]]],[11,"not","","",3,[[["self"]],["self"]]],[11,"bitxor","","",3,[[["self"],["self"]],["self"]]],[11,"bitand","","",3,[[["self"],["self"]],["self"]]],[11,"bitor","","",3,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",3,[[["self"],["self"]]]],[11,"bitor_assign","","",3,[[["self"],["self"]]]],[11,"bitxor_assign","","",3,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",3,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",3,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",3,[[["self"]],["u8"]]],[11,"shl","","",3,[[["self"],["u8"]],["self"]]],[11,"shr","","",3,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["u8"]]]],[11,"shr_assign","","",3,[[["self"],["u8"]]]],[11,"shl","","",3,[[["self"],["u16"]],["self"]]],[11,"shr","","",3,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["u16"]]]],[11,"shr_assign","","",3,[[["self"],["u16"]]]],[11,"shl","","",3,[[["self"],["u32"]],["self"]]],[11,"shr","","",3,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["u32"]]]],[11,"shr_assign","","",3,[[["self"],["u32"]]]],[11,"shl","","",3,[[["self"],["u64"]],["self"]]],[11,"shr","","",3,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["u64"]]]],[11,"shr_assign","","",3,[[["self"],["u64"]]]],[11,"shl","","",3,[[["self"],["usize"]],["self"]]],[11,"shr","","",3,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["usize"]]]],[11,"shr_assign","","",3,[[["self"],["usize"]]]],[11,"shl","","",3,[[["self"],["i8"]],["self"]]],[11,"shr","","",3,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["i8"]]]],[11,"shr_assign","","",3,[[["self"],["i8"]]]],[11,"shl","","",3,[[["self"],["i16"]],["self"]]],[11,"shr","","",3,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["i16"]]]],[11,"shr_assign","","",3,[[["self"],["i16"]]]],[11,"shl","","",3,[[["self"],["i32"]],["self"]]],[11,"shr","","",3,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["i32"]]]],[11,"shr_assign","","",3,[[["self"],["i32"]]]],[11,"shl","","",3,[[["self"],["i64"]],["self"]]],[11,"shr","","",3,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["i64"]]]],[11,"shr_assign","","",3,[[["self"],["i64"]]]],[11,"shl","","",3,[[["self"],["isize"]],["self"]]],[11,"shr","","",3,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["isize"]]]],[11,"shr_assign","","",3,[[["self"],["isize"]]]],[11,"shl","","",3,[[["self"],["self"]],["self"]]],[11,"shr","","",3,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",3,[[["self"],["self"]]]],[11,"shr_assign","","",3,[[["self"],["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"ne","","",3,[[["self"],["self"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"min","","Minimum of two vectors.",3,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",3,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",3,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",3,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",3,[[["self"]],["self"]]],[11,"clone","","",4,[[["self"]],["m8x16"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",4,[[["self"],["m8x16"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["m8x16"]],["bool"]]],[11,"le","","",4,[[["self"],["m8x16"]],["bool"]]],[11,"gt","","",4,[[["self"],["m8x16"]],["bool"]]],[11,"ge","","",4,[[["self"],["m8x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",4,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",4,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",4,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",4,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",4,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",4,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",4,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",4,[[["self"]],["self"]]],[11,"bitxor","","",4,[[["self"],["self"]],["self"]]],[11,"bitand","","",4,[[["self"],["self"]],["self"]]],[11,"bitor","","",4,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",4,[[["self"],["self"]]]],[11,"bitor_assign","","",4,[[["self"],["self"]]]],[11,"bitxor_assign","","",4,[[["self"],["self"]]]],[11,"bitxor","","",4,[[["self"],["bool"]],["self"]]],[11,"bitand","","",4,[[["self"],["bool"]],["self"]]],[11,"bitor","","",4,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",4,[[["self"],["bool"]]]],[11,"bitor_assign","","",4,[[["self"],["bool"]]]],[11,"bitxor_assign","","",4,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",4,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",4,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",4,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",4,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",4,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",4,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",4,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",4,[[["self"],["m8x16"]],["m8x16"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"ne","","",4,[[["self"],["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"clone","","",5,[[["self"]],["i16x8"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",5,[[["self"],["i16x8"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["i16x8"]],["bool"]]],[11,"le","","",5,[[["self"],["i16x8"]],["bool"]]],[11,"gt","","",5,[[["self"],["i16x8"]],["bool"]]],[11,"ge","","",5,[[["self"],["i16x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",5,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",5,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",5,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",5,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",5,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",5,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",5,[[["self"],["usize"],["i16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",5,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",5,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",5,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",5,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"eq","","Lane-wise equality comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",5,[[["self"],["i16x8"]],["m16x8"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"add","","",5,[[["self"],["self"]],["self"]]],[11,"sub","","",5,[[["self"],["self"]],["self"]]],[11,"mul","","",5,[[["self"],["self"]],["self"]]],[11,"div","","",5,[[["self"],["self"]],["self"]]],[11,"rem","","",5,[[["self"],["self"]],["self"]]],[11,"add_assign","","",5,[[["self"],["self"]]]],[11,"sub_assign","","",5,[[["self"],["self"]]]],[11,"mul_assign","","",5,[[["self"],["self"]]]],[11,"div_assign","","",5,[[["self"],["self"]]]],[11,"rem_assign","","",5,[[["self"],["self"]]]],[11,"add","","",5,[[["self"],["i16"]],["self"]]],[11,"sub","","",5,[[["self"],["i16"]],["self"]]],[11,"mul","","",5,[[["self"],["i16"]],["self"]]],[11,"div","","",5,[[["self"],["i16"]],["self"]]],[11,"rem","","",5,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",5,[[["self"],["i16"]]]],[11,"sub_assign","","",5,[[["self"],["i16"]]]],[11,"mul_assign","","",5,[[["self"],["i16"]]]],[11,"div_assign","","",5,[[["self"],["i16"]]]],[11,"rem_assign","","",5,[[["self"],["i16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",5,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",5,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",5,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",5,[[["self"]],["i16"]]],[11,"neg","","",5,[[["self"]],["self"]]],[11,"not","","",5,[[["self"]],["self"]]],[11,"bitxor","","",5,[[["self"],["self"]],["self"]]],[11,"bitand","","",5,[[["self"],["self"]],["self"]]],[11,"bitor","","",5,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",5,[[["self"],["self"]]]],[11,"bitor_assign","","",5,[[["self"],["self"]]]],[11,"bitxor_assign","","",5,[[["self"],["self"]]]],[11,"bitxor","","",5,[[["self"],["i16"]],["self"]]],[11,"bitand","","",5,[[["self"],["i16"]],["self"]]],[11,"bitor","","",5,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",5,[[["self"],["i16"]]]],[11,"bitor_assign","","",5,[[["self"],["i16"]]]],[11,"bitxor_assign","","",5,[[["self"],["i16"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",5,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",5,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",5,[[["self"]],["i16"]]],[11,"shl","","",5,[[["self"],["u8"]],["self"]]],[11,"shr","","",5,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["u8"]]]],[11,"shr_assign","","",5,[[["self"],["u8"]]]],[11,"shl","","",5,[[["self"],["u16"]],["self"]]],[11,"shr","","",5,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["u16"]]]],[11,"shr_assign","","",5,[[["self"],["u16"]]]],[11,"shl","","",5,[[["self"],["u32"]],["self"]]],[11,"shr","","",5,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["u32"]]]],[11,"shr_assign","","",5,[[["self"],["u32"]]]],[11,"shl","","",5,[[["self"],["u64"]],["self"]]],[11,"shr","","",5,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["u64"]]]],[11,"shr_assign","","",5,[[["self"],["u64"]]]],[11,"shl","","",5,[[["self"],["usize"]],["self"]]],[11,"shr","","",5,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["usize"]]]],[11,"shr_assign","","",5,[[["self"],["usize"]]]],[11,"shl","","",5,[[["self"],["i8"]],["self"]]],[11,"shr","","",5,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["i8"]]]],[11,"shr_assign","","",5,[[["self"],["i8"]]]],[11,"shl","","",5,[[["self"],["i16"]],["self"]]],[11,"shr","","",5,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["i16"]]]],[11,"shr_assign","","",5,[[["self"],["i16"]]]],[11,"shl","","",5,[[["self"],["i32"]],["self"]]],[11,"shr","","",5,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["i32"]]]],[11,"shr_assign","","",5,[[["self"],["i32"]]]],[11,"shl","","",5,[[["self"],["i64"]],["self"]]],[11,"shr","","",5,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["i64"]]]],[11,"shr_assign","","",5,[[["self"],["i64"]]]],[11,"shl","","",5,[[["self"],["isize"]],["self"]]],[11,"shr","","",5,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["isize"]]]],[11,"shr_assign","","",5,[[["self"],["isize"]]]],[11,"shl","","",5,[[["self"],["self"]],["self"]]],[11,"shr","","",5,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",5,[[["self"],["self"]]]],[11,"shr_assign","","",5,[[["self"],["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"ne","","",5,[[["self"],["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"min","","Minimum of two vectors.",5,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",5,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",5,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",5,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["u16x8"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",6,[[["self"],["u16x8"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["u16x8"]],["bool"]]],[11,"le","","",6,[[["self"],["u16x8"]],["bool"]]],[11,"gt","","",6,[[["self"],["u16x8"]],["bool"]]],[11,"ge","","",6,[[["self"],["u16x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",6,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",6,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",6,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",6,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",6,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["u16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",6,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",6,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"eq","","Lane-wise equality comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",6,[[["self"],["u16x8"]],["m16x8"]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"add","","",6,[[["self"],["self"]],["self"]]],[11,"sub","","",6,[[["self"],["self"]],["self"]]],[11,"mul","","",6,[[["self"],["self"]],["self"]]],[11,"div","","",6,[[["self"],["self"]],["self"]]],[11,"rem","","",6,[[["self"],["self"]],["self"]]],[11,"add_assign","","",6,[[["self"],["self"]]]],[11,"sub_assign","","",6,[[["self"],["self"]]]],[11,"mul_assign","","",6,[[["self"],["self"]]]],[11,"div_assign","","",6,[[["self"],["self"]]]],[11,"rem_assign","","",6,[[["self"],["self"]]]],[11,"add","","",6,[[["self"],["u16"]],["self"]]],[11,"sub","","",6,[[["self"],["u16"]],["self"]]],[11,"mul","","",6,[[["self"],["u16"]],["self"]]],[11,"div","","",6,[[["self"],["u16"]],["self"]]],[11,"rem","","",6,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",6,[[["self"],["u16"]]]],[11,"sub_assign","","",6,[[["self"],["u16"]]]],[11,"mul_assign","","",6,[[["self"],["u16"]]]],[11,"div_assign","","",6,[[["self"],["u16"]]]],[11,"rem_assign","","",6,[[["self"],["u16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",6,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",6,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",6,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",6,[[["self"]],["u16"]]],[11,"bitxor","","",6,[[["self"],["u16"]],["self"]]],[11,"bitand","","",6,[[["self"],["u16"]],["self"]]],[11,"bitor","","",6,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",6,[[["self"],["u16"]]]],[11,"bitor_assign","","",6,[[["self"],["u16"]]]],[11,"bitxor_assign","","",6,[[["self"],["u16"]]]],[11,"not","","",6,[[["self"]],["self"]]],[11,"bitxor","","",6,[[["self"],["self"]],["self"]]],[11,"bitand","","",6,[[["self"],["self"]],["self"]]],[11,"bitor","","",6,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",6,[[["self"],["self"]]]],[11,"bitor_assign","","",6,[[["self"],["self"]]]],[11,"bitxor_assign","","",6,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",6,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",6,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",6,[[["self"]],["u16"]]],[11,"shl","","",6,[[["self"],["u8"]],["self"]]],[11,"shr","","",6,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["u8"]]]],[11,"shr_assign","","",6,[[["self"],["u8"]]]],[11,"shl","","",6,[[["self"],["u16"]],["self"]]],[11,"shr","","",6,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["u16"]]]],[11,"shr_assign","","",6,[[["self"],["u16"]]]],[11,"shl","","",6,[[["self"],["u32"]],["self"]]],[11,"shr","","",6,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["u32"]]]],[11,"shr_assign","","",6,[[["self"],["u32"]]]],[11,"shl","","",6,[[["self"],["u64"]],["self"]]],[11,"shr","","",6,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["u64"]]]],[11,"shr_assign","","",6,[[["self"],["u64"]]]],[11,"shl","","",6,[[["self"],["usize"]],["self"]]],[11,"shr","","",6,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["usize"]]]],[11,"shr_assign","","",6,[[["self"],["usize"]]]],[11,"shl","","",6,[[["self"],["i8"]],["self"]]],[11,"shr","","",6,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["i8"]]]],[11,"shr_assign","","",6,[[["self"],["i8"]]]],[11,"shl","","",6,[[["self"],["i16"]],["self"]]],[11,"shr","","",6,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["i16"]]]],[11,"shr_assign","","",6,[[["self"],["i16"]]]],[11,"shl","","",6,[[["self"],["i32"]],["self"]]],[11,"shr","","",6,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["i32"]]]],[11,"shr_assign","","",6,[[["self"],["i32"]]]],[11,"shl","","",6,[[["self"],["i64"]],["self"]]],[11,"shr","","",6,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["i64"]]]],[11,"shr_assign","","",6,[[["self"],["i64"]]]],[11,"shl","","",6,[[["self"],["isize"]],["self"]]],[11,"shr","","",6,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["isize"]]]],[11,"shr_assign","","",6,[[["self"],["isize"]]]],[11,"shl","","",6,[[["self"],["self"]],["self"]]],[11,"shr","","",6,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",6,[[["self"],["self"]]]],[11,"shr_assign","","",6,[[["self"],["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"ne","","",6,[[["self"],["self"]],["bool"]]],[11,"default","","",6,[[],["self"]]],[11,"min","","Minimum of two vectors.",6,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",6,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",6,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",6,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",6,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["m16x8"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",7,[[["self"],["m16x8"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["m16x8"]],["bool"]]],[11,"le","","",7,[[["self"],["m16x8"]],["bool"]]],[11,"gt","","",7,[[["self"],["m16x8"]],["bool"]]],[11,"ge","","",7,[[["self"],["m16x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",7,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",7,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",7,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",7,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",7,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",7,[[["self"]],["self"]]],[11,"bitxor","","",7,[[["self"],["self"]],["self"]]],[11,"bitand","","",7,[[["self"],["self"]],["self"]]],[11,"bitor","","",7,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",7,[[["self"],["self"]]]],[11,"bitor_assign","","",7,[[["self"],["self"]]]],[11,"bitxor_assign","","",7,[[["self"],["self"]]]],[11,"bitxor","","",7,[[["self"],["bool"]],["self"]]],[11,"bitand","","",7,[[["self"],["bool"]],["self"]]],[11,"bitor","","",7,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",7,[[["self"],["bool"]]]],[11,"bitor_assign","","",7,[[["self"],["bool"]]]],[11,"bitxor_assign","","",7,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",7,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",7,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",7,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",7,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",7,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",7,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",7,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",7,[[["self"],["m16x8"]],["m16x8"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"ne","","",7,[[["self"],["self"]],["bool"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",8,[[["self"]],["i32x4"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",8,[[["self"],["i32x4"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["i32x4"]],["bool"]]],[11,"le","","",8,[[["self"],["i32x4"]],["bool"]]],[11,"gt","","",8,[[["self"],["i32x4"]],["bool"]]],[11,"ge","","",8,[[["self"],["i32x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",8,[[["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",8,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",8,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",8,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",8,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"eq","","Lane-wise equality comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",8,[[["self"],["i32x4"]],["m32x4"]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"add","","",8,[[["self"],["self"]],["self"]]],[11,"sub","","",8,[[["self"],["self"]],["self"]]],[11,"mul","","",8,[[["self"],["self"]],["self"]]],[11,"div","","",8,[[["self"],["self"]],["self"]]],[11,"rem","","",8,[[["self"],["self"]],["self"]]],[11,"add_assign","","",8,[[["self"],["self"]]]],[11,"sub_assign","","",8,[[["self"],["self"]]]],[11,"mul_assign","","",8,[[["self"],["self"]]]],[11,"div_assign","","",8,[[["self"],["self"]]]],[11,"rem_assign","","",8,[[["self"],["self"]]]],[11,"add","","",8,[[["self"],["i32"]],["self"]]],[11,"sub","","",8,[[["self"],["i32"]],["self"]]],[11,"mul","","",8,[[["self"],["i32"]],["self"]]],[11,"div","","",8,[[["self"],["i32"]],["self"]]],[11,"rem","","",8,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",8,[[["self"],["i32"]]]],[11,"sub_assign","","",8,[[["self"],["i32"]]]],[11,"mul_assign","","",8,[[["self"],["i32"]]]],[11,"div_assign","","",8,[[["self"],["i32"]]]],[11,"rem_assign","","",8,[[["self"],["i32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",8,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",8,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",8,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",8,[[["self"]],["i32"]]],[11,"neg","","",8,[[["self"]],["self"]]],[11,"not","","",8,[[["self"]],["self"]]],[11,"bitxor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand","","",8,[[["self"],["self"]],["self"]]],[11,"bitor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["self"]]]],[11,"bitor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor","","",8,[[["self"],["i32"]],["self"]]],[11,"bitand","","",8,[[["self"],["i32"]],["self"]]],[11,"bitor","","",8,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["i32"]]]],[11,"bitor_assign","","",8,[[["self"],["i32"]]]],[11,"bitxor_assign","","",8,[[["self"],["i32"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",8,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",8,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",8,[[["self"]],["i32"]]],[11,"shl","","",8,[[["self"],["u8"]],["self"]]],[11,"shr","","",8,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["u8"]]]],[11,"shr_assign","","",8,[[["self"],["u8"]]]],[11,"shl","","",8,[[["self"],["u16"]],["self"]]],[11,"shr","","",8,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["u16"]]]],[11,"shr_assign","","",8,[[["self"],["u16"]]]],[11,"shl","","",8,[[["self"],["u32"]],["self"]]],[11,"shr","","",8,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["u32"]]]],[11,"shr_assign","","",8,[[["self"],["u32"]]]],[11,"shl","","",8,[[["self"],["u64"]],["self"]]],[11,"shr","","",8,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["u64"]]]],[11,"shr_assign","","",8,[[["self"],["u64"]]]],[11,"shl","","",8,[[["self"],["usize"]],["self"]]],[11,"shr","","",8,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["usize"]]]],[11,"shr_assign","","",8,[[["self"],["usize"]]]],[11,"shl","","",8,[[["self"],["i8"]],["self"]]],[11,"shr","","",8,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["i8"]]]],[11,"shr_assign","","",8,[[["self"],["i8"]]]],[11,"shl","","",8,[[["self"],["i16"]],["self"]]],[11,"shr","","",8,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["i16"]]]],[11,"shr_assign","","",8,[[["self"],["i16"]]]],[11,"shl","","",8,[[["self"],["i32"]],["self"]]],[11,"shr","","",8,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["i32"]]]],[11,"shr_assign","","",8,[[["self"],["i32"]]]],[11,"shl","","",8,[[["self"],["i64"]],["self"]]],[11,"shr","","",8,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["i64"]]]],[11,"shr_assign","","",8,[[["self"],["i64"]]]],[11,"shl","","",8,[[["self"],["isize"]],["self"]]],[11,"shr","","",8,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["isize"]]]],[11,"shr_assign","","",8,[[["self"],["isize"]]]],[11,"shl","","",8,[[["self"],["self"]],["self"]]],[11,"shr","","",8,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["self"]]]],[11,"shr_assign","","",8,[[["self"],["self"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"ne","","",8,[[["self"],["self"]],["bool"]]],[11,"default","","",8,[[],["self"]]],[11,"min","","Minimum of two vectors.",8,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",8,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",8,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",8,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",8,[[["self"]],["self"]]],[11,"clone","","",9,[[["self"]],["u32x4"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",9,[[["self"],["u32x4"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["u32x4"]],["bool"]]],[11,"le","","",9,[[["self"],["u32x4"]],["bool"]]],[11,"gt","","",9,[[["self"],["u32x4"]],["bool"]]],[11,"ge","","",9,[[["self"],["u32x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",9,[[["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",9,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",9,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",9,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",9,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["u32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",9,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",9,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"eq","","Lane-wise equality comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",9,[[["self"],["u32x4"]],["m32x4"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"add","","",9,[[["self"],["self"]],["self"]]],[11,"sub","","",9,[[["self"],["self"]],["self"]]],[11,"mul","","",9,[[["self"],["self"]],["self"]]],[11,"div","","",9,[[["self"],["self"]],["self"]]],[11,"rem","","",9,[[["self"],["self"]],["self"]]],[11,"add_assign","","",9,[[["self"],["self"]]]],[11,"sub_assign","","",9,[[["self"],["self"]]]],[11,"mul_assign","","",9,[[["self"],["self"]]]],[11,"div_assign","","",9,[[["self"],["self"]]]],[11,"rem_assign","","",9,[[["self"],["self"]]]],[11,"add","","",9,[[["self"],["u32"]],["self"]]],[11,"sub","","",9,[[["self"],["u32"]],["self"]]],[11,"mul","","",9,[[["self"],["u32"]],["self"]]],[11,"div","","",9,[[["self"],["u32"]],["self"]]],[11,"rem","","",9,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",9,[[["self"],["u32"]]]],[11,"sub_assign","","",9,[[["self"],["u32"]]]],[11,"mul_assign","","",9,[[["self"],["u32"]]]],[11,"div_assign","","",9,[[["self"],["u32"]]]],[11,"rem_assign","","",9,[[["self"],["u32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",9,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",9,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",9,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",9,[[["self"]],["u32"]]],[11,"bitxor","","",9,[[["self"],["u32"]],["self"]]],[11,"bitand","","",9,[[["self"],["u32"]],["self"]]],[11,"bitor","","",9,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["u32"]]]],[11,"bitor_assign","","",9,[[["self"],["u32"]]]],[11,"bitxor_assign","","",9,[[["self"],["u32"]]]],[11,"not","","",9,[[["self"]],["self"]]],[11,"bitxor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand","","",9,[[["self"],["self"]],["self"]]],[11,"bitor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["self"]]]],[11,"bitor_assign","","",9,[[["self"],["self"]]]],[11,"bitxor_assign","","",9,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",9,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",9,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",9,[[["self"]],["u32"]]],[11,"shl","","",9,[[["self"],["u8"]],["self"]]],[11,"shr","","",9,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u8"]]]],[11,"shr_assign","","",9,[[["self"],["u8"]]]],[11,"shl","","",9,[[["self"],["u16"]],["self"]]],[11,"shr","","",9,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u16"]]]],[11,"shr_assign","","",9,[[["self"],["u16"]]]],[11,"shl","","",9,[[["self"],["u32"]],["self"]]],[11,"shr","","",9,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u32"]]]],[11,"shr_assign","","",9,[[["self"],["u32"]]]],[11,"shl","","",9,[[["self"],["u64"]],["self"]]],[11,"shr","","",9,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u64"]]]],[11,"shr_assign","","",9,[[["self"],["u64"]]]],[11,"shl","","",9,[[["self"],["usize"]],["self"]]],[11,"shr","","",9,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["usize"]]]],[11,"shr_assign","","",9,[[["self"],["usize"]]]],[11,"shl","","",9,[[["self"],["i8"]],["self"]]],[11,"shr","","",9,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["i8"]]]],[11,"shr_assign","","",9,[[["self"],["i8"]]]],[11,"shl","","",9,[[["self"],["i16"]],["self"]]],[11,"shr","","",9,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["i16"]]]],[11,"shr_assign","","",9,[[["self"],["i16"]]]],[11,"shl","","",9,[[["self"],["i32"]],["self"]]],[11,"shr","","",9,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["i32"]]]],[11,"shr_assign","","",9,[[["self"],["i32"]]]],[11,"shl","","",9,[[["self"],["i64"]],["self"]]],[11,"shr","","",9,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["i64"]]]],[11,"shr_assign","","",9,[[["self"],["i64"]]]],[11,"shl","","",9,[[["self"],["isize"]],["self"]]],[11,"shr","","",9,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["isize"]]]],[11,"shr_assign","","",9,[[["self"],["isize"]]]],[11,"shl","","",9,[[["self"],["self"]],["self"]]],[11,"shr","","",9,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["self"]]]],[11,"shr_assign","","",9,[[["self"],["self"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"ne","","",9,[[["self"],["self"]],["bool"]]],[11,"default","","",9,[[],["self"]]],[11,"min","","Minimum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",9,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"clone","","",10,[[["self"]],["f32x4"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",10,[[["self"],["f32x4"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["f32x4"]],["bool"]]],[11,"le","","",10,[[["self"],["f32x4"]],["bool"]]],[11,"gt","","",10,[[["self"],["f32x4"]],["bool"]]],[11,"ge","","",10,[[["self"],["f32x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",10,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",10,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",10,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",10,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",10,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["f32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",10,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",10,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"eq","","Lane-wise equality comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",10,[[["self"],["f32x4"]],["m32x4"]]],[11,"add","","",10,[[["self"],["self"]],["self"]]],[11,"sub","","",10,[[["self"],["self"]],["self"]]],[11,"mul","","",10,[[["self"],["self"]],["self"]]],[11,"div","","",10,[[["self"],["self"]],["self"]]],[11,"rem","","",10,[[["self"],["self"]],["self"]]],[11,"add_assign","","",10,[[["self"],["self"]]]],[11,"sub_assign","","",10,[[["self"],["self"]]]],[11,"mul_assign","","",10,[[["self"],["self"]]]],[11,"div_assign","","",10,[[["self"],["self"]]]],[11,"rem_assign","","",10,[[["self"],["self"]]]],[11,"add","","",10,[[["self"],["f32"]],["self"]]],[11,"sub","","",10,[[["self"],["f32"]],["self"]]],[11,"mul","","",10,[[["self"],["f32"]],["self"]]],[11,"div","","",10,[[["self"],["f32"]],["self"]]],[11,"rem","","",10,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",10,[[["self"],["f32"]]]],[11,"sub_assign","","",10,[[["self"],["f32"]]]],[11,"mul_assign","","",10,[[["self"],["f32"]]]],[11,"div_assign","","",10,[[["self"],["f32"]]]],[11,"rem_assign","","",10,[[["self"],["f32"]]]],[11,"sum","","Horizontal sum of the vector elements.",10,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",10,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",10,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",10,[[["self"]],["f32"]]],[11,"neg","","",10,[[["self"]],["self"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"ne","","",10,[[["self"],["self"]],["bool"]]],[11,"default","","",10,[[],["self"]]],[11,"min","","Minimum of two vectors.",10,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",10,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",10,[[["self"]],["self"]]],[11,"sqrt","","Square-root",10,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",10,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",10,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",10,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",10,[[["self"]],["self"]]],[11,"cos","","Cos",10,[[["self"]],["self"]]],[11,"clone","","",11,[[["self"]],["m32x4"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",11,[[["self"],["m32x4"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["m32x4"]],["bool"]]],[11,"le","","",11,[[["self"],["m32x4"]],["bool"]]],[11,"gt","","",11,[[["self"],["m32x4"]],["bool"]]],[11,"ge","","",11,[[["self"],["m32x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",11,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",11,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",11,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",11,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",11,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",11,[[["self"]],["self"]]],[11,"bitxor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand","","",11,[[["self"],["self"]],["self"]]],[11,"bitor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["self"]]]],[11,"bitor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor","","",11,[[["self"],["bool"]],["self"]]],[11,"bitand","","",11,[[["self"],["bool"]],["self"]]],[11,"bitor","","",11,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["bool"]]]],[11,"bitor_assign","","",11,[[["self"],["bool"]]]],[11,"bitxor_assign","","",11,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",11,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",11,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",11,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",11,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",11,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",11,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",11,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",11,[[["self"],["m32x4"]],["m32x4"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"ne","","",11,[[["self"],["self"]],["bool"]]],[11,"default","","",11,[[],["self"]]],[11,"clone","","",12,[[["self"]],["i64x2"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",12,[[["self"],["i64x2"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["i64x2"]],["bool"]]],[11,"le","","",12,[[["self"],["i64x2"]],["bool"]]],[11,"gt","","",12,[[["self"],["i64x2"]],["bool"]]],[11,"ge","","",12,[[["self"],["i64x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",12,[[["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",12,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",12,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",12,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["i64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",12,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",12,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"eq","","Lane-wise equality comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",12,[[["self"],["i64x2"]],["m64x2"]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"mul","","",12,[[["self"],["self"]],["self"]]],[11,"div","","",12,[[["self"],["self"]],["self"]]],[11,"rem","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"mul_assign","","",12,[[["self"],["self"]]]],[11,"div_assign","","",12,[[["self"],["self"]]]],[11,"rem_assign","","",12,[[["self"],["self"]]]],[11,"add","","",12,[[["self"],["i64"]],["self"]]],[11,"sub","","",12,[[["self"],["i64"]],["self"]]],[11,"mul","","",12,[[["self"],["i64"]],["self"]]],[11,"div","","",12,[[["self"],["i64"]],["self"]]],[11,"rem","","",12,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",12,[[["self"],["i64"]]]],[11,"sub_assign","","",12,[[["self"],["i64"]]]],[11,"mul_assign","","",12,[[["self"],["i64"]]]],[11,"div_assign","","",12,[[["self"],["i64"]]]],[11,"rem_assign","","",12,[[["self"],["i64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",12,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",12,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",12,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",12,[[["self"]],["i64"]]],[11,"neg","","",12,[[["self"]],["self"]]],[11,"not","","",12,[[["self"]],["self"]]],[11,"bitxor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["self"]],["self"]]],[11,"bitor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["self"]]]],[11,"bitor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor","","",12,[[["self"],["i64"]],["self"]]],[11,"bitand","","",12,[[["self"],["i64"]],["self"]]],[11,"bitor","","",12,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["i64"]]]],[11,"bitor_assign","","",12,[[["self"],["i64"]]]],[11,"bitxor_assign","","",12,[[["self"],["i64"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",12,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",12,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",12,[[["self"]],["i64"]]],[11,"shl","","",12,[[["self"],["u8"]],["self"]]],[11,"shr","","",12,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u8"]]]],[11,"shr_assign","","",12,[[["self"],["u8"]]]],[11,"shl","","",12,[[["self"],["u16"]],["self"]]],[11,"shr","","",12,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u16"]]]],[11,"shr_assign","","",12,[[["self"],["u16"]]]],[11,"shl","","",12,[[["self"],["u32"]],["self"]]],[11,"shr","","",12,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u32"]]]],[11,"shr_assign","","",12,[[["self"],["u32"]]]],[11,"shl","","",12,[[["self"],["u64"]],["self"]]],[11,"shr","","",12,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u64"]]]],[11,"shr_assign","","",12,[[["self"],["u64"]]]],[11,"shl","","",12,[[["self"],["usize"]],["self"]]],[11,"shr","","",12,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["usize"]]]],[11,"shr_assign","","",12,[[["self"],["usize"]]]],[11,"shl","","",12,[[["self"],["i8"]],["self"]]],[11,"shr","","",12,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["i8"]]]],[11,"shr_assign","","",12,[[["self"],["i8"]]]],[11,"shl","","",12,[[["self"],["i16"]],["self"]]],[11,"shr","","",12,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["i16"]]]],[11,"shr_assign","","",12,[[["self"],["i16"]]]],[11,"shl","","",12,[[["self"],["i32"]],["self"]]],[11,"shr","","",12,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["i32"]]]],[11,"shr_assign","","",12,[[["self"],["i32"]]]],[11,"shl","","",12,[[["self"],["i64"]],["self"]]],[11,"shr","","",12,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["i64"]]]],[11,"shr_assign","","",12,[[["self"],["i64"]]]],[11,"shl","","",12,[[["self"],["isize"]],["self"]]],[11,"shr","","",12,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["isize"]]]],[11,"shr_assign","","",12,[[["self"],["isize"]]]],[11,"shl","","",12,[[["self"],["self"]],["self"]]],[11,"shr","","",12,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["self"]]]],[11,"shr_assign","","",12,[[["self"],["self"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"ne","","",12,[[["self"],["self"]],["bool"]]],[11,"default","","",12,[[],["self"]]],[11,"min","","Minimum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",12,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"clone","","",13,[[["self"]],["u64x2"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",13,[[["self"],["u64x2"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["u64x2"]],["bool"]]],[11,"le","","",13,[[["self"],["u64x2"]],["bool"]]],[11,"gt","","",13,[[["self"],["u64x2"]],["bool"]]],[11,"ge","","",13,[[["self"],["u64x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",13,[[["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",13,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",13,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",13,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["u64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",13,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",13,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",13,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",13,N],[11,"eq","","Lane-wise equality comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",13,[[["self"],["u64x2"]],["m64x2"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"add","","",13,[[["self"],["self"]],["self"]]],[11,"sub","","",13,[[["self"],["self"]],["self"]]],[11,"mul","","",13,[[["self"],["self"]],["self"]]],[11,"div","","",13,[[["self"],["self"]],["self"]]],[11,"rem","","",13,[[["self"],["self"]],["self"]]],[11,"add_assign","","",13,[[["self"],["self"]]]],[11,"sub_assign","","",13,[[["self"],["self"]]]],[11,"mul_assign","","",13,[[["self"],["self"]]]],[11,"div_assign","","",13,[[["self"],["self"]]]],[11,"rem_assign","","",13,[[["self"],["self"]]]],[11,"add","","",13,[[["self"],["u64"]],["self"]]],[11,"sub","","",13,[[["self"],["u64"]],["self"]]],[11,"mul","","",13,[[["self"],["u64"]],["self"]]],[11,"div","","",13,[[["self"],["u64"]],["self"]]],[11,"rem","","",13,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",13,[[["self"],["u64"]]]],[11,"sub_assign","","",13,[[["self"],["u64"]]]],[11,"mul_assign","","",13,[[["self"],["u64"]]]],[11,"div_assign","","",13,[[["self"],["u64"]]]],[11,"rem_assign","","",13,[[["self"],["u64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",13,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",13,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",13,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",13,[[["self"]],["u64"]]],[11,"bitxor","","",13,[[["self"],["u64"]],["self"]]],[11,"bitand","","",13,[[["self"],["u64"]],["self"]]],[11,"bitor","","",13,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["u64"]]]],[11,"bitor_assign","","",13,[[["self"],["u64"]]]],[11,"bitxor_assign","","",13,[[["self"],["u64"]]]],[11,"not","","",13,[[["self"]],["self"]]],[11,"bitxor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand","","",13,[[["self"],["self"]],["self"]]],[11,"bitor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["self"]]]],[11,"bitor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor_assign","","",13,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",13,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",13,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",13,[[["self"]],["u64"]]],[11,"shl","","",13,[[["self"],["u8"]],["self"]]],[11,"shr","","",13,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u8"]]]],[11,"shr_assign","","",13,[[["self"],["u8"]]]],[11,"shl","","",13,[[["self"],["u16"]],["self"]]],[11,"shr","","",13,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u16"]]]],[11,"shr_assign","","",13,[[["self"],["u16"]]]],[11,"shl","","",13,[[["self"],["u32"]],["self"]]],[11,"shr","","",13,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u32"]]]],[11,"shr_assign","","",13,[[["self"],["u32"]]]],[11,"shl","","",13,[[["self"],["u64"]],["self"]]],[11,"shr","","",13,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["u64"]]]],[11,"shr_assign","","",13,[[["self"],["u64"]]]],[11,"shl","","",13,[[["self"],["usize"]],["self"]]],[11,"shr","","",13,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["usize"]]]],[11,"shr_assign","","",13,[[["self"],["usize"]]]],[11,"shl","","",13,[[["self"],["i8"]],["self"]]],[11,"shr","","",13,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["i8"]]]],[11,"shr_assign","","",13,[[["self"],["i8"]]]],[11,"shl","","",13,[[["self"],["i16"]],["self"]]],[11,"shr","","",13,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["i16"]]]],[11,"shr_assign","","",13,[[["self"],["i16"]]]],[11,"shl","","",13,[[["self"],["i32"]],["self"]]],[11,"shr","","",13,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["i32"]]]],[11,"shr_assign","","",13,[[["self"],["i32"]]]],[11,"shl","","",13,[[["self"],["i64"]],["self"]]],[11,"shr","","",13,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["i64"]]]],[11,"shr_assign","","",13,[[["self"],["i64"]]]],[11,"shl","","",13,[[["self"],["isize"]],["self"]]],[11,"shr","","",13,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["isize"]]]],[11,"shr_assign","","",13,[[["self"],["isize"]]]],[11,"shl","","",13,[[["self"],["self"]],["self"]]],[11,"shr","","",13,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",13,[[["self"],["self"]]]],[11,"shr_assign","","",13,[[["self"],["self"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"ne","","",13,[[["self"],["self"]],["bool"]]],[11,"default","","",13,[[],["self"]]],[11,"min","","Minimum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",13,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",13,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",13,[[["self"]],["self"]]],[11,"clone","","",14,[[["self"]],["f64x2"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",14,[[["self"],["f64x2"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["f64x2"]],["bool"]]],[11,"le","","",14,[[["self"],["f64x2"]],["bool"]]],[11,"gt","","",14,[[["self"],["f64x2"]],["bool"]]],[11,"ge","","",14,[[["self"],["f64x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",14,[[["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",14,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",14,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",14,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",14,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["f64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",14,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",14,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"eq","","Lane-wise equality comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",14,[[["self"],["f64x2"]],["m64x2"]]],[11,"add","","",14,[[["self"],["self"]],["self"]]],[11,"sub","","",14,[[["self"],["self"]],["self"]]],[11,"mul","","",14,[[["self"],["self"]],["self"]]],[11,"div","","",14,[[["self"],["self"]],["self"]]],[11,"rem","","",14,[[["self"],["self"]],["self"]]],[11,"add_assign","","",14,[[["self"],["self"]]]],[11,"sub_assign","","",14,[[["self"],["self"]]]],[11,"mul_assign","","",14,[[["self"],["self"]]]],[11,"div_assign","","",14,[[["self"],["self"]]]],[11,"rem_assign","","",14,[[["self"],["self"]]]],[11,"add","","",14,[[["self"],["f64"]],["self"]]],[11,"sub","","",14,[[["self"],["f64"]],["self"]]],[11,"mul","","",14,[[["self"],["f64"]],["self"]]],[11,"div","","",14,[[["self"],["f64"]],["self"]]],[11,"rem","","",14,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",14,[[["self"],["f64"]]]],[11,"sub_assign","","",14,[[["self"],["f64"]]]],[11,"mul_assign","","",14,[[["self"],["f64"]]]],[11,"div_assign","","",14,[[["self"],["f64"]]]],[11,"rem_assign","","",14,[[["self"],["f64"]]]],[11,"sum","","Horizontal sum of the vector elements.",14,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",14,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",14,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",14,[[["self"]],["f64"]]],[11,"neg","","",14,[[["self"]],["self"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"ne","","",14,[[["self"],["self"]],["bool"]]],[11,"default","","",14,[[],["self"]]],[11,"min","","Minimum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",14,[[["self"]],["self"]]],[11,"sqrt","","Square-root",14,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",14,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",14,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",14,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",14,[[["self"]],["self"]]],[11,"cos","","Cos",14,[[["self"]],["self"]]],[11,"clone","","",15,[[["self"]],["m64x2"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",15,[[["self"],["m64x2"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["m64x2"]],["bool"]]],[11,"le","","",15,[[["self"],["m64x2"]],["bool"]]],[11,"gt","","",15,[[["self"],["m64x2"]],["bool"]]],[11,"ge","","",15,[[["self"],["m64x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",15,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",15,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",15,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",15,[[["self"]],["self"]]],[11,"bitxor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand","","",15,[[["self"],["self"]],["self"]]],[11,"bitor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["self"]]]],[11,"bitor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor","","",15,[[["self"],["bool"]],["self"]]],[11,"bitand","","",15,[[["self"],["bool"]],["self"]]],[11,"bitor","","",15,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["bool"]]]],[11,"bitor_assign","","",15,[[["self"],["bool"]]]],[11,"bitxor_assign","","",15,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",15,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",15,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",15,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",15,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",15,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",15,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",15,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",15,[[["self"],["m64x2"]],["m64x2"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"ne","","",15,[[["self"],["self"]],["bool"]]],[11,"default","","",15,[[],["self"]]],[11,"from_bits","","",13,[[["i64x2"]],["u64x2"]]],[11,"from_bits","","",13,[[["f64x2"]],["u64x2"]]],[11,"from_bits","","",13,[[["m64x2"]],["u64x2"]]],[11,"from_bits","","",13,[[["u32x4"]],["u64x2"]]],[11,"from_bits","","",13,[[["i32x4"]],["u64x2"]]],[11,"from_bits","","",13,[[["f32x4"]],["u64x2"]]],[11,"from_bits","","",13,[[["m32x4"]],["u64x2"]]],[11,"from_bits","","",13,[[["u16x8"]],["u64x2"]]],[11,"from_bits","","",13,[[["i16x8"]],["u64x2"]]],[11,"from_bits","","",13,[[["m16x8"]],["u64x2"]]],[11,"from_bits","","",13,[[["u8x16"]],["u64x2"]]],[11,"from_bits","","",13,[[["i8x16"]],["u64x2"]]],[11,"from_bits","","",13,[[["m8x16"]],["u64x2"]]],[11,"from_bits","","",12,[[["u64x2"]],["i64x2"]]],[11,"from_bits","","",12,[[["f64x2"]],["i64x2"]]],[11,"from_bits","","",12,[[["m64x2"]],["i64x2"]]],[11,"from_bits","","",12,[[["u32x4"]],["i64x2"]]],[11,"from_bits","","",12,[[["i32x4"]],["i64x2"]]],[11,"from_bits","","",12,[[["f32x4"]],["i64x2"]]],[11,"from_bits","","",12,[[["m32x4"]],["i64x2"]]],[11,"from_bits","","",12,[[["u16x8"]],["i64x2"]]],[11,"from_bits","","",12,[[["i16x8"]],["i64x2"]]],[11,"from_bits","","",12,[[["m16x8"]],["i64x2"]]],[11,"from_bits","","",12,[[["u8x16"]],["i64x2"]]],[11,"from_bits","","",12,[[["i8x16"]],["i64x2"]]],[11,"from_bits","","",12,[[["m8x16"]],["i64x2"]]],[11,"from_bits","","",14,[[["i64x2"]],["f64x2"]]],[11,"from_bits","","",14,[[["u64x2"]],["f64x2"]]],[11,"from_bits","","",14,[[["m64x2"]],["f64x2"]]],[11,"from_bits","","",14,[[["u32x4"]],["f64x2"]]],[11,"from_bits","","",14,[[["i32x4"]],["f64x2"]]],[11,"from_bits","","",14,[[["f32x4"]],["f64x2"]]],[11,"from_bits","","",14,[[["m32x4"]],["f64x2"]]],[11,"from_bits","","",14,[[["u16x8"]],["f64x2"]]],[11,"from_bits","","",14,[[["i16x8"]],["f64x2"]]],[11,"from_bits","","",14,[[["m16x8"]],["f64x2"]]],[11,"from_bits","","",14,[[["u8x16"]],["f64x2"]]],[11,"from_bits","","",14,[[["i8x16"]],["f64x2"]]],[11,"from_bits","","",14,[[["m8x16"]],["f64x2"]]],[11,"from_bits","","",9,[[["u64x2"]],["u32x4"]]],[11,"from_bits","","",9,[[["i64x2"]],["u32x4"]]],[11,"from_bits","","",9,[[["f64x2"]],["u32x4"]]],[11,"from_bits","","",9,[[["m64x2"]],["u32x4"]]],[11,"from_bits","","",9,[[["i32x4"]],["u32x4"]]],[11,"from_bits","","",9,[[["f32x4"]],["u32x4"]]],[11,"from_bits","","",9,[[["m32x4"]],["u32x4"]]],[11,"from_bits","","",9,[[["u16x8"]],["u32x4"]]],[11,"from_bits","","",9,[[["i16x8"]],["u32x4"]]],[11,"from_bits","","",9,[[["m16x8"]],["u32x4"]]],[11,"from_bits","","",9,[[["u8x16"]],["u32x4"]]],[11,"from_bits","","",9,[[["i8x16"]],["u32x4"]]],[11,"from_bits","","",9,[[["m8x16"]],["u32x4"]]],[11,"from_bits","","",8,[[["u64x2"]],["i32x4"]]],[11,"from_bits","","",8,[[["i64x2"]],["i32x4"]]],[11,"from_bits","","",8,[[["f64x2"]],["i32x4"]]],[11,"from_bits","","",8,[[["m64x2"]],["i32x4"]]],[11,"from_bits","","",8,[[["u32x4"]],["i32x4"]]],[11,"from_bits","","",8,[[["f32x4"]],["i32x4"]]],[11,"from_bits","","",8,[[["m32x4"]],["i32x4"]]],[11,"from_bits","","",8,[[["u16x8"]],["i32x4"]]],[11,"from_bits","","",8,[[["i16x8"]],["i32x4"]]],[11,"from_bits","","",8,[[["m16x8"]],["i32x4"]]],[11,"from_bits","","",8,[[["u8x16"]],["i32x4"]]],[11,"from_bits","","",8,[[["i8x16"]],["i32x4"]]],[11,"from_bits","","",8,[[["m8x16"]],["i32x4"]]],[11,"from_bits","","",10,[[["u64x2"]],["f32x4"]]],[11,"from_bits","","",10,[[["i64x2"]],["f32x4"]]],[11,"from_bits","","",10,[[["f64x2"]],["f32x4"]]],[11,"from_bits","","",10,[[["m64x2"]],["f32x4"]]],[11,"from_bits","","",10,[[["i32x4"]],["f32x4"]]],[11,"from_bits","","",10,[[["u32x4"]],["f32x4"]]],[11,"from_bits","","",10,[[["m32x4"]],["f32x4"]]],[11,"from_bits","","",10,[[["u16x8"]],["f32x4"]]],[11,"from_bits","","",10,[[["i16x8"]],["f32x4"]]],[11,"from_bits","","",10,[[["m16x8"]],["f32x4"]]],[11,"from_bits","","",10,[[["u8x16"]],["f32x4"]]],[11,"from_bits","","",10,[[["i8x16"]],["f32x4"]]],[11,"from_bits","","",10,[[["m8x16"]],["f32x4"]]],[11,"from_bits","","",6,[[["u64x2"]],["u16x8"]]],[11,"from_bits","","",6,[[["i64x2"]],["u16x8"]]],[11,"from_bits","","",6,[[["f64x2"]],["u16x8"]]],[11,"from_bits","","",6,[[["m64x2"]],["u16x8"]]],[11,"from_bits","","",6,[[["u32x4"]],["u16x8"]]],[11,"from_bits","","",6,[[["i32x4"]],["u16x8"]]],[11,"from_bits","","",6,[[["f32x4"]],["u16x8"]]],[11,"from_bits","","",6,[[["m32x4"]],["u16x8"]]],[11,"from_bits","","",6,[[["i16x8"]],["u16x8"]]],[11,"from_bits","","",6,[[["m16x8"]],["u16x8"]]],[11,"from_bits","","",6,[[["u8x16"]],["u16x8"]]],[11,"from_bits","","",6,[[["i8x16"]],["u16x8"]]],[11,"from_bits","","",6,[[["m8x16"]],["u16x8"]]],[11,"from_bits","","",5,[[["u64x2"]],["i16x8"]]],[11,"from_bits","","",5,[[["i64x2"]],["i16x8"]]],[11,"from_bits","","",5,[[["f64x2"]],["i16x8"]]],[11,"from_bits","","",5,[[["m64x2"]],["i16x8"]]],[11,"from_bits","","",5,[[["u32x4"]],["i16x8"]]],[11,"from_bits","","",5,[[["i32x4"]],["i16x8"]]],[11,"from_bits","","",5,[[["f32x4"]],["i16x8"]]],[11,"from_bits","","",5,[[["m32x4"]],["i16x8"]]],[11,"from_bits","","",5,[[["u16x8"]],["i16x8"]]],[11,"from_bits","","",5,[[["m16x8"]],["i16x8"]]],[11,"from_bits","","",5,[[["u8x16"]],["i16x8"]]],[11,"from_bits","","",5,[[["i8x16"]],["i16x8"]]],[11,"from_bits","","",5,[[["m8x16"]],["i16x8"]]],[11,"from_bits","","",3,[[["u64x2"]],["u8x16"]]],[11,"from_bits","","",3,[[["i64x2"]],["u8x16"]]],[11,"from_bits","","",3,[[["f64x2"]],["u8x16"]]],[11,"from_bits","","",3,[[["m64x2"]],["u8x16"]]],[11,"from_bits","","",3,[[["u32x4"]],["u8x16"]]],[11,"from_bits","","",3,[[["i32x4"]],["u8x16"]]],[11,"from_bits","","",3,[[["f32x4"]],["u8x16"]]],[11,"from_bits","","",3,[[["m32x4"]],["u8x16"]]],[11,"from_bits","","",3,[[["u16x8"]],["u8x16"]]],[11,"from_bits","","",3,[[["i16x8"]],["u8x16"]]],[11,"from_bits","","",3,[[["m16x8"]],["u8x16"]]],[11,"from_bits","","",3,[[["i8x16"]],["u8x16"]]],[11,"from_bits","","",3,[[["m8x16"]],["u8x16"]]],[11,"from_bits","","",2,[[["u64x2"]],["i8x16"]]],[11,"from_bits","","",2,[[["i64x2"]],["i8x16"]]],[11,"from_bits","","",2,[[["f64x2"]],["i8x16"]]],[11,"from_bits","","",2,[[["m64x2"]],["i8x16"]]],[11,"from_bits","","",2,[[["u32x4"]],["i8x16"]]],[11,"from_bits","","",2,[[["i32x4"]],["i8x16"]]],[11,"from_bits","","",2,[[["f32x4"]],["i8x16"]]],[11,"from_bits","","",2,[[["m32x4"]],["i8x16"]]],[11,"from_bits","","",2,[[["u16x8"]],["i8x16"]]],[11,"from_bits","","",2,[[["i16x8"]],["i8x16"]]],[11,"from_bits","","",2,[[["m16x8"]],["i8x16"]]],[11,"from_bits","","",2,[[["u8x16"]],["i8x16"]]],[11,"from_bits","","",2,[[["m8x16"]],["i8x16"]]],[11,"from","","",14,[[["f32x2"]],["f64x2"]]],[11,"from","","",14,[[["u64x2"]],["f64x2"]]],[11,"from","","",14,[[["i64x2"]],["f64x2"]]],[11,"from","","",14,[[["m64x2"]],["f64x2"]]],[11,"from","","",14,[[["u32x2"]],["f64x2"]]],[11,"from","","",14,[[["i32x2"]],["f64x2"]]],[11,"from","","",14,[[["m32x2"]],["f64x2"]]],[11,"from","","",14,[[["u16x2"]],["f64x2"]]],[11,"from","","",14,[[["i16x2"]],["f64x2"]]],[11,"from","","",14,[[["m16x2"]],["f64x2"]]],[11,"from","","",14,[[["u8x2"]],["f64x2"]]],[11,"from","","",14,[[["i8x2"]],["f64x2"]]],[11,"from","","",14,[[["m8x2"]],["f64x2"]]],[11,"from","","",13,[[["f64x2"]],["u64x2"]]],[11,"from","","",13,[[["i64x2"]],["u64x2"]]],[11,"from","","",13,[[["m64x2"]],["u64x2"]]],[11,"from","","",13,[[["f32x2"]],["u64x2"]]],[11,"from","","",13,[[["i32x2"]],["u64x2"]]],[11,"from","","",13,[[["u32x2"]],["u64x2"]]],[11,"from","","",13,[[["m32x2"]],["u64x2"]]],[11,"from","","",13,[[["i16x2"]],["u64x2"]]],[11,"from","","",13,[[["u16x2"]],["u64x2"]]],[11,"from","","",13,[[["m16x2"]],["u64x2"]]],[11,"from","","",13,[[["i8x2"]],["u64x2"]]],[11,"from","","",13,[[["u8x2"]],["u64x2"]]],[11,"from","","",13,[[["m8x2"]],["u64x2"]]],[11,"from","","",12,[[["f64x2"]],["i64x2"]]],[11,"from","","",12,[[["u64x2"]],["i64x2"]]],[11,"from","","",12,[[["m64x2"]],["i64x2"]]],[11,"from","","",12,[[["i32x2"]],["i64x2"]]],[11,"from","","",12,[[["u32x2"]],["i64x2"]]],[11,"from","","",12,[[["f32x2"]],["i64x2"]]],[11,"from","","",12,[[["m32x2"]],["i64x2"]]],[11,"from","","",12,[[["i16x2"]],["i64x2"]]],[11,"from","","",12,[[["u16x2"]],["i64x2"]]],[11,"from","","",12,[[["m16x2"]],["i64x2"]]],[11,"from","","",12,[[["i8x2"]],["i64x2"]]],[11,"from","","",12,[[["u8x2"]],["i64x2"]]],[11,"from","","",12,[[["m8x2"]],["i64x2"]]],[11,"from","","",9,[[["f64x4"]],["u32x4"]]],[11,"from","","",9,[[["u64x4"]],["u32x4"]]],[11,"from","","",9,[[["i64x4"]],["u32x4"]]],[11,"from","","",9,[[["m64x4"]],["u32x4"]]],[11,"from","","",9,[[["f32x4"]],["u32x4"]]],[11,"from","","",9,[[["i32x4"]],["u32x4"]]],[11,"from","","",9,[[["m32x4"]],["u32x4"]]],[11,"from","","",9,[[["u16x4"]],["u32x4"]]],[11,"from","","",9,[[["i16x4"]],["u32x4"]]],[11,"from","","",9,[[["m16x4"]],["u32x4"]]],[11,"from","","",9,[[["u8x4"]],["u32x4"]]],[11,"from","","",9,[[["i8x4"]],["u32x4"]]],[11,"from","","",9,[[["m8x4"]],["u32x4"]]],[11,"from","","",8,[[["f64x4"]],["i32x4"]]],[11,"from","","",8,[[["u64x4"]],["i32x4"]]],[11,"from","","",8,[[["i64x4"]],["i32x4"]]],[11,"from","","",8,[[["m64x4"]],["i32x4"]]],[11,"from","","",8,[[["f32x4"]],["i32x4"]]],[11,"from","","",8,[[["u32x4"]],["i32x4"]]],[11,"from","","",8,[[["m32x4"]],["i32x4"]]],[11,"from","","",8,[[["u16x4"]],["i32x4"]]],[11,"from","","",8,[[["i16x4"]],["i32x4"]]],[11,"from","","",8,[[["m16x4"]],["i32x4"]]],[11,"from","","",8,[[["u8x4"]],["i32x4"]]],[11,"from","","",8,[[["i8x4"]],["i32x4"]]],[11,"from","","",8,[[["m8x4"]],["i32x4"]]],[11,"from","","",10,[[["f64x4"]],["f32x4"]]],[11,"from","","",10,[[["u64x4"]],["f32x4"]]],[11,"from","","",10,[[["i64x4"]],["f32x4"]]],[11,"from","","",10,[[["m64x4"]],["f32x4"]]],[11,"from","","",10,[[["u32x4"]],["f32x4"]]],[11,"from","","",10,[[["i32x4"]],["f32x4"]]],[11,"from","","",10,[[["m32x4"]],["f32x4"]]],[11,"from","","",10,[[["u16x4"]],["f32x4"]]],[11,"from","","",10,[[["i16x4"]],["f32x4"]]],[11,"from","","",10,[[["m16x4"]],["f32x4"]]],[11,"from","","",10,[[["u8x4"]],["f32x4"]]],[11,"from","","",10,[[["i8x4"]],["f32x4"]]],[11,"from","","",10,[[["m8x4"]],["f32x4"]]],[11,"from","","",5,[[["f64x8"]],["i16x8"]]],[11,"from","","",5,[[["u64x8"]],["i16x8"]]],[11,"from","","",5,[[["i64x8"]],["i16x8"]]],[11,"from","","",5,[[["m1x8"]],["i16x8"]]],[11,"from","","",5,[[["f32x8"]],["i16x8"]]],[11,"from","","",5,[[["u32x8"]],["i16x8"]]],[11,"from","","",5,[[["i32x8"]],["i16x8"]]],[11,"from","","",5,[[["m32x8"]],["i16x8"]]],[11,"from","","",5,[[["u16x8"]],["i16x8"]]],[11,"from","","",5,[[["m16x8"]],["i16x8"]]],[11,"from","","",5,[[["u8x8"]],["i16x8"]]],[11,"from","","",5,[[["i8x8"]],["i16x8"]]],[11,"from","","",5,[[["m8x8"]],["i16x8"]]],[11,"from","","",6,[[["f64x8"]],["u16x8"]]],[11,"from","","",6,[[["u64x8"]],["u16x8"]]],[11,"from","","",6,[[["i64x8"]],["u16x8"]]],[11,"from","","",6,[[["m1x8"]],["u16x8"]]],[11,"from","","",6,[[["f32x8"]],["u16x8"]]],[11,"from","","",6,[[["u32x8"]],["u16x8"]]],[11,"from","","",6,[[["i32x8"]],["u16x8"]]],[11,"from","","",6,[[["m32x8"]],["u16x8"]]],[11,"from","","",6,[[["i16x8"]],["u16x8"]]],[11,"from","","",6,[[["m16x8"]],["u16x8"]]],[11,"from","","",6,[[["u8x8"]],["u16x8"]]],[11,"from","","",6,[[["i8x8"]],["u16x8"]]],[11,"from","","",6,[[["m8x8"]],["u16x8"]]],[11,"from","","",3,[[["i32x16"]],["u8x16"]]],[11,"from","","",3,[[["u32x16"]],["u8x16"]]],[11,"from","","",3,[[["f32x16"]],["u8x16"]]],[11,"from","","",3,[[["m1x16"]],["u8x16"]]],[11,"from","","",3,[[["i16x16"]],["u8x16"]]],[11,"from","","",3,[[["u16x16"]],["u8x16"]]],[11,"from","","",3,[[["m16x16"]],["u8x16"]]],[11,"from","","",3,[[["i8x16"]],["u8x16"]]],[11,"from","","",3,[[["m8x16"]],["u8x16"]]],[11,"from","","",2,[[["i32x16"]],["i8x16"]]],[11,"from","","",2,[[["u32x16"]],["i8x16"]]],[11,"from","","",2,[[["f32x16"]],["i8x16"]]],[11,"from","","",2,[[["m1x16"]],["i8x16"]]],[11,"from","","",2,[[["i16x16"]],["i8x16"]]],[11,"from","","",2,[[["u16x16"]],["i8x16"]]],[11,"from","","",2,[[["m16x16"]],["i8x16"]]],[11,"from","","",2,[[["u8x16"]],["i8x16"]]],[11,"from","","",2,[[["m8x16"]],["i8x16"]]],[11,"from","","",4,[[["m1x16"]],["m8x16"]]],[11,"from","","",4,[[["m16x16"]],["m8x16"]]],[11,"from","","",7,[[["m1x8"]],["m16x8"]]],[11,"from","","",7,[[["m32x8"]],["m16x8"]]],[11,"from","","",7,[[["m8x8"]],["m16x8"]]],[11,"from","","",11,[[["m64x4"]],["m32x4"]]],[11,"from","","",11,[[["m16x4"]],["m32x4"]]],[11,"from","","",11,[[["m8x4"]],["m32x4"]]],[11,"from","","",15,[[["m32x2"]],["m64x2"]]],[11,"from","","",15,[[["m16x2"]],["m64x2"]]],[11,"from","","",15,[[["m8x2"]],["m64x2"]]],[11,"clone","","",16,[[["self"]],["i8x2"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",16,[[["self"],["i8x2"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["i8x2"]],["bool"]]],[11,"le","","",16,[[["self"],["i8x2"]],["bool"]]],[11,"gt","","",16,[[["self"],["i8x2"]],["bool"]]],[11,"ge","","",16,[[["self"],["i8x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",16,[[["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",16,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",16,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",16,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",16,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",16,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",16,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"eq","","Lane-wise equality comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",16,[[["self"],["i8x2"]],["m8x2"]]],[11,"hash","","",16,[[["self"],["h"]]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"mul","","",16,[[["self"],["self"]],["self"]]],[11,"div","","",16,[[["self"],["self"]],["self"]]],[11,"rem","","",16,[[["self"],["self"]],["self"]]],[11,"add_assign","","",16,[[["self"],["self"]]]],[11,"sub_assign","","",16,[[["self"],["self"]]]],[11,"mul_assign","","",16,[[["self"],["self"]]]],[11,"div_assign","","",16,[[["self"],["self"]]]],[11,"rem_assign","","",16,[[["self"],["self"]]]],[11,"add","","",16,[[["self"],["i8"]],["self"]]],[11,"sub","","",16,[[["self"],["i8"]],["self"]]],[11,"mul","","",16,[[["self"],["i8"]],["self"]]],[11,"div","","",16,[[["self"],["i8"]],["self"]]],[11,"rem","","",16,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",16,[[["self"],["i8"]]]],[11,"sub_assign","","",16,[[["self"],["i8"]]]],[11,"mul_assign","","",16,[[["self"],["i8"]]]],[11,"div_assign","","",16,[[["self"],["i8"]]]],[11,"rem_assign","","",16,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",16,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",16,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",16,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",16,[[["self"]],["i8"]]],[11,"neg","","",16,[[["self"]],["self"]]],[11,"not","","",16,[[["self"]],["self"]]],[11,"bitxor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand","","",16,[[["self"],["self"]],["self"]]],[11,"bitor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["self"]]]],[11,"bitor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor","","",16,[[["self"],["i8"]],["self"]]],[11,"bitand","","",16,[[["self"],["i8"]],["self"]]],[11,"bitor","","",16,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["i8"]]]],[11,"bitor_assign","","",16,[[["self"],["i8"]]]],[11,"bitxor_assign","","",16,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",16,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",16,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",16,[[["self"]],["i8"]]],[11,"shl","","",16,[[["self"],["u8"]],["self"]]],[11,"shr","","",16,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u8"]]]],[11,"shr_assign","","",16,[[["self"],["u8"]]]],[11,"shl","","",16,[[["self"],["u16"]],["self"]]],[11,"shr","","",16,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u16"]]]],[11,"shr_assign","","",16,[[["self"],["u16"]]]],[11,"shl","","",16,[[["self"],["u32"]],["self"]]],[11,"shr","","",16,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u32"]]]],[11,"shr_assign","","",16,[[["self"],["u32"]]]],[11,"shl","","",16,[[["self"],["u64"]],["self"]]],[11,"shr","","",16,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["u64"]]]],[11,"shr_assign","","",16,[[["self"],["u64"]]]],[11,"shl","","",16,[[["self"],["usize"]],["self"]]],[11,"shr","","",16,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["usize"]]]],[11,"shr_assign","","",16,[[["self"],["usize"]]]],[11,"shl","","",16,[[["self"],["i8"]],["self"]]],[11,"shr","","",16,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["i8"]]]],[11,"shr_assign","","",16,[[["self"],["i8"]]]],[11,"shl","","",16,[[["self"],["i16"]],["self"]]],[11,"shr","","",16,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["i16"]]]],[11,"shr_assign","","",16,[[["self"],["i16"]]]],[11,"shl","","",16,[[["self"],["i32"]],["self"]]],[11,"shr","","",16,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["i32"]]]],[11,"shr_assign","","",16,[[["self"],["i32"]]]],[11,"shl","","",16,[[["self"],["i64"]],["self"]]],[11,"shr","","",16,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["i64"]]]],[11,"shr_assign","","",16,[[["self"],["i64"]]]],[11,"shl","","",16,[[["self"],["isize"]],["self"]]],[11,"shr","","",16,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["isize"]]]],[11,"shr_assign","","",16,[[["self"],["isize"]]]],[11,"shl","","",16,[[["self"],["self"]],["self"]]],[11,"shr","","",16,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",16,[[["self"],["self"]]]],[11,"shr_assign","","",16,[[["self"],["self"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"ne","","",16,[[["self"],["self"]],["bool"]]],[11,"default","","",16,[[],["self"]]],[11,"min","","Minimum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",16,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",16,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",16,[[["self"]],["self"]]],[11,"clone","","",17,[[["self"]],["u8x2"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",17,[[["self"],["u8x2"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["u8x2"]],["bool"]]],[11,"le","","",17,[[["self"],["u8x2"]],["bool"]]],[11,"gt","","",17,[[["self"],["u8x2"]],["bool"]]],[11,"ge","","",17,[[["self"],["u8x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",17,[[["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",17,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",17,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",17,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",17,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"eq","","Lane-wise equality comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",17,[[["self"],["u8x2"]],["m8x2"]]],[11,"hash","","",17,[[["self"],["h"]]]],[11,"add","","",17,[[["self"],["self"]],["self"]]],[11,"sub","","",17,[[["self"],["self"]],["self"]]],[11,"mul","","",17,[[["self"],["self"]],["self"]]],[11,"div","","",17,[[["self"],["self"]],["self"]]],[11,"rem","","",17,[[["self"],["self"]],["self"]]],[11,"add_assign","","",17,[[["self"],["self"]]]],[11,"sub_assign","","",17,[[["self"],["self"]]]],[11,"mul_assign","","",17,[[["self"],["self"]]]],[11,"div_assign","","",17,[[["self"],["self"]]]],[11,"rem_assign","","",17,[[["self"],["self"]]]],[11,"add","","",17,[[["self"],["u8"]],["self"]]],[11,"sub","","",17,[[["self"],["u8"]],["self"]]],[11,"mul","","",17,[[["self"],["u8"]],["self"]]],[11,"div","","",17,[[["self"],["u8"]],["self"]]],[11,"rem","","",17,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",17,[[["self"],["u8"]]]],[11,"sub_assign","","",17,[[["self"],["u8"]]]],[11,"mul_assign","","",17,[[["self"],["u8"]]]],[11,"div_assign","","",17,[[["self"],["u8"]]]],[11,"rem_assign","","",17,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",17,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",17,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",17,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",17,[[["self"]],["u8"]]],[11,"bitxor","","",17,[[["self"],["u8"]],["self"]]],[11,"bitand","","",17,[[["self"],["u8"]],["self"]]],[11,"bitor","","",17,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["u8"]]]],[11,"bitor_assign","","",17,[[["self"],["u8"]]]],[11,"bitxor_assign","","",17,[[["self"],["u8"]]]],[11,"not","","",17,[[["self"]],["self"]]],[11,"bitxor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand","","",17,[[["self"],["self"]],["self"]]],[11,"bitor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["self"]]]],[11,"bitor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor_assign","","",17,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",17,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",17,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",17,[[["self"]],["u8"]]],[11,"shl","","",17,[[["self"],["u8"]],["self"]]],[11,"shr","","",17,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u8"]]]],[11,"shr_assign","","",17,[[["self"],["u8"]]]],[11,"shl","","",17,[[["self"],["u16"]],["self"]]],[11,"shr","","",17,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u16"]]]],[11,"shr_assign","","",17,[[["self"],["u16"]]]],[11,"shl","","",17,[[["self"],["u32"]],["self"]]],[11,"shr","","",17,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u32"]]]],[11,"shr_assign","","",17,[[["self"],["u32"]]]],[11,"shl","","",17,[[["self"],["u64"]],["self"]]],[11,"shr","","",17,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u64"]]]],[11,"shr_assign","","",17,[[["self"],["u64"]]]],[11,"shl","","",17,[[["self"],["usize"]],["self"]]],[11,"shr","","",17,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["usize"]]]],[11,"shr_assign","","",17,[[["self"],["usize"]]]],[11,"shl","","",17,[[["self"],["i8"]],["self"]]],[11,"shr","","",17,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["i8"]]]],[11,"shr_assign","","",17,[[["self"],["i8"]]]],[11,"shl","","",17,[[["self"],["i16"]],["self"]]],[11,"shr","","",17,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["i16"]]]],[11,"shr_assign","","",17,[[["self"],["i16"]]]],[11,"shl","","",17,[[["self"],["i32"]],["self"]]],[11,"shr","","",17,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["i32"]]]],[11,"shr_assign","","",17,[[["self"],["i32"]]]],[11,"shl","","",17,[[["self"],["i64"]],["self"]]],[11,"shr","","",17,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["i64"]]]],[11,"shr_assign","","",17,[[["self"],["i64"]]]],[11,"shl","","",17,[[["self"],["isize"]],["self"]]],[11,"shr","","",17,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["isize"]]]],[11,"shr_assign","","",17,[[["self"],["isize"]]]],[11,"shl","","",17,[[["self"],["self"]],["self"]]],[11,"shr","","",17,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["self"]]]],[11,"shr_assign","","",17,[[["self"],["self"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["self"]],["bool"]]],[11,"ne","","",17,[[["self"],["self"]],["bool"]]],[11,"default","","",17,[[],["self"]]],[11,"min","","Minimum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",17,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"clone","","",18,[[["self"]],["m8x2"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",18,[[["self"],["m8x2"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["m8x2"]],["bool"]]],[11,"le","","",18,[[["self"],["m8x2"]],["bool"]]],[11,"gt","","",18,[[["self"],["m8x2"]],["bool"]]],[11,"ge","","",18,[[["self"],["m8x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",18,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",18,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",18,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",18,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",18,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",18,[[["self"]],["self"]]],[11,"bitxor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand","","",18,[[["self"],["self"]],["self"]]],[11,"bitor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["self"]]]],[11,"bitor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor","","",18,[[["self"],["bool"]],["self"]]],[11,"bitand","","",18,[[["self"],["bool"]],["self"]]],[11,"bitor","","",18,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["bool"]]]],[11,"bitor_assign","","",18,[[["self"],["bool"]]]],[11,"bitxor_assign","","",18,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",18,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",18,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",18,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",18,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",18,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",18,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",18,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",18,[[["self"],["m8x2"]],["m8x2"]]],[11,"eq","","",18,[[["self"],["self"]],["bool"]]],[11,"ne","","",18,[[["self"],["self"]],["bool"]]],[11,"default","","",18,[[],["self"]]],[11,"from_bits","","",16,[[["u8x2"]],["i8x2"]]],[11,"from_bits","","",16,[[["m8x2"]],["i8x2"]]],[11,"from_bits","","",17,[[["i8x2"]],["u8x2"]]],[11,"from_bits","","",17,[[["m8x2"]],["u8x2"]]],[11,"from","","",16,[[["f64x2"]],["i8x2"]]],[11,"from","","",16,[[["u64x2"]],["i8x2"]]],[11,"from","","",16,[[["m64x2"]],["i8x2"]]],[11,"from","","",16,[[["i64x2"]],["i8x2"]]],[11,"from","","",16,[[["f32x2"]],["i8x2"]]],[11,"from","","",16,[[["u32x2"]],["i8x2"]]],[11,"from","","",16,[[["i32x2"]],["i8x2"]]],[11,"from","","",16,[[["m32x2"]],["i8x2"]]],[11,"from","","",16,[[["u16x2"]],["i8x2"]]],[11,"from","","",16,[[["m16x2"]],["i8x2"]]],[11,"from","","",16,[[["u8x2"]],["i8x2"]]],[11,"from","","",16,[[["m8x2"]],["i8x2"]]],[11,"from","","",17,[[["f64x2"]],["u8x2"]]],[11,"from","","",17,[[["u64x2"]],["u8x2"]]],[11,"from","","",17,[[["i64x2"]],["u8x2"]]],[11,"from","","",17,[[["m64x2"]],["u8x2"]]],[11,"from","","",17,[[["f32x2"]],["u8x2"]]],[11,"from","","",17,[[["u32x2"]],["u8x2"]]],[11,"from","","",17,[[["i32x2"]],["u8x2"]]],[11,"from","","",17,[[["m32x2"]],["u8x2"]]],[11,"from","","",17,[[["u16x2"]],["u8x2"]]],[11,"from","","",17,[[["m16x2"]],["u8x2"]]],[11,"from","","",17,[[["i8x2"]],["u8x2"]]],[11,"from","","",17,[[["m8x2"]],["u8x2"]]],[11,"from","","",18,[[["m64x2"]],["m8x2"]]],[11,"from","","",18,[[["m32x2"]],["m8x2"]]],[11,"from","","",18,[[["m16x2"]],["m8x2"]]],[11,"clone","","",19,[[["self"]],["i8x32"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",19,[[["self"],["i8x32"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["i8x32"]],["bool"]]],[11,"le","","",19,[[["self"],["i8x32"]],["bool"]]],[11,"gt","","",19,[[["self"],["i8x32"]],["bool"]]],[11,"ge","","",19,[[["self"],["i8x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",19,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",19,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",19,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",19,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",19,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",19,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",19,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"eq","","Lane-wise equality comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",19,[[["self"],["i8x32"]],["m8x32"]]],[11,"hash","","",19,[[["self"],["h"]]]],[11,"add","","",19,[[["self"],["self"]],["self"]]],[11,"sub","","",19,[[["self"],["self"]],["self"]]],[11,"mul","","",19,[[["self"],["self"]],["self"]]],[11,"div","","",19,[[["self"],["self"]],["self"]]],[11,"rem","","",19,[[["self"],["self"]],["self"]]],[11,"add_assign","","",19,[[["self"],["self"]]]],[11,"sub_assign","","",19,[[["self"],["self"]]]],[11,"mul_assign","","",19,[[["self"],["self"]]]],[11,"div_assign","","",19,[[["self"],["self"]]]],[11,"rem_assign","","",19,[[["self"],["self"]]]],[11,"add","","",19,[[["self"],["i8"]],["self"]]],[11,"sub","","",19,[[["self"],["i8"]],["self"]]],[11,"mul","","",19,[[["self"],["i8"]],["self"]]],[11,"div","","",19,[[["self"],["i8"]],["self"]]],[11,"rem","","",19,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",19,[[["self"],["i8"]]]],[11,"sub_assign","","",19,[[["self"],["i8"]]]],[11,"mul_assign","","",19,[[["self"],["i8"]]]],[11,"div_assign","","",19,[[["self"],["i8"]]]],[11,"rem_assign","","",19,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",19,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",19,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",19,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",19,[[["self"]],["i8"]]],[11,"neg","","",19,[[["self"]],["self"]]],[11,"not","","",19,[[["self"]],["self"]]],[11,"bitxor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand","","",19,[[["self"],["self"]],["self"]]],[11,"bitor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["self"]]]],[11,"bitor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor","","",19,[[["self"],["i8"]],["self"]]],[11,"bitand","","",19,[[["self"],["i8"]],["self"]]],[11,"bitor","","",19,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["i8"]]]],[11,"bitor_assign","","",19,[[["self"],["i8"]]]],[11,"bitxor_assign","","",19,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",19,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",19,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",19,[[["self"]],["i8"]]],[11,"shl","","",19,[[["self"],["u8"]],["self"]]],[11,"shr","","",19,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["u8"]]]],[11,"shr_assign","","",19,[[["self"],["u8"]]]],[11,"shl","","",19,[[["self"],["u16"]],["self"]]],[11,"shr","","",19,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["u16"]]]],[11,"shr_assign","","",19,[[["self"],["u16"]]]],[11,"shl","","",19,[[["self"],["u32"]],["self"]]],[11,"shr","","",19,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["u32"]]]],[11,"shr_assign","","",19,[[["self"],["u32"]]]],[11,"shl","","",19,[[["self"],["u64"]],["self"]]],[11,"shr","","",19,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["u64"]]]],[11,"shr_assign","","",19,[[["self"],["u64"]]]],[11,"shl","","",19,[[["self"],["usize"]],["self"]]],[11,"shr","","",19,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["usize"]]]],[11,"shr_assign","","",19,[[["self"],["usize"]]]],[11,"shl","","",19,[[["self"],["i8"]],["self"]]],[11,"shr","","",19,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["i8"]]]],[11,"shr_assign","","",19,[[["self"],["i8"]]]],[11,"shl","","",19,[[["self"],["i16"]],["self"]]],[11,"shr","","",19,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["i16"]]]],[11,"shr_assign","","",19,[[["self"],["i16"]]]],[11,"shl","","",19,[[["self"],["i32"]],["self"]]],[11,"shr","","",19,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["i32"]]]],[11,"shr_assign","","",19,[[["self"],["i32"]]]],[11,"shl","","",19,[[["self"],["i64"]],["self"]]],[11,"shr","","",19,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["i64"]]]],[11,"shr_assign","","",19,[[["self"],["i64"]]]],[11,"shl","","",19,[[["self"],["isize"]],["self"]]],[11,"shr","","",19,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["isize"]]]],[11,"shr_assign","","",19,[[["self"],["isize"]]]],[11,"shl","","",19,[[["self"],["self"]],["self"]]],[11,"shr","","",19,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",19,[[["self"],["self"]]]],[11,"shr_assign","","",19,[[["self"],["self"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"ne","","",19,[[["self"],["self"]],["bool"]]],[11,"default","","",19,[[],["self"]]],[11,"min","","Minimum of two vectors.",19,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",19,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",19,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",19,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",19,[[["self"]],["self"]]],[11,"clone","","",20,[[["self"]],["u8x32"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",20,[[["self"],["u8x32"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["u8x32"]],["bool"]]],[11,"le","","",20,[[["self"],["u8x32"]],["bool"]]],[11,"gt","","",20,[[["self"],["u8x32"]],["bool"]]],[11,"ge","","",20,[[["self"],["u8x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",20,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",20,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",20,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",20,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",20,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",20,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",20,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"eq","","Lane-wise equality comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",20,[[["self"],["u8x32"]],["m8x32"]]],[11,"hash","","",20,[[["self"],["h"]]]],[11,"add","","",20,[[["self"],["self"]],["self"]]],[11,"sub","","",20,[[["self"],["self"]],["self"]]],[11,"mul","","",20,[[["self"],["self"]],["self"]]],[11,"div","","",20,[[["self"],["self"]],["self"]]],[11,"rem","","",20,[[["self"],["self"]],["self"]]],[11,"add_assign","","",20,[[["self"],["self"]]]],[11,"sub_assign","","",20,[[["self"],["self"]]]],[11,"mul_assign","","",20,[[["self"],["self"]]]],[11,"div_assign","","",20,[[["self"],["self"]]]],[11,"rem_assign","","",20,[[["self"],["self"]]]],[11,"add","","",20,[[["self"],["u8"]],["self"]]],[11,"sub","","",20,[[["self"],["u8"]],["self"]]],[11,"mul","","",20,[[["self"],["u8"]],["self"]]],[11,"div","","",20,[[["self"],["u8"]],["self"]]],[11,"rem","","",20,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",20,[[["self"],["u8"]]]],[11,"sub_assign","","",20,[[["self"],["u8"]]]],[11,"mul_assign","","",20,[[["self"],["u8"]]]],[11,"div_assign","","",20,[[["self"],["u8"]]]],[11,"rem_assign","","",20,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",20,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",20,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",20,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",20,[[["self"]],["u8"]]],[11,"bitxor","","",20,[[["self"],["u8"]],["self"]]],[11,"bitand","","",20,[[["self"],["u8"]],["self"]]],[11,"bitor","","",20,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["u8"]]]],[11,"bitor_assign","","",20,[[["self"],["u8"]]]],[11,"bitxor_assign","","",20,[[["self"],["u8"]]]],[11,"not","","",20,[[["self"]],["self"]]],[11,"bitxor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand","","",20,[[["self"],["self"]],["self"]]],[11,"bitor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["self"]]]],[11,"bitor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor_assign","","",20,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",20,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",20,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",20,[[["self"]],["u8"]]],[11,"shl","","",20,[[["self"],["u8"]],["self"]]],[11,"shr","","",20,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u8"]]]],[11,"shr_assign","","",20,[[["self"],["u8"]]]],[11,"shl","","",20,[[["self"],["u16"]],["self"]]],[11,"shr","","",20,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u16"]]]],[11,"shr_assign","","",20,[[["self"],["u16"]]]],[11,"shl","","",20,[[["self"],["u32"]],["self"]]],[11,"shr","","",20,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u32"]]]],[11,"shr_assign","","",20,[[["self"],["u32"]]]],[11,"shl","","",20,[[["self"],["u64"]],["self"]]],[11,"shr","","",20,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u64"]]]],[11,"shr_assign","","",20,[[["self"],["u64"]]]],[11,"shl","","",20,[[["self"],["usize"]],["self"]]],[11,"shr","","",20,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["usize"]]]],[11,"shr_assign","","",20,[[["self"],["usize"]]]],[11,"shl","","",20,[[["self"],["i8"]],["self"]]],[11,"shr","","",20,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["i8"]]]],[11,"shr_assign","","",20,[[["self"],["i8"]]]],[11,"shl","","",20,[[["self"],["i16"]],["self"]]],[11,"shr","","",20,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["i16"]]]],[11,"shr_assign","","",20,[[["self"],["i16"]]]],[11,"shl","","",20,[[["self"],["i32"]],["self"]]],[11,"shr","","",20,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["i32"]]]],[11,"shr_assign","","",20,[[["self"],["i32"]]]],[11,"shl","","",20,[[["self"],["i64"]],["self"]]],[11,"shr","","",20,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["i64"]]]],[11,"shr_assign","","",20,[[["self"],["i64"]]]],[11,"shl","","",20,[[["self"],["isize"]],["self"]]],[11,"shr","","",20,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["isize"]]]],[11,"shr_assign","","",20,[[["self"],["isize"]]]],[11,"shl","","",20,[[["self"],["self"]],["self"]]],[11,"shr","","",20,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["self"]]]],[11,"shr_assign","","",20,[[["self"],["self"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["self"]],["bool"]]],[11,"ne","","",20,[[["self"],["self"]],["bool"]]],[11,"default","","",20,[[],["self"]]],[11,"min","","Minimum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",20,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"clone","","",21,[[["self"]],["m8x32"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",21,[[["self"],["m8x32"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["m8x32"]],["bool"]]],[11,"le","","",21,[[["self"],["m8x32"]],["bool"]]],[11,"gt","","",21,[[["self"],["m8x32"]],["bool"]]],[11,"ge","","",21,[[["self"],["m8x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",21,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",21,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",21,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",21,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",21,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",21,[[["self"]],["self"]]],[11,"bitxor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand","","",21,[[["self"],["self"]],["self"]]],[11,"bitor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["self"]]]],[11,"bitor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor","","",21,[[["self"],["bool"]],["self"]]],[11,"bitand","","",21,[[["self"],["bool"]],["self"]]],[11,"bitor","","",21,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["bool"]]]],[11,"bitor_assign","","",21,[[["self"],["bool"]]]],[11,"bitxor_assign","","",21,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",21,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",21,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",21,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",21,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",21,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",21,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",21,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",21,[[["self"],["m8x32"]],["m8x32"]]],[11,"eq","","",21,[[["self"],["self"]],["bool"]]],[11,"ne","","",21,[[["self"],["self"]],["bool"]]],[11,"default","","",21,[[],["self"]]],[11,"clone","","",22,[[["self"]],["i16x16"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",22,[[["self"],["i16x16"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["i16x16"]],["bool"]]],[11,"le","","",22,[[["self"],["i16x16"]],["bool"]]],[11,"gt","","",22,[[["self"],["i16x16"]],["bool"]]],[11,"ge","","",22,[[["self"],["i16x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",22,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",22,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",22,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",22,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",22,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["i16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",22,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",22,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"eq","","Lane-wise equality comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",22,[[["self"],["i16x16"]],["m16x16"]]],[11,"hash","","",22,[[["self"],["h"]]]],[11,"add","","",22,[[["self"],["self"]],["self"]]],[11,"sub","","",22,[[["self"],["self"]],["self"]]],[11,"mul","","",22,[[["self"],["self"]],["self"]]],[11,"div","","",22,[[["self"],["self"]],["self"]]],[11,"rem","","",22,[[["self"],["self"]],["self"]]],[11,"add_assign","","",22,[[["self"],["self"]]]],[11,"sub_assign","","",22,[[["self"],["self"]]]],[11,"mul_assign","","",22,[[["self"],["self"]]]],[11,"div_assign","","",22,[[["self"],["self"]]]],[11,"rem_assign","","",22,[[["self"],["self"]]]],[11,"add","","",22,[[["self"],["i16"]],["self"]]],[11,"sub","","",22,[[["self"],["i16"]],["self"]]],[11,"mul","","",22,[[["self"],["i16"]],["self"]]],[11,"div","","",22,[[["self"],["i16"]],["self"]]],[11,"rem","","",22,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",22,[[["self"],["i16"]]]],[11,"sub_assign","","",22,[[["self"],["i16"]]]],[11,"mul_assign","","",22,[[["self"],["i16"]]]],[11,"div_assign","","",22,[[["self"],["i16"]]]],[11,"rem_assign","","",22,[[["self"],["i16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",22,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",22,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",22,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",22,[[["self"]],["i16"]]],[11,"neg","","",22,[[["self"]],["self"]]],[11,"not","","",22,[[["self"]],["self"]]],[11,"bitxor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand","","",22,[[["self"],["self"]],["self"]]],[11,"bitor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["self"]]]],[11,"bitor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor","","",22,[[["self"],["i16"]],["self"]]],[11,"bitand","","",22,[[["self"],["i16"]],["self"]]],[11,"bitor","","",22,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["i16"]]]],[11,"bitor_assign","","",22,[[["self"],["i16"]]]],[11,"bitxor_assign","","",22,[[["self"],["i16"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",22,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",22,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",22,[[["self"]],["i16"]]],[11,"shl","","",22,[[["self"],["u8"]],["self"]]],[11,"shr","","",22,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["u8"]]]],[11,"shr_assign","","",22,[[["self"],["u8"]]]],[11,"shl","","",22,[[["self"],["u16"]],["self"]]],[11,"shr","","",22,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["u16"]]]],[11,"shr_assign","","",22,[[["self"],["u16"]]]],[11,"shl","","",22,[[["self"],["u32"]],["self"]]],[11,"shr","","",22,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["u32"]]]],[11,"shr_assign","","",22,[[["self"],["u32"]]]],[11,"shl","","",22,[[["self"],["u64"]],["self"]]],[11,"shr","","",22,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["u64"]]]],[11,"shr_assign","","",22,[[["self"],["u64"]]]],[11,"shl","","",22,[[["self"],["usize"]],["self"]]],[11,"shr","","",22,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["usize"]]]],[11,"shr_assign","","",22,[[["self"],["usize"]]]],[11,"shl","","",22,[[["self"],["i8"]],["self"]]],[11,"shr","","",22,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["i8"]]]],[11,"shr_assign","","",22,[[["self"],["i8"]]]],[11,"shl","","",22,[[["self"],["i16"]],["self"]]],[11,"shr","","",22,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["i16"]]]],[11,"shr_assign","","",22,[[["self"],["i16"]]]],[11,"shl","","",22,[[["self"],["i32"]],["self"]]],[11,"shr","","",22,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["i32"]]]],[11,"shr_assign","","",22,[[["self"],["i32"]]]],[11,"shl","","",22,[[["self"],["i64"]],["self"]]],[11,"shr","","",22,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["i64"]]]],[11,"shr_assign","","",22,[[["self"],["i64"]]]],[11,"shl","","",22,[[["self"],["isize"]],["self"]]],[11,"shr","","",22,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["isize"]]]],[11,"shr_assign","","",22,[[["self"],["isize"]]]],[11,"shl","","",22,[[["self"],["self"]],["self"]]],[11,"shr","","",22,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",22,[[["self"],["self"]]]],[11,"shr_assign","","",22,[[["self"],["self"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["self"]],["bool"]]],[11,"ne","","",22,[[["self"],["self"]],["bool"]]],[11,"default","","",22,[[],["self"]]],[11,"min","","Minimum of two vectors.",22,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",22,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",22,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",22,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",22,[[["self"]],["self"]]],[11,"clone","","",23,[[["self"]],["u16x16"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",23,[[["self"],["u16x16"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["u16x16"]],["bool"]]],[11,"le","","",23,[[["self"],["u16x16"]],["bool"]]],[11,"gt","","",23,[[["self"],["u16x16"]],["bool"]]],[11,"ge","","",23,[[["self"],["u16x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",23,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",23,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",23,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",23,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",23,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["u16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",23,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",23,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"eq","","Lane-wise equality comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",23,[[["self"],["u16x16"]],["m16x16"]]],[11,"hash","","",23,[[["self"],["h"]]]],[11,"add","","",23,[[["self"],["self"]],["self"]]],[11,"sub","","",23,[[["self"],["self"]],["self"]]],[11,"mul","","",23,[[["self"],["self"]],["self"]]],[11,"div","","",23,[[["self"],["self"]],["self"]]],[11,"rem","","",23,[[["self"],["self"]],["self"]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"div_assign","","",23,[[["self"],["self"]]]],[11,"rem_assign","","",23,[[["self"],["self"]]]],[11,"add","","",23,[[["self"],["u16"]],["self"]]],[11,"sub","","",23,[[["self"],["u16"]],["self"]]],[11,"mul","","",23,[[["self"],["u16"]],["self"]]],[11,"div","","",23,[[["self"],["u16"]],["self"]]],[11,"rem","","",23,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",23,[[["self"],["u16"]]]],[11,"sub_assign","","",23,[[["self"],["u16"]]]],[11,"mul_assign","","",23,[[["self"],["u16"]]]],[11,"div_assign","","",23,[[["self"],["u16"]]]],[11,"rem_assign","","",23,[[["self"],["u16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",23,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",23,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",23,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",23,[[["self"]],["u16"]]],[11,"bitxor","","",23,[[["self"],["u16"]],["self"]]],[11,"bitand","","",23,[[["self"],["u16"]],["self"]]],[11,"bitor","","",23,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["u16"]]]],[11,"bitor_assign","","",23,[[["self"],["u16"]]]],[11,"bitxor_assign","","",23,[[["self"],["u16"]]]],[11,"not","","",23,[[["self"]],["self"]]],[11,"bitxor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand","","",23,[[["self"],["self"]],["self"]]],[11,"bitor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["self"]]]],[11,"bitor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor_assign","","",23,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",23,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",23,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",23,[[["self"]],["u16"]]],[11,"shl","","",23,[[["self"],["u8"]],["self"]]],[11,"shr","","",23,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u8"]]]],[11,"shr_assign","","",23,[[["self"],["u8"]]]],[11,"shl","","",23,[[["self"],["u16"]],["self"]]],[11,"shr","","",23,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u16"]]]],[11,"shr_assign","","",23,[[["self"],["u16"]]]],[11,"shl","","",23,[[["self"],["u32"]],["self"]]],[11,"shr","","",23,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u32"]]]],[11,"shr_assign","","",23,[[["self"],["u32"]]]],[11,"shl","","",23,[[["self"],["u64"]],["self"]]],[11,"shr","","",23,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u64"]]]],[11,"shr_assign","","",23,[[["self"],["u64"]]]],[11,"shl","","",23,[[["self"],["usize"]],["self"]]],[11,"shr","","",23,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["usize"]]]],[11,"shr_assign","","",23,[[["self"],["usize"]]]],[11,"shl","","",23,[[["self"],["i8"]],["self"]]],[11,"shr","","",23,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["i8"]]]],[11,"shr_assign","","",23,[[["self"],["i8"]]]],[11,"shl","","",23,[[["self"],["i16"]],["self"]]],[11,"shr","","",23,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["i16"]]]],[11,"shr_assign","","",23,[[["self"],["i16"]]]],[11,"shl","","",23,[[["self"],["i32"]],["self"]]],[11,"shr","","",23,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["i32"]]]],[11,"shr_assign","","",23,[[["self"],["i32"]]]],[11,"shl","","",23,[[["self"],["i64"]],["self"]]],[11,"shr","","",23,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["i64"]]]],[11,"shr_assign","","",23,[[["self"],["i64"]]]],[11,"shl","","",23,[[["self"],["isize"]],["self"]]],[11,"shr","","",23,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["isize"]]]],[11,"shr_assign","","",23,[[["self"],["isize"]]]],[11,"shl","","",23,[[["self"],["self"]],["self"]]],[11,"shr","","",23,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["self"]]]],[11,"shr_assign","","",23,[[["self"],["self"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["self"]],["bool"]]],[11,"ne","","",23,[[["self"],["self"]],["bool"]]],[11,"default","","",23,[[],["self"]]],[11,"min","","Minimum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",23,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"clone","","",24,[[["self"]],["m16x16"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",24,[[["self"],["m16x16"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["m16x16"]],["bool"]]],[11,"le","","",24,[[["self"],["m16x16"]],["bool"]]],[11,"gt","","",24,[[["self"],["m16x16"]],["bool"]]],[11,"ge","","",24,[[["self"],["m16x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",24,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",24,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",24,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",24,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",24,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",24,[[["self"]],["self"]]],[11,"bitxor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand","","",24,[[["self"],["self"]],["self"]]],[11,"bitor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["self"]]]],[11,"bitor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor","","",24,[[["self"],["bool"]],["self"]]],[11,"bitand","","",24,[[["self"],["bool"]],["self"]]],[11,"bitor","","",24,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["bool"]]]],[11,"bitor_assign","","",24,[[["self"],["bool"]]]],[11,"bitxor_assign","","",24,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",24,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",24,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",24,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",24,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",24,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",24,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",24,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",24,[[["self"],["m16x16"]],["m16x16"]]],[11,"eq","","",24,[[["self"],["self"]],["bool"]]],[11,"ne","","",24,[[["self"],["self"]],["bool"]]],[11,"default","","",24,[[],["self"]]],[11,"clone","","",25,[[["self"]],["i32x8"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",25,[[["self"],["i32x8"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["i32x8"]],["bool"]]],[11,"le","","",25,[[["self"],["i32x8"]],["bool"]]],[11,"gt","","",25,[[["self"],["i32x8"]],["bool"]]],[11,"ge","","",25,[[["self"],["i32x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",25,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",25,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",25,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",25,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",25,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["i32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",25,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",25,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"eq","","Lane-wise equality comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",25,[[["self"],["i32x8"]],["m32x8"]]],[11,"hash","","",25,[[["self"],["h"]]]],[11,"add","","",25,[[["self"],["self"]],["self"]]],[11,"sub","","",25,[[["self"],["self"]],["self"]]],[11,"mul","","",25,[[["self"],["self"]],["self"]]],[11,"div","","",25,[[["self"],["self"]],["self"]]],[11,"rem","","",25,[[["self"],["self"]],["self"]]],[11,"add_assign","","",25,[[["self"],["self"]]]],[11,"sub_assign","","",25,[[["self"],["self"]]]],[11,"mul_assign","","",25,[[["self"],["self"]]]],[11,"div_assign","","",25,[[["self"],["self"]]]],[11,"rem_assign","","",25,[[["self"],["self"]]]],[11,"add","","",25,[[["self"],["i32"]],["self"]]],[11,"sub","","",25,[[["self"],["i32"]],["self"]]],[11,"mul","","",25,[[["self"],["i32"]],["self"]]],[11,"div","","",25,[[["self"],["i32"]],["self"]]],[11,"rem","","",25,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",25,[[["self"],["i32"]]]],[11,"sub_assign","","",25,[[["self"],["i32"]]]],[11,"mul_assign","","",25,[[["self"],["i32"]]]],[11,"div_assign","","",25,[[["self"],["i32"]]]],[11,"rem_assign","","",25,[[["self"],["i32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",25,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",25,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",25,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",25,[[["self"]],["i32"]]],[11,"neg","","",25,[[["self"]],["self"]]],[11,"not","","",25,[[["self"]],["self"]]],[11,"bitxor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand","","",25,[[["self"],["self"]],["self"]]],[11,"bitor","","",25,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["self"]]]],[11,"bitor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor_assign","","",25,[[["self"],["self"]]]],[11,"bitxor","","",25,[[["self"],["i32"]],["self"]]],[11,"bitand","","",25,[[["self"],["i32"]],["self"]]],[11,"bitor","","",25,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",25,[[["self"],["i32"]]]],[11,"bitor_assign","","",25,[[["self"],["i32"]]]],[11,"bitxor_assign","","",25,[[["self"],["i32"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",25,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",25,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",25,[[["self"]],["i32"]]],[11,"shl","","",25,[[["self"],["u8"]],["self"]]],[11,"shr","","",25,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["u8"]]]],[11,"shr_assign","","",25,[[["self"],["u8"]]]],[11,"shl","","",25,[[["self"],["u16"]],["self"]]],[11,"shr","","",25,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["u16"]]]],[11,"shr_assign","","",25,[[["self"],["u16"]]]],[11,"shl","","",25,[[["self"],["u32"]],["self"]]],[11,"shr","","",25,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["u32"]]]],[11,"shr_assign","","",25,[[["self"],["u32"]]]],[11,"shl","","",25,[[["self"],["u64"]],["self"]]],[11,"shr","","",25,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["u64"]]]],[11,"shr_assign","","",25,[[["self"],["u64"]]]],[11,"shl","","",25,[[["self"],["usize"]],["self"]]],[11,"shr","","",25,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["usize"]]]],[11,"shr_assign","","",25,[[["self"],["usize"]]]],[11,"shl","","",25,[[["self"],["i8"]],["self"]]],[11,"shr","","",25,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["i8"]]]],[11,"shr_assign","","",25,[[["self"],["i8"]]]],[11,"shl","","",25,[[["self"],["i16"]],["self"]]],[11,"shr","","",25,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["i16"]]]],[11,"shr_assign","","",25,[[["self"],["i16"]]]],[11,"shl","","",25,[[["self"],["i32"]],["self"]]],[11,"shr","","",25,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["i32"]]]],[11,"shr_assign","","",25,[[["self"],["i32"]]]],[11,"shl","","",25,[[["self"],["i64"]],["self"]]],[11,"shr","","",25,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["i64"]]]],[11,"shr_assign","","",25,[[["self"],["i64"]]]],[11,"shl","","",25,[[["self"],["isize"]],["self"]]],[11,"shr","","",25,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["isize"]]]],[11,"shr_assign","","",25,[[["self"],["isize"]]]],[11,"shl","","",25,[[["self"],["self"]],["self"]]],[11,"shr","","",25,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",25,[[["self"],["self"]]]],[11,"shr_assign","","",25,[[["self"],["self"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["self"]],["bool"]]],[11,"ne","","",25,[[["self"],["self"]],["bool"]]],[11,"default","","",25,[[],["self"]]],[11,"min","","Minimum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",25,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",25,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",25,[[["self"]],["self"]]],[11,"clone","","",26,[[["self"]],["u32x8"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",26,[[["self"],["u32x8"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["u32x8"]],["bool"]]],[11,"le","","",26,[[["self"],["u32x8"]],["bool"]]],[11,"gt","","",26,[[["self"],["u32x8"]],["bool"]]],[11,"ge","","",26,[[["self"],["u32x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",26,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",26,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",26,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",26,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",26,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["u32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",26,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",26,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",26,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",26,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",26,N],[11,"eq","","Lane-wise equality comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",26,[[["self"],["u32x8"]],["m32x8"]]],[11,"hash","","",26,[[["self"],["h"]]]],[11,"add","","",26,[[["self"],["self"]],["self"]]],[11,"sub","","",26,[[["self"],["self"]],["self"]]],[11,"mul","","",26,[[["self"],["self"]],["self"]]],[11,"div","","",26,[[["self"],["self"]],["self"]]],[11,"rem","","",26,[[["self"],["self"]],["self"]]],[11,"add_assign","","",26,[[["self"],["self"]]]],[11,"sub_assign","","",26,[[["self"],["self"]]]],[11,"mul_assign","","",26,[[["self"],["self"]]]],[11,"div_assign","","",26,[[["self"],["self"]]]],[11,"rem_assign","","",26,[[["self"],["self"]]]],[11,"add","","",26,[[["self"],["u32"]],["self"]]],[11,"sub","","",26,[[["self"],["u32"]],["self"]]],[11,"mul","","",26,[[["self"],["u32"]],["self"]]],[11,"div","","",26,[[["self"],["u32"]],["self"]]],[11,"rem","","",26,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",26,[[["self"],["u32"]]]],[11,"sub_assign","","",26,[[["self"],["u32"]]]],[11,"mul_assign","","",26,[[["self"],["u32"]]]],[11,"div_assign","","",26,[[["self"],["u32"]]]],[11,"rem_assign","","",26,[[["self"],["u32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",26,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",26,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",26,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",26,[[["self"]],["u32"]]],[11,"bitxor","","",26,[[["self"],["u32"]],["self"]]],[11,"bitand","","",26,[[["self"],["u32"]],["self"]]],[11,"bitor","","",26,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["u32"]]]],[11,"bitor_assign","","",26,[[["self"],["u32"]]]],[11,"bitxor_assign","","",26,[[["self"],["u32"]]]],[11,"not","","",26,[[["self"]],["self"]]],[11,"bitxor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand","","",26,[[["self"],["self"]],["self"]]],[11,"bitor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["self"]]]],[11,"bitor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor_assign","","",26,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",26,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",26,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",26,[[["self"]],["u32"]]],[11,"shl","","",26,[[["self"],["u8"]],["self"]]],[11,"shr","","",26,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["u8"]]]],[11,"shr_assign","","",26,[[["self"],["u8"]]]],[11,"shl","","",26,[[["self"],["u16"]],["self"]]],[11,"shr","","",26,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["u16"]]]],[11,"shr_assign","","",26,[[["self"],["u16"]]]],[11,"shl","","",26,[[["self"],["u32"]],["self"]]],[11,"shr","","",26,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["u32"]]]],[11,"shr_assign","","",26,[[["self"],["u32"]]]],[11,"shl","","",26,[[["self"],["u64"]],["self"]]],[11,"shr","","",26,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["u64"]]]],[11,"shr_assign","","",26,[[["self"],["u64"]]]],[11,"shl","","",26,[[["self"],["usize"]],["self"]]],[11,"shr","","",26,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["usize"]]]],[11,"shr_assign","","",26,[[["self"],["usize"]]]],[11,"shl","","",26,[[["self"],["i8"]],["self"]]],[11,"shr","","",26,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["i8"]]]],[11,"shr_assign","","",26,[[["self"],["i8"]]]],[11,"shl","","",26,[[["self"],["i16"]],["self"]]],[11,"shr","","",26,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["i16"]]]],[11,"shr_assign","","",26,[[["self"],["i16"]]]],[11,"shl","","",26,[[["self"],["i32"]],["self"]]],[11,"shr","","",26,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["i32"]]]],[11,"shr_assign","","",26,[[["self"],["i32"]]]],[11,"shl","","",26,[[["self"],["i64"]],["self"]]],[11,"shr","","",26,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["i64"]]]],[11,"shr_assign","","",26,[[["self"],["i64"]]]],[11,"shl","","",26,[[["self"],["isize"]],["self"]]],[11,"shr","","",26,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["isize"]]]],[11,"shr_assign","","",26,[[["self"],["isize"]]]],[11,"shl","","",26,[[["self"],["self"]],["self"]]],[11,"shr","","",26,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",26,[[["self"],["self"]]]],[11,"shr_assign","","",26,[[["self"],["self"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["self"]],["bool"]]],[11,"ne","","",26,[[["self"],["self"]],["bool"]]],[11,"default","","",26,[[],["self"]]],[11,"min","","Minimum of two vectors.",26,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",26,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",26,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",26,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",26,[[["self"]],["self"]]],[11,"clone","","",27,[[["self"]],["f32x8"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",27,[[["self"],["f32x8"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["f32x8"]],["bool"]]],[11,"le","","",27,[[["self"],["f32x8"]],["bool"]]],[11,"gt","","",27,[[["self"],["f32x8"]],["bool"]]],[11,"ge","","",27,[[["self"],["f32x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",27,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",27,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",27,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",27,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",27,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["f32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",27,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",27,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"eq","","Lane-wise equality comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",27,[[["self"],["f32x8"]],["m32x8"]]],[11,"add","","",27,[[["self"],["self"]],["self"]]],[11,"sub","","",27,[[["self"],["self"]],["self"]]],[11,"mul","","",27,[[["self"],["self"]],["self"]]],[11,"div","","",27,[[["self"],["self"]],["self"]]],[11,"rem","","",27,[[["self"],["self"]],["self"]]],[11,"add_assign","","",27,[[["self"],["self"]]]],[11,"sub_assign","","",27,[[["self"],["self"]]]],[11,"mul_assign","","",27,[[["self"],["self"]]]],[11,"div_assign","","",27,[[["self"],["self"]]]],[11,"rem_assign","","",27,[[["self"],["self"]]]],[11,"add","","",27,[[["self"],["f32"]],["self"]]],[11,"sub","","",27,[[["self"],["f32"]],["self"]]],[11,"mul","","",27,[[["self"],["f32"]],["self"]]],[11,"div","","",27,[[["self"],["f32"]],["self"]]],[11,"rem","","",27,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",27,[[["self"],["f32"]]]],[11,"sub_assign","","",27,[[["self"],["f32"]]]],[11,"mul_assign","","",27,[[["self"],["f32"]]]],[11,"div_assign","","",27,[[["self"],["f32"]]]],[11,"rem_assign","","",27,[[["self"],["f32"]]]],[11,"sum","","Horizontal sum of the vector elements.",27,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",27,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",27,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",27,[[["self"]],["f32"]]],[11,"neg","","",27,[[["self"]],["self"]]],[11,"eq","","",27,[[["self"],["self"]],["bool"]]],[11,"ne","","",27,[[["self"],["self"]],["bool"]]],[11,"default","","",27,[[],["self"]]],[11,"min","","Minimum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",27,[[["self"]],["self"]]],[11,"sqrt","","Square-root",27,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",27,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",27,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",27,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",27,[[["self"]],["self"]]],[11,"cos","","Cos",27,[[["self"]],["self"]]],[11,"clone","","",28,[[["self"]],["m32x8"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",28,[[["self"],["m32x8"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["m32x8"]],["bool"]]],[11,"le","","",28,[[["self"],["m32x8"]],["bool"]]],[11,"gt","","",28,[[["self"],["m32x8"]],["bool"]]],[11,"ge","","",28,[[["self"],["m32x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",28,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",28,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",28,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",28,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",28,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",28,[[["self"]],["self"]]],[11,"bitxor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand","","",28,[[["self"],["self"]],["self"]]],[11,"bitor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["self"]]]],[11,"bitor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor","","",28,[[["self"],["bool"]],["self"]]],[11,"bitand","","",28,[[["self"],["bool"]],["self"]]],[11,"bitor","","",28,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["bool"]]]],[11,"bitor_assign","","",28,[[["self"],["bool"]]]],[11,"bitxor_assign","","",28,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",28,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",28,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",28,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",28,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",28,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",28,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",28,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",28,[[["self"],["m32x8"]],["m32x8"]]],[11,"eq","","",28,[[["self"],["self"]],["bool"]]],[11,"ne","","",28,[[["self"],["self"]],["bool"]]],[11,"default","","",28,[[],["self"]]],[11,"clone","","",29,[[["self"]],["i64x4"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",29,[[["self"],["i64x4"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["i64x4"]],["bool"]]],[11,"le","","",29,[[["self"],["i64x4"]],["bool"]]],[11,"gt","","",29,[[["self"],["i64x4"]],["bool"]]],[11,"ge","","",29,[[["self"],["i64x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",29,[[["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",29,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",29,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",29,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",29,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["i64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",29,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",29,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",29,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",29,N],[11,"eq","","Lane-wise equality comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",29,[[["self"],["i64x4"]],["m64x4"]]],[11,"hash","","",29,[[["self"],["h"]]]],[11,"add","","",29,[[["self"],["self"]],["self"]]],[11,"sub","","",29,[[["self"],["self"]],["self"]]],[11,"mul","","",29,[[["self"],["self"]],["self"]]],[11,"div","","",29,[[["self"],["self"]],["self"]]],[11,"rem","","",29,[[["self"],["self"]],["self"]]],[11,"add_assign","","",29,[[["self"],["self"]]]],[11,"sub_assign","","",29,[[["self"],["self"]]]],[11,"mul_assign","","",29,[[["self"],["self"]]]],[11,"div_assign","","",29,[[["self"],["self"]]]],[11,"rem_assign","","",29,[[["self"],["self"]]]],[11,"add","","",29,[[["self"],["i64"]],["self"]]],[11,"sub","","",29,[[["self"],["i64"]],["self"]]],[11,"mul","","",29,[[["self"],["i64"]],["self"]]],[11,"div","","",29,[[["self"],["i64"]],["self"]]],[11,"rem","","",29,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",29,[[["self"],["i64"]]]],[11,"sub_assign","","",29,[[["self"],["i64"]]]],[11,"mul_assign","","",29,[[["self"],["i64"]]]],[11,"div_assign","","",29,[[["self"],["i64"]]]],[11,"rem_assign","","",29,[[["self"],["i64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",29,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",29,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",29,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",29,[[["self"]],["i64"]]],[11,"neg","","",29,[[["self"]],["self"]]],[11,"not","","",29,[[["self"]],["self"]]],[11,"bitxor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand","","",29,[[["self"],["self"]],["self"]]],[11,"bitor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["self"]]]],[11,"bitor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor","","",29,[[["self"],["i64"]],["self"]]],[11,"bitand","","",29,[[["self"],["i64"]],["self"]]],[11,"bitor","","",29,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["i64"]]]],[11,"bitor_assign","","",29,[[["self"],["i64"]]]],[11,"bitxor_assign","","",29,[[["self"],["i64"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",29,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",29,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",29,[[["self"]],["i64"]]],[11,"shl","","",29,[[["self"],["u8"]],["self"]]],[11,"shr","","",29,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["u8"]]]],[11,"shr_assign","","",29,[[["self"],["u8"]]]],[11,"shl","","",29,[[["self"],["u16"]],["self"]]],[11,"shr","","",29,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["u16"]]]],[11,"shr_assign","","",29,[[["self"],["u16"]]]],[11,"shl","","",29,[[["self"],["u32"]],["self"]]],[11,"shr","","",29,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["u32"]]]],[11,"shr_assign","","",29,[[["self"],["u32"]]]],[11,"shl","","",29,[[["self"],["u64"]],["self"]]],[11,"shr","","",29,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["u64"]]]],[11,"shr_assign","","",29,[[["self"],["u64"]]]],[11,"shl","","",29,[[["self"],["usize"]],["self"]]],[11,"shr","","",29,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["usize"]]]],[11,"shr_assign","","",29,[[["self"],["usize"]]]],[11,"shl","","",29,[[["self"],["i8"]],["self"]]],[11,"shr","","",29,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["i8"]]]],[11,"shr_assign","","",29,[[["self"],["i8"]]]],[11,"shl","","",29,[[["self"],["i16"]],["self"]]],[11,"shr","","",29,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["i16"]]]],[11,"shr_assign","","",29,[[["self"],["i16"]]]],[11,"shl","","",29,[[["self"],["i32"]],["self"]]],[11,"shr","","",29,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["i32"]]]],[11,"shr_assign","","",29,[[["self"],["i32"]]]],[11,"shl","","",29,[[["self"],["i64"]],["self"]]],[11,"shr","","",29,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["i64"]]]],[11,"shr_assign","","",29,[[["self"],["i64"]]]],[11,"shl","","",29,[[["self"],["isize"]],["self"]]],[11,"shr","","",29,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["isize"]]]],[11,"shr_assign","","",29,[[["self"],["isize"]]]],[11,"shl","","",29,[[["self"],["self"]],["self"]]],[11,"shr","","",29,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",29,[[["self"],["self"]]]],[11,"shr_assign","","",29,[[["self"],["self"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["self"]],["bool"]]],[11,"ne","","",29,[[["self"],["self"]],["bool"]]],[11,"default","","",29,[[],["self"]]],[11,"min","","Minimum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",29,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",29,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",29,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",29,[[["self"]],["self"]]],[11,"clone","","",30,[[["self"]],["u64x4"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",30,[[["self"],["u64x4"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["u64x4"]],["bool"]]],[11,"le","","",30,[[["self"],["u64x4"]],["bool"]]],[11,"gt","","",30,[[["self"],["u64x4"]],["bool"]]],[11,"ge","","",30,[[["self"],["u64x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",30,[[["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",30,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",30,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",30,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",30,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["u64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",30,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",30,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"eq","","Lane-wise equality comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",30,[[["self"],["u64x4"]],["m64x4"]]],[11,"hash","","",30,[[["self"],["h"]]]],[11,"add","","",30,[[["self"],["self"]],["self"]]],[11,"sub","","",30,[[["self"],["self"]],["self"]]],[11,"mul","","",30,[[["self"],["self"]],["self"]]],[11,"div","","",30,[[["self"],["self"]],["self"]]],[11,"rem","","",30,[[["self"],["self"]],["self"]]],[11,"add_assign","","",30,[[["self"],["self"]]]],[11,"sub_assign","","",30,[[["self"],["self"]]]],[11,"mul_assign","","",30,[[["self"],["self"]]]],[11,"div_assign","","",30,[[["self"],["self"]]]],[11,"rem_assign","","",30,[[["self"],["self"]]]],[11,"add","","",30,[[["self"],["u64"]],["self"]]],[11,"sub","","",30,[[["self"],["u64"]],["self"]]],[11,"mul","","",30,[[["self"],["u64"]],["self"]]],[11,"div","","",30,[[["self"],["u64"]],["self"]]],[11,"rem","","",30,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",30,[[["self"],["u64"]]]],[11,"sub_assign","","",30,[[["self"],["u64"]]]],[11,"mul_assign","","",30,[[["self"],["u64"]]]],[11,"div_assign","","",30,[[["self"],["u64"]]]],[11,"rem_assign","","",30,[[["self"],["u64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",30,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",30,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",30,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",30,[[["self"]],["u64"]]],[11,"bitxor","","",30,[[["self"],["u64"]],["self"]]],[11,"bitand","","",30,[[["self"],["u64"]],["self"]]],[11,"bitor","","",30,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["u64"]]]],[11,"bitor_assign","","",30,[[["self"],["u64"]]]],[11,"bitxor_assign","","",30,[[["self"],["u64"]]]],[11,"not","","",30,[[["self"]],["self"]]],[11,"bitxor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand","","",30,[[["self"],["self"]],["self"]]],[11,"bitor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["self"]]]],[11,"bitor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor_assign","","",30,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",30,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",30,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",30,[[["self"]],["u64"]]],[11,"shl","","",30,[[["self"],["u8"]],["self"]]],[11,"shr","","",30,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u8"]]]],[11,"shr_assign","","",30,[[["self"],["u8"]]]],[11,"shl","","",30,[[["self"],["u16"]],["self"]]],[11,"shr","","",30,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u16"]]]],[11,"shr_assign","","",30,[[["self"],["u16"]]]],[11,"shl","","",30,[[["self"],["u32"]],["self"]]],[11,"shr","","",30,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u32"]]]],[11,"shr_assign","","",30,[[["self"],["u32"]]]],[11,"shl","","",30,[[["self"],["u64"]],["self"]]],[11,"shr","","",30,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u64"]]]],[11,"shr_assign","","",30,[[["self"],["u64"]]]],[11,"shl","","",30,[[["self"],["usize"]],["self"]]],[11,"shr","","",30,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["usize"]]]],[11,"shr_assign","","",30,[[["self"],["usize"]]]],[11,"shl","","",30,[[["self"],["i8"]],["self"]]],[11,"shr","","",30,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["i8"]]]],[11,"shr_assign","","",30,[[["self"],["i8"]]]],[11,"shl","","",30,[[["self"],["i16"]],["self"]]],[11,"shr","","",30,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["i16"]]]],[11,"shr_assign","","",30,[[["self"],["i16"]]]],[11,"shl","","",30,[[["self"],["i32"]],["self"]]],[11,"shr","","",30,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["i32"]]]],[11,"shr_assign","","",30,[[["self"],["i32"]]]],[11,"shl","","",30,[[["self"],["i64"]],["self"]]],[11,"shr","","",30,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["i64"]]]],[11,"shr_assign","","",30,[[["self"],["i64"]]]],[11,"shl","","",30,[[["self"],["isize"]],["self"]]],[11,"shr","","",30,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["isize"]]]],[11,"shr_assign","","",30,[[["self"],["isize"]]]],[11,"shl","","",30,[[["self"],["self"]],["self"]]],[11,"shr","","",30,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["self"]]]],[11,"shr_assign","","",30,[[["self"],["self"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["self"]],["bool"]]],[11,"ne","","",30,[[["self"],["self"]],["bool"]]],[11,"default","","",30,[[],["self"]]],[11,"min","","Minimum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",30,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["f64x4"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",31,[[["self"],["f64x4"]],["option",["ordering"]]]],[11,"lt","","",31,[[["self"],["f64x4"]],["bool"]]],[11,"le","","",31,[[["self"],["f64x4"]],["bool"]]],[11,"gt","","",31,[[["self"],["f64x4"]],["bool"]]],[11,"ge","","",31,[[["self"],["f64x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",31,[[["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",31,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",31,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",31,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",31,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["f64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",31,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",31,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"eq","","Lane-wise equality comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",31,[[["self"],["f64x4"]],["m64x4"]]],[11,"add","","",31,[[["self"],["self"]],["self"]]],[11,"sub","","",31,[[["self"],["self"]],["self"]]],[11,"mul","","",31,[[["self"],["self"]],["self"]]],[11,"div","","",31,[[["self"],["self"]],["self"]]],[11,"rem","","",31,[[["self"],["self"]],["self"]]],[11,"add_assign","","",31,[[["self"],["self"]]]],[11,"sub_assign","","",31,[[["self"],["self"]]]],[11,"mul_assign","","",31,[[["self"],["self"]]]],[11,"div_assign","","",31,[[["self"],["self"]]]],[11,"rem_assign","","",31,[[["self"],["self"]]]],[11,"add","","",31,[[["self"],["f64"]],["self"]]],[11,"sub","","",31,[[["self"],["f64"]],["self"]]],[11,"mul","","",31,[[["self"],["f64"]],["self"]]],[11,"div","","",31,[[["self"],["f64"]],["self"]]],[11,"rem","","",31,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",31,[[["self"],["f64"]]]],[11,"sub_assign","","",31,[[["self"],["f64"]]]],[11,"mul_assign","","",31,[[["self"],["f64"]]]],[11,"div_assign","","",31,[[["self"],["f64"]]]],[11,"rem_assign","","",31,[[["self"],["f64"]]]],[11,"sum","","Horizontal sum of the vector elements.",31,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",31,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",31,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",31,[[["self"]],["f64"]]],[11,"neg","","",31,[[["self"]],["self"]]],[11,"eq","","",31,[[["self"],["self"]],["bool"]]],[11,"ne","","",31,[[["self"],["self"]],["bool"]]],[11,"default","","",31,[[],["self"]]],[11,"min","","Minimum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",31,[[["self"]],["self"]]],[11,"sqrt","","Square-root",31,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",31,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",31,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",31,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",31,[[["self"]],["self"]]],[11,"cos","","Cos",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["m64x4"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",32,[[["self"],["m64x4"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["m64x4"]],["bool"]]],[11,"le","","",32,[[["self"],["m64x4"]],["bool"]]],[11,"gt","","",32,[[["self"],["m64x4"]],["bool"]]],[11,"ge","","",32,[[["self"],["m64x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",32,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",32,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",32,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",32,[[["self"]],["self"]]],[11,"bitxor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand","","",32,[[["self"],["self"]],["self"]]],[11,"bitor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["self"]]]],[11,"bitor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand","","",32,[[["self"],["bool"]],["self"]]],[11,"bitor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["bool"]]]],[11,"bitor_assign","","",32,[[["self"],["bool"]]]],[11,"bitxor_assign","","",32,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",32,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",32,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",32,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",32,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",32,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",32,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",32,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",32,[[["self"],["m64x4"]],["m64x4"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"ne","","",32,[[["self"],["self"]],["bool"]]],[11,"default","","",32,[[],["self"]]],[11,"from_bits","","",19,[[["u64x4"]],["i8x32"]]],[11,"from_bits","","",19,[[["i64x4"]],["i8x32"]]],[11,"from_bits","","",19,[[["f64x4"]],["i8x32"]]],[11,"from_bits","","",19,[[["m64x4"]],["i8x32"]]],[11,"from_bits","","",19,[[["u32x8"]],["i8x32"]]],[11,"from_bits","","",19,[[["i32x8"]],["i8x32"]]],[11,"from_bits","","",19,[[["f32x8"]],["i8x32"]]],[11,"from_bits","","",19,[[["m32x8"]],["i8x32"]]],[11,"from_bits","","",19,[[["u16x16"]],["i8x32"]]],[11,"from_bits","","",19,[[["i16x16"]],["i8x32"]]],[11,"from_bits","","",19,[[["m16x16"]],["i8x32"]]],[11,"from_bits","","",19,[[["u8x32"]],["i8x32"]]],[11,"from_bits","","",19,[[["m8x32"]],["i8x32"]]],[11,"from_bits","","",20,[[["u64x4"]],["u8x32"]]],[11,"from_bits","","",20,[[["i64x4"]],["u8x32"]]],[11,"from_bits","","",20,[[["f64x4"]],["u8x32"]]],[11,"from_bits","","",20,[[["m64x4"]],["u8x32"]]],[11,"from_bits","","",20,[[["u32x8"]],["u8x32"]]],[11,"from_bits","","",20,[[["i32x8"]],["u8x32"]]],[11,"from_bits","","",20,[[["f32x8"]],["u8x32"]]],[11,"from_bits","","",20,[[["m32x8"]],["u8x32"]]],[11,"from_bits","","",20,[[["u16x16"]],["u8x32"]]],[11,"from_bits","","",20,[[["i16x16"]],["u8x32"]]],[11,"from_bits","","",20,[[["m16x16"]],["u8x32"]]],[11,"from_bits","","",20,[[["i8x32"]],["u8x32"]]],[11,"from_bits","","",20,[[["m8x32"]],["u8x32"]]],[11,"from_bits","","",22,[[["u64x4"]],["i16x16"]]],[11,"from_bits","","",22,[[["i64x4"]],["i16x16"]]],[11,"from_bits","","",22,[[["f64x4"]],["i16x16"]]],[11,"from_bits","","",22,[[["m64x4"]],["i16x16"]]],[11,"from_bits","","",22,[[["u32x8"]],["i16x16"]]],[11,"from_bits","","",22,[[["i32x8"]],["i16x16"]]],[11,"from_bits","","",22,[[["f32x8"]],["i16x16"]]],[11,"from_bits","","",22,[[["m32x8"]],["i16x16"]]],[11,"from_bits","","",22,[[["u16x16"]],["i16x16"]]],[11,"from_bits","","",22,[[["m16x16"]],["i16x16"]]],[11,"from_bits","","",22,[[["u8x32"]],["i16x16"]]],[11,"from_bits","","",22,[[["i8x32"]],["i16x16"]]],[11,"from_bits","","",22,[[["m8x32"]],["i16x16"]]],[11,"from_bits","","",23,[[["u64x4"]],["u16x16"]]],[11,"from_bits","","",23,[[["i64x4"]],["u16x16"]]],[11,"from_bits","","",23,[[["f64x4"]],["u16x16"]]],[11,"from_bits","","",23,[[["m64x4"]],["u16x16"]]],[11,"from_bits","","",23,[[["u32x8"]],["u16x16"]]],[11,"from_bits","","",23,[[["i32x8"]],["u16x16"]]],[11,"from_bits","","",23,[[["f32x8"]],["u16x16"]]],[11,"from_bits","","",23,[[["m32x8"]],["u16x16"]]],[11,"from_bits","","",23,[[["i16x16"]],["u16x16"]]],[11,"from_bits","","",23,[[["m16x16"]],["u16x16"]]],[11,"from_bits","","",23,[[["u8x32"]],["u16x16"]]],[11,"from_bits","","",23,[[["i8x32"]],["u16x16"]]],[11,"from_bits","","",23,[[["m8x32"]],["u16x16"]]],[11,"from_bits","","",25,[[["u64x4"]],["i32x8"]]],[11,"from_bits","","",25,[[["i64x4"]],["i32x8"]]],[11,"from_bits","","",25,[[["f64x4"]],["i32x8"]]],[11,"from_bits","","",25,[[["m64x4"]],["i32x8"]]],[11,"from_bits","","",25,[[["u32x8"]],["i32x8"]]],[11,"from_bits","","",25,[[["f32x8"]],["i32x8"]]],[11,"from_bits","","",25,[[["m32x8"]],["i32x8"]]],[11,"from_bits","","",25,[[["u16x16"]],["i32x8"]]],[11,"from_bits","","",25,[[["i16x16"]],["i32x8"]]],[11,"from_bits","","",25,[[["m16x16"]],["i32x8"]]],[11,"from_bits","","",25,[[["u8x32"]],["i32x8"]]],[11,"from_bits","","",25,[[["i8x32"]],["i32x8"]]],[11,"from_bits","","",25,[[["m8x32"]],["i32x8"]]],[11,"from_bits","","",26,[[["u64x4"]],["u32x8"]]],[11,"from_bits","","",26,[[["i64x4"]],["u32x8"]]],[11,"from_bits","","",26,[[["f64x4"]],["u32x8"]]],[11,"from_bits","","",26,[[["m64x4"]],["u32x8"]]],[11,"from_bits","","",26,[[["i32x8"]],["u32x8"]]],[11,"from_bits","","",26,[[["f32x8"]],["u32x8"]]],[11,"from_bits","","",26,[[["m32x8"]],["u32x8"]]],[11,"from_bits","","",26,[[["u16x16"]],["u32x8"]]],[11,"from_bits","","",26,[[["i16x16"]],["u32x8"]]],[11,"from_bits","","",26,[[["m16x16"]],["u32x8"]]],[11,"from_bits","","",26,[[["u8x32"]],["u32x8"]]],[11,"from_bits","","",26,[[["i8x32"]],["u32x8"]]],[11,"from_bits","","",26,[[["m8x32"]],["u32x8"]]],[11,"from_bits","","",27,[[["u64x4"]],["f32x8"]]],[11,"from_bits","","",27,[[["i64x4"]],["f32x8"]]],[11,"from_bits","","",27,[[["f64x4"]],["f32x8"]]],[11,"from_bits","","",27,[[["m64x4"]],["f32x8"]]],[11,"from_bits","","",27,[[["i32x8"]],["f32x8"]]],[11,"from_bits","","",27,[[["u32x8"]],["f32x8"]]],[11,"from_bits","","",27,[[["m32x8"]],["f32x8"]]],[11,"from_bits","","",27,[[["u16x16"]],["f32x8"]]],[11,"from_bits","","",27,[[["i16x16"]],["f32x8"]]],[11,"from_bits","","",27,[[["m16x16"]],["f32x8"]]],[11,"from_bits","","",27,[[["u8x32"]],["f32x8"]]],[11,"from_bits","","",27,[[["i8x32"]],["f32x8"]]],[11,"from_bits","","",27,[[["m8x32"]],["f32x8"]]],[11,"from_bits","","",29,[[["u64x4"]],["i64x4"]]],[11,"from_bits","","",29,[[["f64x4"]],["i64x4"]]],[11,"from_bits","","",29,[[["m64x4"]],["i64x4"]]],[11,"from_bits","","",29,[[["i32x8"]],["i64x4"]]],[11,"from_bits","","",29,[[["u32x8"]],["i64x4"]]],[11,"from_bits","","",29,[[["f32x8"]],["i64x4"]]],[11,"from_bits","","",29,[[["m32x8"]],["i64x4"]]],[11,"from_bits","","",29,[[["u16x16"]],["i64x4"]]],[11,"from_bits","","",29,[[["i16x16"]],["i64x4"]]],[11,"from_bits","","",29,[[["m16x16"]],["i64x4"]]],[11,"from_bits","","",29,[[["u8x32"]],["i64x4"]]],[11,"from_bits","","",29,[[["i8x32"]],["i64x4"]]],[11,"from_bits","","",29,[[["m8x32"]],["i64x4"]]],[11,"from_bits","","",30,[[["i64x4"]],["u64x4"]]],[11,"from_bits","","",30,[[["f64x4"]],["u64x4"]]],[11,"from_bits","","",30,[[["m64x4"]],["u64x4"]]],[11,"from_bits","","",30,[[["i32x8"]],["u64x4"]]],[11,"from_bits","","",30,[[["u32x8"]],["u64x4"]]],[11,"from_bits","","",30,[[["f32x8"]],["u64x4"]]],[11,"from_bits","","",30,[[["m32x8"]],["u64x4"]]],[11,"from_bits","","",30,[[["u16x16"]],["u64x4"]]],[11,"from_bits","","",30,[[["i16x16"]],["u64x4"]]],[11,"from_bits","","",30,[[["m16x16"]],["u64x4"]]],[11,"from_bits","","",30,[[["u8x32"]],["u64x4"]]],[11,"from_bits","","",30,[[["i8x32"]],["u64x4"]]],[11,"from_bits","","",30,[[["m8x32"]],["u64x4"]]],[11,"from_bits","","",31,[[["i64x4"]],["f64x4"]]],[11,"from_bits","","",31,[[["u64x4"]],["f64x4"]]],[11,"from_bits","","",31,[[["m64x4"]],["f64x4"]]],[11,"from_bits","","",31,[[["i32x8"]],["f64x4"]]],[11,"from_bits","","",31,[[["u32x8"]],["f64x4"]]],[11,"from_bits","","",31,[[["f32x8"]],["f64x4"]]],[11,"from_bits","","",31,[[["m32x8"]],["f64x4"]]],[11,"from_bits","","",31,[[["u16x16"]],["f64x4"]]],[11,"from_bits","","",31,[[["i16x16"]],["f64x4"]]],[11,"from_bits","","",31,[[["m16x16"]],["f64x4"]]],[11,"from_bits","","",31,[[["u8x32"]],["f64x4"]]],[11,"from_bits","","",31,[[["i8x32"]],["f64x4"]]],[11,"from_bits","","",31,[[["m8x32"]],["f64x4"]]],[11,"from","","",31,[[["u64x4"]],["f64x4"]]],[11,"from","","",31,[[["i64x4"]],["f64x4"]]],[11,"from","","",31,[[["m64x4"]],["f64x4"]]],[11,"from","","",31,[[["u32x4"]],["f64x4"]]],[11,"from","","",31,[[["i32x4"]],["f64x4"]]],[11,"from","","",31,[[["f32x4"]],["f64x4"]]],[11,"from","","",31,[[["m32x4"]],["f64x4"]]],[11,"from","","",31,[[["u16x4"]],["f64x4"]]],[11,"from","","",31,[[["i16x4"]],["f64x4"]]],[11,"from","","",31,[[["m16x4"]],["f64x4"]]],[11,"from","","",31,[[["u8x4"]],["f64x4"]]],[11,"from","","",31,[[["i8x4"]],["f64x4"]]],[11,"from","","",31,[[["m8x4"]],["f64x4"]]],[11,"from","","",29,[[["u64x4"]],["i64x4"]]],[11,"from","","",29,[[["f64x4"]],["i64x4"]]],[11,"from","","",29,[[["m64x4"]],["i64x4"]]],[11,"from","","",29,[[["u32x4"]],["i64x4"]]],[11,"from","","",29,[[["i32x4"]],["i64x4"]]],[11,"from","","",29,[[["f32x4"]],["i64x4"]]],[11,"from","","",29,[[["m32x4"]],["i64x4"]]],[11,"from","","",29,[[["u16x4"]],["i64x4"]]],[11,"from","","",29,[[["i16x4"]],["i64x4"]]],[11,"from","","",29,[[["m16x4"]],["i64x4"]]],[11,"from","","",29,[[["u8x4"]],["i64x4"]]],[11,"from","","",29,[[["i8x4"]],["i64x4"]]],[11,"from","","",29,[[["m8x4"]],["i64x4"]]],[11,"from","","",30,[[["i64x4"]],["u64x4"]]],[11,"from","","",30,[[["f64x4"]],["u64x4"]]],[11,"from","","",30,[[["m64x4"]],["u64x4"]]],[11,"from","","",30,[[["u32x4"]],["u64x4"]]],[11,"from","","",30,[[["i32x4"]],["u64x4"]]],[11,"from","","",30,[[["f32x4"]],["u64x4"]]],[11,"from","","",30,[[["m32x4"]],["u64x4"]]],[11,"from","","",30,[[["u16x4"]],["u64x4"]]],[11,"from","","",30,[[["i16x4"]],["u64x4"]]],[11,"from","","",30,[[["m16x4"]],["u64x4"]]],[11,"from","","",30,[[["u8x4"]],["u64x4"]]],[11,"from","","",30,[[["i8x4"]],["u64x4"]]],[11,"from","","",30,[[["m8x4"]],["u64x4"]]],[11,"from","","",27,[[["u64x8"]],["f32x8"]]],[11,"from","","",27,[[["i64x8"]],["f32x8"]]],[11,"from","","",27,[[["f64x8"]],["f32x8"]]],[11,"from","","",27,[[["m1x8"]],["f32x8"]]],[11,"from","","",27,[[["u32x8"]],["f32x8"]]],[11,"from","","",27,[[["i32x8"]],["f32x8"]]],[11,"from","","",27,[[["m32x8"]],["f32x8"]]],[11,"from","","",27,[[["u16x8"]],["f32x8"]]],[11,"from","","",27,[[["i16x8"]],["f32x8"]]],[11,"from","","",27,[[["m16x8"]],["f32x8"]]],[11,"from","","",27,[[["u8x8"]],["f32x8"]]],[11,"from","","",27,[[["i8x8"]],["f32x8"]]],[11,"from","","",27,[[["m8x8"]],["f32x8"]]],[11,"from","","",25,[[["u64x8"]],["i32x8"]]],[11,"from","","",25,[[["i64x8"]],["i32x8"]]],[11,"from","","",25,[[["f64x8"]],["i32x8"]]],[11,"from","","",25,[[["m1x8"]],["i32x8"]]],[11,"from","","",25,[[["u32x8"]],["i32x8"]]],[11,"from","","",25,[[["f32x8"]],["i32x8"]]],[11,"from","","",25,[[["m32x8"]],["i32x8"]]],[11,"from","","",25,[[["u16x8"]],["i32x8"]]],[11,"from","","",25,[[["i16x8"]],["i32x8"]]],[11,"from","","",25,[[["m16x8"]],["i32x8"]]],[11,"from","","",25,[[["u8x8"]],["i32x8"]]],[11,"from","","",25,[[["i8x8"]],["i32x8"]]],[11,"from","","",25,[[["m8x8"]],["i32x8"]]],[11,"from","","",26,[[["u64x8"]],["u32x8"]]],[11,"from","","",26,[[["i64x8"]],["u32x8"]]],[11,"from","","",26,[[["f64x8"]],["u32x8"]]],[11,"from","","",26,[[["m1x8"]],["u32x8"]]],[11,"from","","",26,[[["i32x8"]],["u32x8"]]],[11,"from","","",26,[[["f32x8"]],["u32x8"]]],[11,"from","","",26,[[["m32x8"]],["u32x8"]]],[11,"from","","",26,[[["u16x8"]],["u32x8"]]],[11,"from","","",26,[[["i16x8"]],["u32x8"]]],[11,"from","","",26,[[["m16x8"]],["u32x8"]]],[11,"from","","",26,[[["u8x8"]],["u32x8"]]],[11,"from","","",26,[[["i8x8"]],["u32x8"]]],[11,"from","","",26,[[["m8x8"]],["u32x8"]]],[11,"from","","",22,[[["u32x16"]],["i16x16"]]],[11,"from","","",22,[[["i32x16"]],["i16x16"]]],[11,"from","","",22,[[["f32x16"]],["i16x16"]]],[11,"from","","",22,[[["m1x16"]],["i16x16"]]],[11,"from","","",22,[[["u16x16"]],["i16x16"]]],[11,"from","","",22,[[["m16x16"]],["i16x16"]]],[11,"from","","",22,[[["u8x16"]],["i16x16"]]],[11,"from","","",22,[[["i8x16"]],["i16x16"]]],[11,"from","","",22,[[["m8x16"]],["i16x16"]]],[11,"from","","",23,[[["u32x16"]],["u16x16"]]],[11,"from","","",23,[[["i32x16"]],["u16x16"]]],[11,"from","","",23,[[["f32x16"]],["u16x16"]]],[11,"from","","",23,[[["m1x16"]],["u16x16"]]],[11,"from","","",23,[[["i16x16"]],["u16x16"]]],[11,"from","","",23,[[["m16x16"]],["u16x16"]]],[11,"from","","",23,[[["u8x16"]],["u16x16"]]],[11,"from","","",23,[[["i8x16"]],["u16x16"]]],[11,"from","","",23,[[["m8x16"]],["u16x16"]]],[11,"from","","",19,[[["u16x32"]],["i8x32"]]],[11,"from","","",19,[[["i16x32"]],["i8x32"]]],[11,"from","","",19,[[["u8x32"]],["i8x32"]]],[11,"from","","",19,[[["m8x32"]],["i8x32"]]],[11,"from","","",20,[[["u16x32"]],["u8x32"]]],[11,"from","","",20,[[["i16x32"]],["u8x32"]]],[11,"from","","",20,[[["i8x32"]],["u8x32"]]],[11,"from","","",20,[[["m8x32"]],["u8x32"]]],[11,"from","","",21,[[["m1x32"]],["m8x32"]]],[11,"from","","",24,[[["m1x16"]],["m16x16"]]],[11,"from","","",24,[[["m8x16"]],["m16x16"]]],[11,"from","","",28,[[["m1x8"]],["m32x8"]]],[11,"from","","",28,[[["m16x8"]],["m32x8"]]],[11,"from","","",28,[[["m8x8"]],["m32x8"]]],[11,"from","","",32,[[["m32x4"]],["m64x4"]]],[11,"from","","",32,[[["m16x4"]],["m64x4"]]],[11,"from","","",32,[[["m8x4"]],["m64x4"]]],[11,"clone","","",33,[[["self"]],["i16x2"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",33,[[["self"],["i16x2"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["i16x2"]],["bool"]]],[11,"le","","",33,[[["self"],["i16x2"]],["bool"]]],[11,"gt","","",33,[[["self"],["i16x2"]],["bool"]]],[11,"ge","","",33,[[["self"],["i16x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",33,[[["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",33,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",33,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",33,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",33,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"eq","","Lane-wise equality comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",33,[[["self"],["i16x2"]],["m16x2"]]],[11,"hash","","",33,[[["self"],["h"]]]],[11,"add","","",33,[[["self"],["self"]],["self"]]],[11,"sub","","",33,[[["self"],["self"]],["self"]]],[11,"mul","","",33,[[["self"],["self"]],["self"]]],[11,"div","","",33,[[["self"],["self"]],["self"]]],[11,"rem","","",33,[[["self"],["self"]],["self"]]],[11,"add_assign","","",33,[[["self"],["self"]]]],[11,"sub_assign","","",33,[[["self"],["self"]]]],[11,"mul_assign","","",33,[[["self"],["self"]]]],[11,"div_assign","","",33,[[["self"],["self"]]]],[11,"rem_assign","","",33,[[["self"],["self"]]]],[11,"add","","",33,[[["self"],["i16"]],["self"]]],[11,"sub","","",33,[[["self"],["i16"]],["self"]]],[11,"mul","","",33,[[["self"],["i16"]],["self"]]],[11,"div","","",33,[[["self"],["i16"]],["self"]]],[11,"rem","","",33,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",33,[[["self"],["i16"]]]],[11,"sub_assign","","",33,[[["self"],["i16"]]]],[11,"mul_assign","","",33,[[["self"],["i16"]]]],[11,"div_assign","","",33,[[["self"],["i16"]]]],[11,"rem_assign","","",33,[[["self"],["i16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",33,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",33,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",33,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",33,[[["self"]],["i16"]]],[11,"neg","","",33,[[["self"]],["self"]]],[11,"not","","",33,[[["self"]],["self"]]],[11,"bitxor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand","","",33,[[["self"],["self"]],["self"]]],[11,"bitor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["self"]]]],[11,"bitor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor","","",33,[[["self"],["i16"]],["self"]]],[11,"bitand","","",33,[[["self"],["i16"]],["self"]]],[11,"bitor","","",33,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["i16"]]]],[11,"bitor_assign","","",33,[[["self"],["i16"]]]],[11,"bitxor_assign","","",33,[[["self"],["i16"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",33,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",33,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",33,[[["self"]],["i16"]]],[11,"shl","","",33,[[["self"],["u8"]],["self"]]],[11,"shr","","",33,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u8"]]]],[11,"shr_assign","","",33,[[["self"],["u8"]]]],[11,"shl","","",33,[[["self"],["u16"]],["self"]]],[11,"shr","","",33,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u16"]]]],[11,"shr_assign","","",33,[[["self"],["u16"]]]],[11,"shl","","",33,[[["self"],["u32"]],["self"]]],[11,"shr","","",33,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u32"]]]],[11,"shr_assign","","",33,[[["self"],["u32"]]]],[11,"shl","","",33,[[["self"],["u64"]],["self"]]],[11,"shr","","",33,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u64"]]]],[11,"shr_assign","","",33,[[["self"],["u64"]]]],[11,"shl","","",33,[[["self"],["usize"]],["self"]]],[11,"shr","","",33,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["usize"]]]],[11,"shr_assign","","",33,[[["self"],["usize"]]]],[11,"shl","","",33,[[["self"],["i8"]],["self"]]],[11,"shr","","",33,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["i8"]]]],[11,"shr_assign","","",33,[[["self"],["i8"]]]],[11,"shl","","",33,[[["self"],["i16"]],["self"]]],[11,"shr","","",33,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["i16"]]]],[11,"shr_assign","","",33,[[["self"],["i16"]]]],[11,"shl","","",33,[[["self"],["i32"]],["self"]]],[11,"shr","","",33,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["i32"]]]],[11,"shr_assign","","",33,[[["self"],["i32"]]]],[11,"shl","","",33,[[["self"],["i64"]],["self"]]],[11,"shr","","",33,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["i64"]]]],[11,"shr_assign","","",33,[[["self"],["i64"]]]],[11,"shl","","",33,[[["self"],["isize"]],["self"]]],[11,"shr","","",33,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["isize"]]]],[11,"shr_assign","","",33,[[["self"],["isize"]]]],[11,"shl","","",33,[[["self"],["self"]],["self"]]],[11,"shr","","",33,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["self"]]]],[11,"shr_assign","","",33,[[["self"],["self"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"ne","","",33,[[["self"],["self"]],["bool"]]],[11,"default","","",33,[[],["self"]]],[11,"min","","Minimum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",33,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["u16x2"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",34,[[["self"],["u16x2"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["u16x2"]],["bool"]]],[11,"le","","",34,[[["self"],["u16x2"]],["bool"]]],[11,"gt","","",34,[[["self"],["u16x2"]],["bool"]]],[11,"ge","","",34,[[["self"],["u16x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",34,[[["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",34,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",34,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",34,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",34,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"eq","","Lane-wise equality comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",34,[[["self"],["u16x2"]],["m16x2"]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"add","","",34,[[["self"],["self"]],["self"]]],[11,"sub","","",34,[[["self"],["self"]],["self"]]],[11,"mul","","",34,[[["self"],["self"]],["self"]]],[11,"div","","",34,[[["self"],["self"]],["self"]]],[11,"rem","","",34,[[["self"],["self"]],["self"]]],[11,"add_assign","","",34,[[["self"],["self"]]]],[11,"sub_assign","","",34,[[["self"],["self"]]]],[11,"mul_assign","","",34,[[["self"],["self"]]]],[11,"div_assign","","",34,[[["self"],["self"]]]],[11,"rem_assign","","",34,[[["self"],["self"]]]],[11,"add","","",34,[[["self"],["u16"]],["self"]]],[11,"sub","","",34,[[["self"],["u16"]],["self"]]],[11,"mul","","",34,[[["self"],["u16"]],["self"]]],[11,"div","","",34,[[["self"],["u16"]],["self"]]],[11,"rem","","",34,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",34,[[["self"],["u16"]]]],[11,"sub_assign","","",34,[[["self"],["u16"]]]],[11,"mul_assign","","",34,[[["self"],["u16"]]]],[11,"div_assign","","",34,[[["self"],["u16"]]]],[11,"rem_assign","","",34,[[["self"],["u16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",34,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",34,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",34,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",34,[[["self"]],["u16"]]],[11,"bitxor","","",34,[[["self"],["u16"]],["self"]]],[11,"bitand","","",34,[[["self"],["u16"]],["self"]]],[11,"bitor","","",34,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["u16"]]]],[11,"bitor_assign","","",34,[[["self"],["u16"]]]],[11,"bitxor_assign","","",34,[[["self"],["u16"]]]],[11,"not","","",34,[[["self"]],["self"]]],[11,"bitxor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand","","",34,[[["self"],["self"]],["self"]]],[11,"bitor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["self"]]]],[11,"bitor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor_assign","","",34,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",34,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",34,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",34,[[["self"]],["u16"]]],[11,"shl","","",34,[[["self"],["u8"]],["self"]]],[11,"shr","","",34,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u8"]]]],[11,"shr_assign","","",34,[[["self"],["u8"]]]],[11,"shl","","",34,[[["self"],["u16"]],["self"]]],[11,"shr","","",34,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u16"]]]],[11,"shr_assign","","",34,[[["self"],["u16"]]]],[11,"shl","","",34,[[["self"],["u32"]],["self"]]],[11,"shr","","",34,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u32"]]]],[11,"shr_assign","","",34,[[["self"],["u32"]]]],[11,"shl","","",34,[[["self"],["u64"]],["self"]]],[11,"shr","","",34,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u64"]]]],[11,"shr_assign","","",34,[[["self"],["u64"]]]],[11,"shl","","",34,[[["self"],["usize"]],["self"]]],[11,"shr","","",34,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["usize"]]]],[11,"shr_assign","","",34,[[["self"],["usize"]]]],[11,"shl","","",34,[[["self"],["i8"]],["self"]]],[11,"shr","","",34,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["i8"]]]],[11,"shr_assign","","",34,[[["self"],["i8"]]]],[11,"shl","","",34,[[["self"],["i16"]],["self"]]],[11,"shr","","",34,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["i16"]]]],[11,"shr_assign","","",34,[[["self"],["i16"]]]],[11,"shl","","",34,[[["self"],["i32"]],["self"]]],[11,"shr","","",34,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["i32"]]]],[11,"shr_assign","","",34,[[["self"],["i32"]]]],[11,"shl","","",34,[[["self"],["i64"]],["self"]]],[11,"shr","","",34,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["i64"]]]],[11,"shr_assign","","",34,[[["self"],["i64"]]]],[11,"shl","","",34,[[["self"],["isize"]],["self"]]],[11,"shr","","",34,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["isize"]]]],[11,"shr_assign","","",34,[[["self"],["isize"]]]],[11,"shl","","",34,[[["self"],["self"]],["self"]]],[11,"shr","","",34,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["self"]]]],[11,"shr_assign","","",34,[[["self"],["self"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"ne","","",34,[[["self"],["self"]],["bool"]]],[11,"default","","",34,[[],["self"]]],[11,"min","","Minimum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",34,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["m16x2"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",35,[[["self"],["m16x2"]],["option",["ordering"]]]],[11,"lt","","",35,[[["self"],["m16x2"]],["bool"]]],[11,"le","","",35,[[["self"],["m16x2"]],["bool"]]],[11,"gt","","",35,[[["self"],["m16x2"]],["bool"]]],[11,"ge","","",35,[[["self"],["m16x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",35,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",35,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",35,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",35,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",35,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",35,[[["self"]],["self"]]],[11,"bitxor","","",35,[[["self"],["self"]],["self"]]],[11,"bitand","","",35,[[["self"],["self"]],["self"]]],[11,"bitor","","",35,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",35,[[["self"],["self"]]]],[11,"bitor_assign","","",35,[[["self"],["self"]]]],[11,"bitxor_assign","","",35,[[["self"],["self"]]]],[11,"bitxor","","",35,[[["self"],["bool"]],["self"]]],[11,"bitand","","",35,[[["self"],["bool"]],["self"]]],[11,"bitor","","",35,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",35,[[["self"],["bool"]]]],[11,"bitor_assign","","",35,[[["self"],["bool"]]]],[11,"bitxor_assign","","",35,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",35,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",35,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",35,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",35,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",35,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",35,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",35,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",35,[[["self"],["m16x2"]],["m16x2"]]],[11,"eq","","",35,[[["self"],["self"]],["bool"]]],[11,"ne","","",35,[[["self"],["self"]],["bool"]]],[11,"default","","",35,[[],["self"]]],[11,"clone","","",36,[[["self"]],["i8x4"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",36,[[["self"],["i8x4"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["i8x4"]],["bool"]]],[11,"le","","",36,[[["self"],["i8x4"]],["bool"]]],[11,"gt","","",36,[[["self"],["i8x4"]],["bool"]]],[11,"ge","","",36,[[["self"],["i8x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",36,[[["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",36,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",36,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",36,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",36,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",36,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",36,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",36,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",36,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"eq","","Lane-wise equality comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",36,[[["self"],["i8x4"]],["m8x4"]]],[11,"hash","","",36,[[["self"],["h"]]]],[11,"add","","",36,[[["self"],["self"]],["self"]]],[11,"sub","","",36,[[["self"],["self"]],["self"]]],[11,"mul","","",36,[[["self"],["self"]],["self"]]],[11,"div","","",36,[[["self"],["self"]],["self"]]],[11,"rem","","",36,[[["self"],["self"]],["self"]]],[11,"add_assign","","",36,[[["self"],["self"]]]],[11,"sub_assign","","",36,[[["self"],["self"]]]],[11,"mul_assign","","",36,[[["self"],["self"]]]],[11,"div_assign","","",36,[[["self"],["self"]]]],[11,"rem_assign","","",36,[[["self"],["self"]]]],[11,"add","","",36,[[["self"],["i8"]],["self"]]],[11,"sub","","",36,[[["self"],["i8"]],["self"]]],[11,"mul","","",36,[[["self"],["i8"]],["self"]]],[11,"div","","",36,[[["self"],["i8"]],["self"]]],[11,"rem","","",36,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",36,[[["self"],["i8"]]]],[11,"sub_assign","","",36,[[["self"],["i8"]]]],[11,"mul_assign","","",36,[[["self"],["i8"]]]],[11,"div_assign","","",36,[[["self"],["i8"]]]],[11,"rem_assign","","",36,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",36,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",36,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",36,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",36,[[["self"]],["i8"]]],[11,"neg","","",36,[[["self"]],["self"]]],[11,"not","","",36,[[["self"]],["self"]]],[11,"bitxor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand","","",36,[[["self"],["self"]],["self"]]],[11,"bitor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["self"]]]],[11,"bitor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor","","",36,[[["self"],["i8"]],["self"]]],[11,"bitand","","",36,[[["self"],["i8"]],["self"]]],[11,"bitor","","",36,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["i8"]]]],[11,"bitor_assign","","",36,[[["self"],["i8"]]]],[11,"bitxor_assign","","",36,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",36,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",36,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",36,[[["self"]],["i8"]]],[11,"shl","","",36,[[["self"],["u8"]],["self"]]],[11,"shr","","",36,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["u8"]]]],[11,"shr_assign","","",36,[[["self"],["u8"]]]],[11,"shl","","",36,[[["self"],["u16"]],["self"]]],[11,"shr","","",36,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["u16"]]]],[11,"shr_assign","","",36,[[["self"],["u16"]]]],[11,"shl","","",36,[[["self"],["u32"]],["self"]]],[11,"shr","","",36,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["u32"]]]],[11,"shr_assign","","",36,[[["self"],["u32"]]]],[11,"shl","","",36,[[["self"],["u64"]],["self"]]],[11,"shr","","",36,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["u64"]]]],[11,"shr_assign","","",36,[[["self"],["u64"]]]],[11,"shl","","",36,[[["self"],["usize"]],["self"]]],[11,"shr","","",36,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["usize"]]]],[11,"shr_assign","","",36,[[["self"],["usize"]]]],[11,"shl","","",36,[[["self"],["i8"]],["self"]]],[11,"shr","","",36,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["i8"]]]],[11,"shr_assign","","",36,[[["self"],["i8"]]]],[11,"shl","","",36,[[["self"],["i16"]],["self"]]],[11,"shr","","",36,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["i16"]]]],[11,"shr_assign","","",36,[[["self"],["i16"]]]],[11,"shl","","",36,[[["self"],["i32"]],["self"]]],[11,"shr","","",36,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["i32"]]]],[11,"shr_assign","","",36,[[["self"],["i32"]]]],[11,"shl","","",36,[[["self"],["i64"]],["self"]]],[11,"shr","","",36,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["i64"]]]],[11,"shr_assign","","",36,[[["self"],["i64"]]]],[11,"shl","","",36,[[["self"],["isize"]],["self"]]],[11,"shr","","",36,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["isize"]]]],[11,"shr_assign","","",36,[[["self"],["isize"]]]],[11,"shl","","",36,[[["self"],["self"]],["self"]]],[11,"shr","","",36,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",36,[[["self"],["self"]]]],[11,"shr_assign","","",36,[[["self"],["self"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["self"]],["bool"]]],[11,"ne","","",36,[[["self"],["self"]],["bool"]]],[11,"default","","",36,[[],["self"]]],[11,"min","","Minimum of two vectors.",36,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",36,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",36,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",36,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["u8x4"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",37,[[["self"],["u8x4"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["u8x4"]],["bool"]]],[11,"le","","",37,[[["self"],["u8x4"]],["bool"]]],[11,"gt","","",37,[[["self"],["u8x4"]],["bool"]]],[11,"ge","","",37,[[["self"],["u8x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",37,[[["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",37,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",37,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",37,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",37,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",37,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",37,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"eq","","Lane-wise equality comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",37,[[["self"],["u8x4"]],["m8x4"]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"add","","",37,[[["self"],["self"]],["self"]]],[11,"sub","","",37,[[["self"],["self"]],["self"]]],[11,"mul","","",37,[[["self"],["self"]],["self"]]],[11,"div","","",37,[[["self"],["self"]],["self"]]],[11,"rem","","",37,[[["self"],["self"]],["self"]]],[11,"add_assign","","",37,[[["self"],["self"]]]],[11,"sub_assign","","",37,[[["self"],["self"]]]],[11,"mul_assign","","",37,[[["self"],["self"]]]],[11,"div_assign","","",37,[[["self"],["self"]]]],[11,"rem_assign","","",37,[[["self"],["self"]]]],[11,"add","","",37,[[["self"],["u8"]],["self"]]],[11,"sub","","",37,[[["self"],["u8"]],["self"]]],[11,"mul","","",37,[[["self"],["u8"]],["self"]]],[11,"div","","",37,[[["self"],["u8"]],["self"]]],[11,"rem","","",37,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",37,[[["self"],["u8"]]]],[11,"sub_assign","","",37,[[["self"],["u8"]]]],[11,"mul_assign","","",37,[[["self"],["u8"]]]],[11,"div_assign","","",37,[[["self"],["u8"]]]],[11,"rem_assign","","",37,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",37,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",37,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",37,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",37,[[["self"]],["u8"]]],[11,"bitxor","","",37,[[["self"],["u8"]],["self"]]],[11,"bitand","","",37,[[["self"],["u8"]],["self"]]],[11,"bitor","","",37,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["u8"]]]],[11,"bitor_assign","","",37,[[["self"],["u8"]]]],[11,"bitxor_assign","","",37,[[["self"],["u8"]]]],[11,"not","","",37,[[["self"]],["self"]]],[11,"bitxor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand","","",37,[[["self"],["self"]],["self"]]],[11,"bitor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["self"]]]],[11,"bitor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor_assign","","",37,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",37,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",37,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",37,[[["self"]],["u8"]]],[11,"shl","","",37,[[["self"],["u8"]],["self"]]],[11,"shr","","",37,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u8"]]]],[11,"shr_assign","","",37,[[["self"],["u8"]]]],[11,"shl","","",37,[[["self"],["u16"]],["self"]]],[11,"shr","","",37,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u16"]]]],[11,"shr_assign","","",37,[[["self"],["u16"]]]],[11,"shl","","",37,[[["self"],["u32"]],["self"]]],[11,"shr","","",37,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u32"]]]],[11,"shr_assign","","",37,[[["self"],["u32"]]]],[11,"shl","","",37,[[["self"],["u64"]],["self"]]],[11,"shr","","",37,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u64"]]]],[11,"shr_assign","","",37,[[["self"],["u64"]]]],[11,"shl","","",37,[[["self"],["usize"]],["self"]]],[11,"shr","","",37,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["usize"]]]],[11,"shr_assign","","",37,[[["self"],["usize"]]]],[11,"shl","","",37,[[["self"],["i8"]],["self"]]],[11,"shr","","",37,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["i8"]]]],[11,"shr_assign","","",37,[[["self"],["i8"]]]],[11,"shl","","",37,[[["self"],["i16"]],["self"]]],[11,"shr","","",37,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["i16"]]]],[11,"shr_assign","","",37,[[["self"],["i16"]]]],[11,"shl","","",37,[[["self"],["i32"]],["self"]]],[11,"shr","","",37,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["i32"]]]],[11,"shr_assign","","",37,[[["self"],["i32"]]]],[11,"shl","","",37,[[["self"],["i64"]],["self"]]],[11,"shr","","",37,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["i64"]]]],[11,"shr_assign","","",37,[[["self"],["i64"]]]],[11,"shl","","",37,[[["self"],["isize"]],["self"]]],[11,"shr","","",37,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["isize"]]]],[11,"shr_assign","","",37,[[["self"],["isize"]]]],[11,"shl","","",37,[[["self"],["self"]],["self"]]],[11,"shr","","",37,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["self"]]]],[11,"shr_assign","","",37,[[["self"],["self"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["self"]],["bool"]]],[11,"ne","","",37,[[["self"],["self"]],["bool"]]],[11,"default","","",37,[[],["self"]]],[11,"min","","Minimum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",37,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["m8x4"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",38,[[["self"],["m8x4"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["m8x4"]],["bool"]]],[11,"le","","",38,[[["self"],["m8x4"]],["bool"]]],[11,"gt","","",38,[[["self"],["m8x4"]],["bool"]]],[11,"ge","","",38,[[["self"],["m8x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",38,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",38,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",38,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",38,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",38,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",38,[[["self"]],["self"]]],[11,"bitxor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand","","",38,[[["self"],["self"]],["self"]]],[11,"bitor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["self"]]]],[11,"bitor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor","","",38,[[["self"],["bool"]],["self"]]],[11,"bitand","","",38,[[["self"],["bool"]],["self"]]],[11,"bitor","","",38,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["bool"]]]],[11,"bitor_assign","","",38,[[["self"],["bool"]]]],[11,"bitxor_assign","","",38,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",38,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",38,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",38,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",38,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",38,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",38,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",38,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",38,[[["self"],["m8x4"]],["m8x4"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"ne","","",38,[[["self"],["self"]],["bool"]]],[11,"default","","",38,[[],["self"]]],[11,"from_bits","","",33,[[["u16x2"]],["i16x2"]]],[11,"from_bits","","",33,[[["m16x2"]],["i16x2"]]],[11,"from_bits","","",33,[[["i8x4"]],["i16x2"]]],[11,"from_bits","","",33,[[["u8x4"]],["i16x2"]]],[11,"from_bits","","",33,[[["m8x4"]],["i16x2"]]],[11,"from_bits","","",34,[[["i16x2"]],["u16x2"]]],[11,"from_bits","","",34,[[["m16x2"]],["u16x2"]]],[11,"from_bits","","",34,[[["i8x4"]],["u16x2"]]],[11,"from_bits","","",34,[[["u8x4"]],["u16x2"]]],[11,"from_bits","","",34,[[["m8x4"]],["u16x2"]]],[11,"from_bits","","",36,[[["i16x2"]],["i8x4"]]],[11,"from_bits","","",36,[[["u16x2"]],["i8x4"]]],[11,"from_bits","","",36,[[["m16x2"]],["i8x4"]]],[11,"from_bits","","",36,[[["u8x4"]],["i8x4"]]],[11,"from_bits","","",36,[[["m8x4"]],["i8x4"]]],[11,"from_bits","","",37,[[["i16x2"]],["u8x4"]]],[11,"from_bits","","",37,[[["u16x2"]],["u8x4"]]],[11,"from_bits","","",37,[[["m16x2"]],["u8x4"]]],[11,"from_bits","","",37,[[["i8x4"]],["u8x4"]]],[11,"from_bits","","",37,[[["m8x4"]],["u8x4"]]],[11,"from","","",33,[[["f64x2"]],["i16x2"]]],[11,"from","","",33,[[["u64x2"]],["i16x2"]]],[11,"from","","",33,[[["i64x2"]],["i16x2"]]],[11,"from","","",33,[[["m64x2"]],["i16x2"]]],[11,"from","","",33,[[["f32x2"]],["i16x2"]]],[11,"from","","",33,[[["u32x2"]],["i16x2"]]],[11,"from","","",33,[[["i32x2"]],["i16x2"]]],[11,"from","","",33,[[["m32x2"]],["i16x2"]]],[11,"from","","",33,[[["u16x2"]],["i16x2"]]],[11,"from","","",33,[[["m16x2"]],["i16x2"]]],[11,"from","","",33,[[["u8x2"]],["i16x2"]]],[11,"from","","",33,[[["i8x2"]],["i16x2"]]],[11,"from","","",33,[[["m8x2"]],["i16x2"]]],[11,"from","","",34,[[["f64x2"]],["u16x2"]]],[11,"from","","",34,[[["u64x2"]],["u16x2"]]],[11,"from","","",34,[[["i64x2"]],["u16x2"]]],[11,"from","","",34,[[["m64x2"]],["u16x2"]]],[11,"from","","",34,[[["f32x2"]],["u16x2"]]],[11,"from","","",34,[[["u32x2"]],["u16x2"]]],[11,"from","","",34,[[["i32x2"]],["u16x2"]]],[11,"from","","",34,[[["m32x2"]],["u16x2"]]],[11,"from","","",34,[[["i16x2"]],["u16x2"]]],[11,"from","","",34,[[["m16x2"]],["u16x2"]]],[11,"from","","",34,[[["u8x2"]],["u16x2"]]],[11,"from","","",34,[[["i8x2"]],["u16x2"]]],[11,"from","","",34,[[["m8x2"]],["u16x2"]]],[11,"from","","",36,[[["f64x4"]],["i8x4"]]],[11,"from","","",36,[[["u64x4"]],["i8x4"]]],[11,"from","","",36,[[["i64x4"]],["i8x4"]]],[11,"from","","",36,[[["m64x4"]],["i8x4"]]],[11,"from","","",36,[[["u32x4"]],["i8x4"]]],[11,"from","","",36,[[["i32x4"]],["i8x4"]]],[11,"from","","",36,[[["f32x4"]],["i8x4"]]],[11,"from","","",36,[[["m32x4"]],["i8x4"]]],[11,"from","","",36,[[["u16x4"]],["i8x4"]]],[11,"from","","",36,[[["i16x4"]],["i8x4"]]],[11,"from","","",36,[[["m16x4"]],["i8x4"]]],[11,"from","","",36,[[["u8x4"]],["i8x4"]]],[11,"from","","",36,[[["m8x4"]],["i8x4"]]],[11,"from","","",37,[[["f64x4"]],["u8x4"]]],[11,"from","","",37,[[["u64x4"]],["u8x4"]]],[11,"from","","",37,[[["i64x4"]],["u8x4"]]],[11,"from","","",37,[[["m64x4"]],["u8x4"]]],[11,"from","","",37,[[["u32x4"]],["u8x4"]]],[11,"from","","",37,[[["i32x4"]],["u8x4"]]],[11,"from","","",37,[[["f32x4"]],["u8x4"]]],[11,"from","","",37,[[["m32x4"]],["u8x4"]]],[11,"from","","",37,[[["u16x4"]],["u8x4"]]],[11,"from","","",37,[[["i16x4"]],["u8x4"]]],[11,"from","","",37,[[["m16x4"]],["u8x4"]]],[11,"from","","",37,[[["i8x4"]],["u8x4"]]],[11,"from","","",37,[[["m8x4"]],["u8x4"]]],[11,"from","","",38,[[["m64x4"]],["m8x4"]]],[11,"from","","",38,[[["m32x4"]],["m8x4"]]],[11,"from","","",38,[[["m16x4"]],["m8x4"]]],[11,"from","","",35,[[["m64x2"]],["m16x2"]]],[11,"from","","",35,[[["m32x2"]],["m16x2"]]],[11,"from","","",35,[[["m8x2"]],["m16x2"]]],[11,"clone","","",39,[[["self"]],["i8x64"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",39,[[["self"],["i8x64"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["i8x64"]],["bool"]]],[11,"le","","",39,[[["self"],["i8x64"]],["bool"]]],[11,"gt","","",39,[[["self"],["i8x64"]],["bool"]]],[11,"ge","","",39,[[["self"],["i8x64"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",39,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",39,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",39,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",39,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",39,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",39,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",39,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"eq","","Lane-wise equality comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",39,[[["self"],["i8x64"]],["m1x64"]]],[11,"hash","","",39,[[["self"],["h"]]]],[11,"add","","",39,[[["self"],["self"]],["self"]]],[11,"sub","","",39,[[["self"],["self"]],["self"]]],[11,"mul","","",39,[[["self"],["self"]],["self"]]],[11,"div","","",39,[[["self"],["self"]],["self"]]],[11,"rem","","",39,[[["self"],["self"]],["self"]]],[11,"add_assign","","",39,[[["self"],["self"]]]],[11,"sub_assign","","",39,[[["self"],["self"]]]],[11,"mul_assign","","",39,[[["self"],["self"]]]],[11,"div_assign","","",39,[[["self"],["self"]]]],[11,"rem_assign","","",39,[[["self"],["self"]]]],[11,"add","","",39,[[["self"],["i8"]],["self"]]],[11,"sub","","",39,[[["self"],["i8"]],["self"]]],[11,"mul","","",39,[[["self"],["i8"]],["self"]]],[11,"div","","",39,[[["self"],["i8"]],["self"]]],[11,"rem","","",39,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",39,[[["self"],["i8"]]]],[11,"sub_assign","","",39,[[["self"],["i8"]]]],[11,"mul_assign","","",39,[[["self"],["i8"]]]],[11,"div_assign","","",39,[[["self"],["i8"]]]],[11,"rem_assign","","",39,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",39,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",39,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",39,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",39,[[["self"]],["i8"]]],[11,"neg","","",39,[[["self"]],["self"]]],[11,"not","","",39,[[["self"]],["self"]]],[11,"bitxor","","",39,[[["self"],["self"]],["self"]]],[11,"bitand","","",39,[[["self"],["self"]],["self"]]],[11,"bitor","","",39,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",39,[[["self"],["self"]]]],[11,"bitor_assign","","",39,[[["self"],["self"]]]],[11,"bitxor_assign","","",39,[[["self"],["self"]]]],[11,"bitxor","","",39,[[["self"],["i8"]],["self"]]],[11,"bitand","","",39,[[["self"],["i8"]],["self"]]],[11,"bitor","","",39,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",39,[[["self"],["i8"]]]],[11,"bitor_assign","","",39,[[["self"],["i8"]]]],[11,"bitxor_assign","","",39,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",39,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",39,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",39,[[["self"]],["i8"]]],[11,"shl","","",39,[[["self"],["u8"]],["self"]]],[11,"shr","","",39,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["u8"]]]],[11,"shr_assign","","",39,[[["self"],["u8"]]]],[11,"shl","","",39,[[["self"],["u16"]],["self"]]],[11,"shr","","",39,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["u16"]]]],[11,"shr_assign","","",39,[[["self"],["u16"]]]],[11,"shl","","",39,[[["self"],["u32"]],["self"]]],[11,"shr","","",39,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["u32"]]]],[11,"shr_assign","","",39,[[["self"],["u32"]]]],[11,"shl","","",39,[[["self"],["u64"]],["self"]]],[11,"shr","","",39,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["u64"]]]],[11,"shr_assign","","",39,[[["self"],["u64"]]]],[11,"shl","","",39,[[["self"],["usize"]],["self"]]],[11,"shr","","",39,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["usize"]]]],[11,"shr_assign","","",39,[[["self"],["usize"]]]],[11,"shl","","",39,[[["self"],["i8"]],["self"]]],[11,"shr","","",39,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["i8"]]]],[11,"shr_assign","","",39,[[["self"],["i8"]]]],[11,"shl","","",39,[[["self"],["i16"]],["self"]]],[11,"shr","","",39,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["i16"]]]],[11,"shr_assign","","",39,[[["self"],["i16"]]]],[11,"shl","","",39,[[["self"],["i32"]],["self"]]],[11,"shr","","",39,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["i32"]]]],[11,"shr_assign","","",39,[[["self"],["i32"]]]],[11,"shl","","",39,[[["self"],["i64"]],["self"]]],[11,"shr","","",39,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["i64"]]]],[11,"shr_assign","","",39,[[["self"],["i64"]]]],[11,"shl","","",39,[[["self"],["isize"]],["self"]]],[11,"shr","","",39,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["isize"]]]],[11,"shr_assign","","",39,[[["self"],["isize"]]]],[11,"shl","","",39,[[["self"],["self"]],["self"]]],[11,"shr","","",39,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",39,[[["self"],["self"]]]],[11,"shr_assign","","",39,[[["self"],["self"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"ne","","",39,[[["self"],["self"]],["bool"]]],[11,"default","","",39,[[],["self"]]],[11,"min","","Minimum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",39,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",39,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["u8x64"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",40,[[["self"],["u8x64"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["u8x64"]],["bool"]]],[11,"le","","",40,[[["self"],["u8x64"]],["bool"]]],[11,"gt","","",40,[[["self"],["u8x64"]],["bool"]]],[11,"ge","","",40,[[["self"],["u8x64"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",40,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",40,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",40,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",40,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",40,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",40,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",40,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",40,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",40,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"eq","","Lane-wise equality comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",40,[[["self"],["u8x64"]],["m1x64"]]],[11,"hash","","",40,[[["self"],["h"]]]],[11,"add","","",40,[[["self"],["self"]],["self"]]],[11,"sub","","",40,[[["self"],["self"]],["self"]]],[11,"mul","","",40,[[["self"],["self"]],["self"]]],[11,"div","","",40,[[["self"],["self"]],["self"]]],[11,"rem","","",40,[[["self"],["self"]],["self"]]],[11,"add_assign","","",40,[[["self"],["self"]]]],[11,"sub_assign","","",40,[[["self"],["self"]]]],[11,"mul_assign","","",40,[[["self"],["self"]]]],[11,"div_assign","","",40,[[["self"],["self"]]]],[11,"rem_assign","","",40,[[["self"],["self"]]]],[11,"add","","",40,[[["self"],["u8"]],["self"]]],[11,"sub","","",40,[[["self"],["u8"]],["self"]]],[11,"mul","","",40,[[["self"],["u8"]],["self"]]],[11,"div","","",40,[[["self"],["u8"]],["self"]]],[11,"rem","","",40,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",40,[[["self"],["u8"]]]],[11,"sub_assign","","",40,[[["self"],["u8"]]]],[11,"mul_assign","","",40,[[["self"],["u8"]]]],[11,"div_assign","","",40,[[["self"],["u8"]]]],[11,"rem_assign","","",40,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",40,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",40,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",40,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",40,[[["self"]],["u8"]]],[11,"bitxor","","",40,[[["self"],["u8"]],["self"]]],[11,"bitand","","",40,[[["self"],["u8"]],["self"]]],[11,"bitor","","",40,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["u8"]]]],[11,"bitor_assign","","",40,[[["self"],["u8"]]]],[11,"bitxor_assign","","",40,[[["self"],["u8"]]]],[11,"not","","",40,[[["self"]],["self"]]],[11,"bitxor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand","","",40,[[["self"],["self"]],["self"]]],[11,"bitor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["self"]]]],[11,"bitor_assign","","",40,[[["self"],["self"]]]],[11,"bitxor_assign","","",40,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",40,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",40,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",40,[[["self"]],["u8"]]],[11,"shl","","",40,[[["self"],["u8"]],["self"]]],[11,"shr","","",40,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["u8"]]]],[11,"shr_assign","","",40,[[["self"],["u8"]]]],[11,"shl","","",40,[[["self"],["u16"]],["self"]]],[11,"shr","","",40,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["u16"]]]],[11,"shr_assign","","",40,[[["self"],["u16"]]]],[11,"shl","","",40,[[["self"],["u32"]],["self"]]],[11,"shr","","",40,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["u32"]]]],[11,"shr_assign","","",40,[[["self"],["u32"]]]],[11,"shl","","",40,[[["self"],["u64"]],["self"]]],[11,"shr","","",40,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["u64"]]]],[11,"shr_assign","","",40,[[["self"],["u64"]]]],[11,"shl","","",40,[[["self"],["usize"]],["self"]]],[11,"shr","","",40,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["usize"]]]],[11,"shr_assign","","",40,[[["self"],["usize"]]]],[11,"shl","","",40,[[["self"],["i8"]],["self"]]],[11,"shr","","",40,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["i8"]]]],[11,"shr_assign","","",40,[[["self"],["i8"]]]],[11,"shl","","",40,[[["self"],["i16"]],["self"]]],[11,"shr","","",40,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["i16"]]]],[11,"shr_assign","","",40,[[["self"],["i16"]]]],[11,"shl","","",40,[[["self"],["i32"]],["self"]]],[11,"shr","","",40,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["i32"]]]],[11,"shr_assign","","",40,[[["self"],["i32"]]]],[11,"shl","","",40,[[["self"],["i64"]],["self"]]],[11,"shr","","",40,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["i64"]]]],[11,"shr_assign","","",40,[[["self"],["i64"]]]],[11,"shl","","",40,[[["self"],["isize"]],["self"]]],[11,"shr","","",40,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["isize"]]]],[11,"shr_assign","","",40,[[["self"],["isize"]]]],[11,"shl","","",40,[[["self"],["self"]],["self"]]],[11,"shr","","",40,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",40,[[["self"],["self"]]]],[11,"shr_assign","","",40,[[["self"],["self"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["self"]],["bool"]]],[11,"ne","","",40,[[["self"],["self"]],["bool"]]],[11,"default","","",40,[[],["self"]]],[11,"min","","Minimum of two vectors.",40,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",40,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",40,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",40,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["m1x64"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",41,[[["self"],["m1x64"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["m1x64"]],["bool"]]],[11,"le","","",41,[[["self"],["m1x64"]],["bool"]]],[11,"gt","","",41,[[["self"],["m1x64"]],["bool"]]],[11,"ge","","",41,[[["self"],["m1x64"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",41,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",41,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",41,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",41,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",41,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",41,[[["self"]],["self"]]],[11,"bitxor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand","","",41,[[["self"],["self"]],["self"]]],[11,"bitor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["self"]]]],[11,"bitor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor","","",41,[[["self"],["bool"]],["self"]]],[11,"bitand","","",41,[[["self"],["bool"]],["self"]]],[11,"bitor","","",41,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["bool"]]]],[11,"bitor_assign","","",41,[[["self"],["bool"]]]],[11,"bitxor_assign","","",41,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",41,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",41,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",41,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",41,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",41,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",41,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",41,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",41,[[["self"],["m1x64"]],["m1x64"]]],[11,"eq","","",41,[[["self"],["self"]],["bool"]]],[11,"ne","","",41,[[["self"],["self"]],["bool"]]],[11,"default","","",41,[[],["self"]]],[11,"clone","","",42,[[["self"]],["i16x32"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",42,[[["self"],["i16x32"]],["option",["ordering"]]]],[11,"lt","","",42,[[["self"],["i16x32"]],["bool"]]],[11,"le","","",42,[[["self"],["i16x32"]],["bool"]]],[11,"gt","","",42,[[["self"],["i16x32"]],["bool"]]],[11,"ge","","",42,[[["self"],["i16x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",42,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",42,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",42,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",42,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",42,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["i16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",42,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",42,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"eq","","Lane-wise equality comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",42,[[["self"],["i16x32"]],["m1x32"]]],[11,"hash","","",42,[[["self"],["h"]]]],[11,"add","","",42,[[["self"],["self"]],["self"]]],[11,"sub","","",42,[[["self"],["self"]],["self"]]],[11,"mul","","",42,[[["self"],["self"]],["self"]]],[11,"div","","",42,[[["self"],["self"]],["self"]]],[11,"rem","","",42,[[["self"],["self"]],["self"]]],[11,"add_assign","","",42,[[["self"],["self"]]]],[11,"sub_assign","","",42,[[["self"],["self"]]]],[11,"mul_assign","","",42,[[["self"],["self"]]]],[11,"div_assign","","",42,[[["self"],["self"]]]],[11,"rem_assign","","",42,[[["self"],["self"]]]],[11,"add","","",42,[[["self"],["i16"]],["self"]]],[11,"sub","","",42,[[["self"],["i16"]],["self"]]],[11,"mul","","",42,[[["self"],["i16"]],["self"]]],[11,"div","","",42,[[["self"],["i16"]],["self"]]],[11,"rem","","",42,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",42,[[["self"],["i16"]]]],[11,"sub_assign","","",42,[[["self"],["i16"]]]],[11,"mul_assign","","",42,[[["self"],["i16"]]]],[11,"div_assign","","",42,[[["self"],["i16"]]]],[11,"rem_assign","","",42,[[["self"],["i16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",42,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",42,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",42,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",42,[[["self"]],["i16"]]],[11,"neg","","",42,[[["self"]],["self"]]],[11,"not","","",42,[[["self"]],["self"]]],[11,"bitxor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand","","",42,[[["self"],["self"]],["self"]]],[11,"bitor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["self"]]]],[11,"bitor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor","","",42,[[["self"],["i16"]],["self"]]],[11,"bitand","","",42,[[["self"],["i16"]],["self"]]],[11,"bitor","","",42,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["i16"]]]],[11,"bitor_assign","","",42,[[["self"],["i16"]]]],[11,"bitxor_assign","","",42,[[["self"],["i16"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",42,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",42,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",42,[[["self"]],["i16"]]],[11,"shl","","",42,[[["self"],["u8"]],["self"]]],[11,"shr","","",42,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u8"]]]],[11,"shr_assign","","",42,[[["self"],["u8"]]]],[11,"shl","","",42,[[["self"],["u16"]],["self"]]],[11,"shr","","",42,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u16"]]]],[11,"shr_assign","","",42,[[["self"],["u16"]]]],[11,"shl","","",42,[[["self"],["u32"]],["self"]]],[11,"shr","","",42,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u32"]]]],[11,"shr_assign","","",42,[[["self"],["u32"]]]],[11,"shl","","",42,[[["self"],["u64"]],["self"]]],[11,"shr","","",42,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u64"]]]],[11,"shr_assign","","",42,[[["self"],["u64"]]]],[11,"shl","","",42,[[["self"],["usize"]],["self"]]],[11,"shr","","",42,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["usize"]]]],[11,"shr_assign","","",42,[[["self"],["usize"]]]],[11,"shl","","",42,[[["self"],["i8"]],["self"]]],[11,"shr","","",42,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["i8"]]]],[11,"shr_assign","","",42,[[["self"],["i8"]]]],[11,"shl","","",42,[[["self"],["i16"]],["self"]]],[11,"shr","","",42,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["i16"]]]],[11,"shr_assign","","",42,[[["self"],["i16"]]]],[11,"shl","","",42,[[["self"],["i32"]],["self"]]],[11,"shr","","",42,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["i32"]]]],[11,"shr_assign","","",42,[[["self"],["i32"]]]],[11,"shl","","",42,[[["self"],["i64"]],["self"]]],[11,"shr","","",42,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["i64"]]]],[11,"shr_assign","","",42,[[["self"],["i64"]]]],[11,"shl","","",42,[[["self"],["isize"]],["self"]]],[11,"shr","","",42,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["isize"]]]],[11,"shr_assign","","",42,[[["self"],["isize"]]]],[11,"shl","","",42,[[["self"],["self"]],["self"]]],[11,"shr","","",42,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["self"]]]],[11,"shr_assign","","",42,[[["self"],["self"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["self"]],["bool"]]],[11,"ne","","",42,[[["self"],["self"]],["bool"]]],[11,"default","","",42,[[],["self"]]],[11,"min","","Minimum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",42,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["u16x32"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",43,[[["self"],["u16x32"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["u16x32"]],["bool"]]],[11,"le","","",43,[[["self"],["u16x32"]],["bool"]]],[11,"gt","","",43,[[["self"],["u16x32"]],["bool"]]],[11,"ge","","",43,[[["self"],["u16x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",43,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",43,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",43,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",43,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",43,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["u16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",43,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",43,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"eq","","Lane-wise equality comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",43,[[["self"],["u16x32"]],["m1x32"]]],[11,"hash","","",43,[[["self"],["h"]]]],[11,"add","","",43,[[["self"],["self"]],["self"]]],[11,"sub","","",43,[[["self"],["self"]],["self"]]],[11,"mul","","",43,[[["self"],["self"]],["self"]]],[11,"div","","",43,[[["self"],["self"]],["self"]]],[11,"rem","","",43,[[["self"],["self"]],["self"]]],[11,"add_assign","","",43,[[["self"],["self"]]]],[11,"sub_assign","","",43,[[["self"],["self"]]]],[11,"mul_assign","","",43,[[["self"],["self"]]]],[11,"div_assign","","",43,[[["self"],["self"]]]],[11,"rem_assign","","",43,[[["self"],["self"]]]],[11,"add","","",43,[[["self"],["u16"]],["self"]]],[11,"sub","","",43,[[["self"],["u16"]],["self"]]],[11,"mul","","",43,[[["self"],["u16"]],["self"]]],[11,"div","","",43,[[["self"],["u16"]],["self"]]],[11,"rem","","",43,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",43,[[["self"],["u16"]]]],[11,"sub_assign","","",43,[[["self"],["u16"]]]],[11,"mul_assign","","",43,[[["self"],["u16"]]]],[11,"div_assign","","",43,[[["self"],["u16"]]]],[11,"rem_assign","","",43,[[["self"],["u16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",43,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",43,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",43,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",43,[[["self"]],["u16"]]],[11,"bitxor","","",43,[[["self"],["u16"]],["self"]]],[11,"bitand","","",43,[[["self"],["u16"]],["self"]]],[11,"bitor","","",43,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",43,[[["self"],["u16"]]]],[11,"bitor_assign","","",43,[[["self"],["u16"]]]],[11,"bitxor_assign","","",43,[[["self"],["u16"]]]],[11,"not","","",43,[[["self"]],["self"]]],[11,"bitxor","","",43,[[["self"],["self"]],["self"]]],[11,"bitand","","",43,[[["self"],["self"]],["self"]]],[11,"bitor","","",43,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",43,[[["self"],["self"]]]],[11,"bitor_assign","","",43,[[["self"],["self"]]]],[11,"bitxor_assign","","",43,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",43,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",43,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",43,[[["self"]],["u16"]]],[11,"shl","","",43,[[["self"],["u8"]],["self"]]],[11,"shr","","",43,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["u8"]]]],[11,"shr_assign","","",43,[[["self"],["u8"]]]],[11,"shl","","",43,[[["self"],["u16"]],["self"]]],[11,"shr","","",43,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["u16"]]]],[11,"shr_assign","","",43,[[["self"],["u16"]]]],[11,"shl","","",43,[[["self"],["u32"]],["self"]]],[11,"shr","","",43,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["u32"]]]],[11,"shr_assign","","",43,[[["self"],["u32"]]]],[11,"shl","","",43,[[["self"],["u64"]],["self"]]],[11,"shr","","",43,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["u64"]]]],[11,"shr_assign","","",43,[[["self"],["u64"]]]],[11,"shl","","",43,[[["self"],["usize"]],["self"]]],[11,"shr","","",43,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shl","","",43,[[["self"],["i8"]],["self"]]],[11,"shr","","",43,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["i8"]]]],[11,"shr_assign","","",43,[[["self"],["i8"]]]],[11,"shl","","",43,[[["self"],["i16"]],["self"]]],[11,"shr","","",43,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["i16"]]]],[11,"shr_assign","","",43,[[["self"],["i16"]]]],[11,"shl","","",43,[[["self"],["i32"]],["self"]]],[11,"shr","","",43,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["i32"]]]],[11,"shr_assign","","",43,[[["self"],["i32"]]]],[11,"shl","","",43,[[["self"],["i64"]],["self"]]],[11,"shr","","",43,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["i64"]]]],[11,"shr_assign","","",43,[[["self"],["i64"]]]],[11,"shl","","",43,[[["self"],["isize"]],["self"]]],[11,"shr","","",43,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["isize"]]]],[11,"shr_assign","","",43,[[["self"],["isize"]]]],[11,"shl","","",43,[[["self"],["self"]],["self"]]],[11,"shr","","",43,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",43,[[["self"],["self"]]]],[11,"shr_assign","","",43,[[["self"],["self"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["self"]],["bool"]]],[11,"ne","","",43,[[["self"],["self"]],["bool"]]],[11,"default","","",43,[[],["self"]]],[11,"min","","Minimum of two vectors.",43,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",43,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",43,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",43,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["m1x32"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",44,[[["self"],["m1x32"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["m1x32"]],["bool"]]],[11,"le","","",44,[[["self"],["m1x32"]],["bool"]]],[11,"gt","","",44,[[["self"],["m1x32"]],["bool"]]],[11,"ge","","",44,[[["self"],["m1x32"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",44,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",44,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",44,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",44,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",44,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",44,[[["self"]],["self"]]],[11,"bitxor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand","","",44,[[["self"],["self"]],["self"]]],[11,"bitor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor","","",44,[[["self"],["bool"]],["self"]]],[11,"bitand","","",44,[[["self"],["bool"]],["self"]]],[11,"bitor","","",44,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["bool"]]]],[11,"bitor_assign","","",44,[[["self"],["bool"]]]],[11,"bitxor_assign","","",44,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",44,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",44,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",44,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",44,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",44,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",44,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",44,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",44,[[["self"],["m1x32"]],["m1x32"]]],[11,"eq","","",44,[[["self"],["self"]],["bool"]]],[11,"ne","","",44,[[["self"],["self"]],["bool"]]],[11,"default","","",44,[[],["self"]]],[11,"clone","","",45,[[["self"]],["i32x16"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",45,[[["self"],["i32x16"]],["option",["ordering"]]]],[11,"lt","","",45,[[["self"],["i32x16"]],["bool"]]],[11,"le","","",45,[[["self"],["i32x16"]],["bool"]]],[11,"gt","","",45,[[["self"],["i32x16"]],["bool"]]],[11,"ge","","",45,[[["self"],["i32x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",45,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",45,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",45,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",45,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",45,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["i32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",45,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",45,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"eq","","Lane-wise equality comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",45,[[["self"],["i32x16"]],["m1x16"]]],[11,"hash","","",45,[[["self"],["h"]]]],[11,"add","","",45,[[["self"],["self"]],["self"]]],[11,"sub","","",45,[[["self"],["self"]],["self"]]],[11,"mul","","",45,[[["self"],["self"]],["self"]]],[11,"div","","",45,[[["self"],["self"]],["self"]]],[11,"rem","","",45,[[["self"],["self"]],["self"]]],[11,"add_assign","","",45,[[["self"],["self"]]]],[11,"sub_assign","","",45,[[["self"],["self"]]]],[11,"mul_assign","","",45,[[["self"],["self"]]]],[11,"div_assign","","",45,[[["self"],["self"]]]],[11,"rem_assign","","",45,[[["self"],["self"]]]],[11,"add","","",45,[[["self"],["i32"]],["self"]]],[11,"sub","","",45,[[["self"],["i32"]],["self"]]],[11,"mul","","",45,[[["self"],["i32"]],["self"]]],[11,"div","","",45,[[["self"],["i32"]],["self"]]],[11,"rem","","",45,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",45,[[["self"],["i32"]]]],[11,"sub_assign","","",45,[[["self"],["i32"]]]],[11,"mul_assign","","",45,[[["self"],["i32"]]]],[11,"div_assign","","",45,[[["self"],["i32"]]]],[11,"rem_assign","","",45,[[["self"],["i32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",45,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",45,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",45,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",45,[[["self"]],["i32"]]],[11,"neg","","",45,[[["self"]],["self"]]],[11,"not","","",45,[[["self"]],["self"]]],[11,"bitxor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand","","",45,[[["self"],["self"]],["self"]]],[11,"bitor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["self"]]]],[11,"bitor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor","","",45,[[["self"],["i32"]],["self"]]],[11,"bitand","","",45,[[["self"],["i32"]],["self"]]],[11,"bitor","","",45,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["i32"]]]],[11,"bitor_assign","","",45,[[["self"],["i32"]]]],[11,"bitxor_assign","","",45,[[["self"],["i32"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",45,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",45,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",45,[[["self"]],["i32"]]],[11,"shl","","",45,[[["self"],["u8"]],["self"]]],[11,"shr","","",45,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u8"]]]],[11,"shr_assign","","",45,[[["self"],["u8"]]]],[11,"shl","","",45,[[["self"],["u16"]],["self"]]],[11,"shr","","",45,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u16"]]]],[11,"shr_assign","","",45,[[["self"],["u16"]]]],[11,"shl","","",45,[[["self"],["u32"]],["self"]]],[11,"shr","","",45,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u32"]]]],[11,"shr_assign","","",45,[[["self"],["u32"]]]],[11,"shl","","",45,[[["self"],["u64"]],["self"]]],[11,"shr","","",45,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u64"]]]],[11,"shr_assign","","",45,[[["self"],["u64"]]]],[11,"shl","","",45,[[["self"],["usize"]],["self"]]],[11,"shr","","",45,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["usize"]]]],[11,"shr_assign","","",45,[[["self"],["usize"]]]],[11,"shl","","",45,[[["self"],["i8"]],["self"]]],[11,"shr","","",45,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["i8"]]]],[11,"shr_assign","","",45,[[["self"],["i8"]]]],[11,"shl","","",45,[[["self"],["i16"]],["self"]]],[11,"shr","","",45,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["i16"]]]],[11,"shr_assign","","",45,[[["self"],["i16"]]]],[11,"shl","","",45,[[["self"],["i32"]],["self"]]],[11,"shr","","",45,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["i32"]]]],[11,"shr_assign","","",45,[[["self"],["i32"]]]],[11,"shl","","",45,[[["self"],["i64"]],["self"]]],[11,"shr","","",45,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["i64"]]]],[11,"shr_assign","","",45,[[["self"],["i64"]]]],[11,"shl","","",45,[[["self"],["isize"]],["self"]]],[11,"shr","","",45,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["isize"]]]],[11,"shr_assign","","",45,[[["self"],["isize"]]]],[11,"shl","","",45,[[["self"],["self"]],["self"]]],[11,"shr","","",45,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["self"]]]],[11,"shr_assign","","",45,[[["self"],["self"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["self"]],["bool"]]],[11,"ne","","",45,[[["self"],["self"]],["bool"]]],[11,"default","","",45,[[],["self"]]],[11,"min","","Minimum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",45,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["u32x16"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",46,[[["self"],["u32x16"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["u32x16"]],["bool"]]],[11,"le","","",46,[[["self"],["u32x16"]],["bool"]]],[11,"gt","","",46,[[["self"],["u32x16"]],["bool"]]],[11,"ge","","",46,[[["self"],["u32x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",46,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",46,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",46,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",46,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",46,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["u32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",46,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",46,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"eq","","Lane-wise equality comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",46,[[["self"],["u32x16"]],["m1x16"]]],[11,"hash","","",46,[[["self"],["h"]]]],[11,"add","","",46,[[["self"],["self"]],["self"]]],[11,"sub","","",46,[[["self"],["self"]],["self"]]],[11,"mul","","",46,[[["self"],["self"]],["self"]]],[11,"div","","",46,[[["self"],["self"]],["self"]]],[11,"rem","","",46,[[["self"],["self"]],["self"]]],[11,"add_assign","","",46,[[["self"],["self"]]]],[11,"sub_assign","","",46,[[["self"],["self"]]]],[11,"mul_assign","","",46,[[["self"],["self"]]]],[11,"div_assign","","",46,[[["self"],["self"]]]],[11,"rem_assign","","",46,[[["self"],["self"]]]],[11,"add","","",46,[[["self"],["u32"]],["self"]]],[11,"sub","","",46,[[["self"],["u32"]],["self"]]],[11,"mul","","",46,[[["self"],["u32"]],["self"]]],[11,"div","","",46,[[["self"],["u32"]],["self"]]],[11,"rem","","",46,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",46,[[["self"],["u32"]]]],[11,"sub_assign","","",46,[[["self"],["u32"]]]],[11,"mul_assign","","",46,[[["self"],["u32"]]]],[11,"div_assign","","",46,[[["self"],["u32"]]]],[11,"rem_assign","","",46,[[["self"],["u32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",46,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",46,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",46,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",46,[[["self"]],["u32"]]],[11,"bitxor","","",46,[[["self"],["u32"]],["self"]]],[11,"bitand","","",46,[[["self"],["u32"]],["self"]]],[11,"bitor","","",46,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["u32"]]]],[11,"bitor_assign","","",46,[[["self"],["u32"]]]],[11,"bitxor_assign","","",46,[[["self"],["u32"]]]],[11,"not","","",46,[[["self"]],["self"]]],[11,"bitxor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand","","",46,[[["self"],["self"]],["self"]]],[11,"bitor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["self"]]]],[11,"bitor_assign","","",46,[[["self"],["self"]]]],[11,"bitxor_assign","","",46,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",46,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",46,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",46,[[["self"]],["u32"]]],[11,"shl","","",46,[[["self"],["u8"]],["self"]]],[11,"shr","","",46,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["u8"]]]],[11,"shr_assign","","",46,[[["self"],["u8"]]]],[11,"shl","","",46,[[["self"],["u16"]],["self"]]],[11,"shr","","",46,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["u16"]]]],[11,"shr_assign","","",46,[[["self"],["u16"]]]],[11,"shl","","",46,[[["self"],["u32"]],["self"]]],[11,"shr","","",46,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["u32"]]]],[11,"shr_assign","","",46,[[["self"],["u32"]]]],[11,"shl","","",46,[[["self"],["u64"]],["self"]]],[11,"shr","","",46,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["u64"]]]],[11,"shr_assign","","",46,[[["self"],["u64"]]]],[11,"shl","","",46,[[["self"],["usize"]],["self"]]],[11,"shr","","",46,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["usize"]]]],[11,"shr_assign","","",46,[[["self"],["usize"]]]],[11,"shl","","",46,[[["self"],["i8"]],["self"]]],[11,"shr","","",46,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["i8"]]]],[11,"shr_assign","","",46,[[["self"],["i8"]]]],[11,"shl","","",46,[[["self"],["i16"]],["self"]]],[11,"shr","","",46,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["i16"]]]],[11,"shr_assign","","",46,[[["self"],["i16"]]]],[11,"shl","","",46,[[["self"],["i32"]],["self"]]],[11,"shr","","",46,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["i32"]]]],[11,"shr_assign","","",46,[[["self"],["i32"]]]],[11,"shl","","",46,[[["self"],["i64"]],["self"]]],[11,"shr","","",46,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["i64"]]]],[11,"shr_assign","","",46,[[["self"],["i64"]]]],[11,"shl","","",46,[[["self"],["isize"]],["self"]]],[11,"shr","","",46,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["isize"]]]],[11,"shr_assign","","",46,[[["self"],["isize"]]]],[11,"shl","","",46,[[["self"],["self"]],["self"]]],[11,"shr","","",46,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",46,[[["self"],["self"]]]],[11,"shr_assign","","",46,[[["self"],["self"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["self"]],["bool"]]],[11,"ne","","",46,[[["self"],["self"]],["bool"]]],[11,"default","","",46,[[],["self"]]],[11,"min","","Minimum of two vectors.",46,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",46,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",46,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",46,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["f32x16"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",47,[[["self"],["f32x16"]],["option",["ordering"]]]],[11,"lt","","",47,[[["self"],["f32x16"]],["bool"]]],[11,"le","","",47,[[["self"],["f32x16"]],["bool"]]],[11,"gt","","",47,[[["self"],["f32x16"]],["bool"]]],[11,"ge","","",47,[[["self"],["f32x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",47,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",47,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",47,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",47,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",47,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["f32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",47,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",47,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",47,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",47,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"eq","","Lane-wise equality comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",47,[[["self"],["f32x16"]],["m1x16"]]],[11,"add","","",47,[[["self"],["self"]],["self"]]],[11,"sub","","",47,[[["self"],["self"]],["self"]]],[11,"mul","","",47,[[["self"],["self"]],["self"]]],[11,"div","","",47,[[["self"],["self"]],["self"]]],[11,"rem","","",47,[[["self"],["self"]],["self"]]],[11,"add_assign","","",47,[[["self"],["self"]]]],[11,"sub_assign","","",47,[[["self"],["self"]]]],[11,"mul_assign","","",47,[[["self"],["self"]]]],[11,"div_assign","","",47,[[["self"],["self"]]]],[11,"rem_assign","","",47,[[["self"],["self"]]]],[11,"add","","",47,[[["self"],["f32"]],["self"]]],[11,"sub","","",47,[[["self"],["f32"]],["self"]]],[11,"mul","","",47,[[["self"],["f32"]],["self"]]],[11,"div","","",47,[[["self"],["f32"]],["self"]]],[11,"rem","","",47,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",47,[[["self"],["f32"]]]],[11,"sub_assign","","",47,[[["self"],["f32"]]]],[11,"mul_assign","","",47,[[["self"],["f32"]]]],[11,"div_assign","","",47,[[["self"],["f32"]]]],[11,"rem_assign","","",47,[[["self"],["f32"]]]],[11,"sum","","Horizontal sum of the vector elements.",47,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",47,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",47,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",47,[[["self"]],["f32"]]],[11,"neg","","",47,[[["self"]],["self"]]],[11,"eq","","",47,[[["self"],["self"]],["bool"]]],[11,"ne","","",47,[[["self"],["self"]],["bool"]]],[11,"default","","",47,[[],["self"]]],[11,"min","","Minimum of two vectors.",47,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",47,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",47,[[["self"]],["self"]]],[11,"sqrt","","Square-root",47,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",47,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",47,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",47,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",47,[[["self"]],["self"]]],[11,"cos","","Cos",47,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["m1x16"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",48,[[["self"],["m1x16"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["m1x16"]],["bool"]]],[11,"le","","",48,[[["self"],["m1x16"]],["bool"]]],[11,"gt","","",48,[[["self"],["m1x16"]],["bool"]]],[11,"ge","","",48,[[["self"],["m1x16"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",48,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",48,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",48,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",48,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",48,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",48,[[["self"]],["self"]]],[11,"bitxor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand","","",48,[[["self"],["self"]],["self"]]],[11,"bitor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["self"]]]],[11,"bitor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor","","",48,[[["self"],["bool"]],["self"]]],[11,"bitand","","",48,[[["self"],["bool"]],["self"]]],[11,"bitor","","",48,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["bool"]]]],[11,"bitor_assign","","",48,[[["self"],["bool"]]]],[11,"bitxor_assign","","",48,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",48,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",48,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",48,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",48,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",48,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",48,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",48,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",48,[[["self"],["m1x16"]],["m1x16"]]],[11,"eq","","",48,[[["self"],["self"]],["bool"]]],[11,"ne","","",48,[[["self"],["self"]],["bool"]]],[11,"default","","",48,[[],["self"]]],[11,"clone","","",49,[[["self"]],["i64x8"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",49,[[["self"],["i64x8"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["i64x8"]],["bool"]]],[11,"le","","",49,[[["self"],["i64x8"]],["bool"]]],[11,"gt","","",49,[[["self"],["i64x8"]],["bool"]]],[11,"ge","","",49,[[["self"],["i64x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",49,[[["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",49,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",49,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",49,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",49,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["i64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",49,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",49,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"eq","","Lane-wise equality comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",49,[[["self"],["i64x8"]],["m1x8"]]],[11,"hash","","",49,[[["self"],["h"]]]],[11,"add","","",49,[[["self"],["self"]],["self"]]],[11,"sub","","",49,[[["self"],["self"]],["self"]]],[11,"mul","","",49,[[["self"],["self"]],["self"]]],[11,"div","","",49,[[["self"],["self"]],["self"]]],[11,"rem","","",49,[[["self"],["self"]],["self"]]],[11,"add_assign","","",49,[[["self"],["self"]]]],[11,"sub_assign","","",49,[[["self"],["self"]]]],[11,"mul_assign","","",49,[[["self"],["self"]]]],[11,"div_assign","","",49,[[["self"],["self"]]]],[11,"rem_assign","","",49,[[["self"],["self"]]]],[11,"add","","",49,[[["self"],["i64"]],["self"]]],[11,"sub","","",49,[[["self"],["i64"]],["self"]]],[11,"mul","","",49,[[["self"],["i64"]],["self"]]],[11,"div","","",49,[[["self"],["i64"]],["self"]]],[11,"rem","","",49,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",49,[[["self"],["i64"]]]],[11,"sub_assign","","",49,[[["self"],["i64"]]]],[11,"mul_assign","","",49,[[["self"],["i64"]]]],[11,"div_assign","","",49,[[["self"],["i64"]]]],[11,"rem_assign","","",49,[[["self"],["i64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",49,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",49,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",49,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",49,[[["self"]],["i64"]]],[11,"neg","","",49,[[["self"]],["self"]]],[11,"not","","",49,[[["self"]],["self"]]],[11,"bitxor","","",49,[[["self"],["self"]],["self"]]],[11,"bitand","","",49,[[["self"],["self"]],["self"]]],[11,"bitor","","",49,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",49,[[["self"],["self"]]]],[11,"bitor_assign","","",49,[[["self"],["self"]]]],[11,"bitxor_assign","","",49,[[["self"],["self"]]]],[11,"bitxor","","",49,[[["self"],["i64"]],["self"]]],[11,"bitand","","",49,[[["self"],["i64"]],["self"]]],[11,"bitor","","",49,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",49,[[["self"],["i64"]]]],[11,"bitor_assign","","",49,[[["self"],["i64"]]]],[11,"bitxor_assign","","",49,[[["self"],["i64"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",49,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",49,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",49,[[["self"]],["i64"]]],[11,"shl","","",49,[[["self"],["u8"]],["self"]]],[11,"shr","","",49,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["u8"]]]],[11,"shr_assign","","",49,[[["self"],["u8"]]]],[11,"shl","","",49,[[["self"],["u16"]],["self"]]],[11,"shr","","",49,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["u16"]]]],[11,"shr_assign","","",49,[[["self"],["u16"]]]],[11,"shl","","",49,[[["self"],["u32"]],["self"]]],[11,"shr","","",49,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["u32"]]]],[11,"shr_assign","","",49,[[["self"],["u32"]]]],[11,"shl","","",49,[[["self"],["u64"]],["self"]]],[11,"shr","","",49,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["u64"]]]],[11,"shr_assign","","",49,[[["self"],["u64"]]]],[11,"shl","","",49,[[["self"],["usize"]],["self"]]],[11,"shr","","",49,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["usize"]]]],[11,"shr_assign","","",49,[[["self"],["usize"]]]],[11,"shl","","",49,[[["self"],["i8"]],["self"]]],[11,"shr","","",49,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["i8"]]]],[11,"shr_assign","","",49,[[["self"],["i8"]]]],[11,"shl","","",49,[[["self"],["i16"]],["self"]]],[11,"shr","","",49,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["i16"]]]],[11,"shr_assign","","",49,[[["self"],["i16"]]]],[11,"shl","","",49,[[["self"],["i32"]],["self"]]],[11,"shr","","",49,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["i32"]]]],[11,"shr_assign","","",49,[[["self"],["i32"]]]],[11,"shl","","",49,[[["self"],["i64"]],["self"]]],[11,"shr","","",49,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["i64"]]]],[11,"shr_assign","","",49,[[["self"],["i64"]]]],[11,"shl","","",49,[[["self"],["isize"]],["self"]]],[11,"shr","","",49,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["isize"]]]],[11,"shr_assign","","",49,[[["self"],["isize"]]]],[11,"shl","","",49,[[["self"],["self"]],["self"]]],[11,"shr","","",49,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",49,[[["self"],["self"]]]],[11,"shr_assign","","",49,[[["self"],["self"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["self"]],["bool"]]],[11,"ne","","",49,[[["self"],["self"]],["bool"]]],[11,"default","","",49,[[],["self"]]],[11,"min","","Minimum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",49,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",49,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",49,[[["self"]],["self"]]],[11,"clone","","",50,[[["self"]],["u64x8"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",50,[[["self"],["u64x8"]],["option",["ordering"]]]],[11,"lt","","",50,[[["self"],["u64x8"]],["bool"]]],[11,"le","","",50,[[["self"],["u64x8"]],["bool"]]],[11,"gt","","",50,[[["self"],["u64x8"]],["bool"]]],[11,"ge","","",50,[[["self"],["u64x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",50,[[["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",50,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",50,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",50,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",50,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["u64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",50,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",50,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",50,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",50,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"eq","","Lane-wise equality comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",50,[[["self"],["u64x8"]],["m1x8"]]],[11,"hash","","",50,[[["self"],["h"]]]],[11,"add","","",50,[[["self"],["self"]],["self"]]],[11,"sub","","",50,[[["self"],["self"]],["self"]]],[11,"mul","","",50,[[["self"],["self"]],["self"]]],[11,"div","","",50,[[["self"],["self"]],["self"]]],[11,"rem","","",50,[[["self"],["self"]],["self"]]],[11,"add_assign","","",50,[[["self"],["self"]]]],[11,"sub_assign","","",50,[[["self"],["self"]]]],[11,"mul_assign","","",50,[[["self"],["self"]]]],[11,"div_assign","","",50,[[["self"],["self"]]]],[11,"rem_assign","","",50,[[["self"],["self"]]]],[11,"add","","",50,[[["self"],["u64"]],["self"]]],[11,"sub","","",50,[[["self"],["u64"]],["self"]]],[11,"mul","","",50,[[["self"],["u64"]],["self"]]],[11,"div","","",50,[[["self"],["u64"]],["self"]]],[11,"rem","","",50,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",50,[[["self"],["u64"]]]],[11,"sub_assign","","",50,[[["self"],["u64"]]]],[11,"mul_assign","","",50,[[["self"],["u64"]]]],[11,"div_assign","","",50,[[["self"],["u64"]]]],[11,"rem_assign","","",50,[[["self"],["u64"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",50,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",50,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",50,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",50,[[["self"]],["u64"]]],[11,"bitxor","","",50,[[["self"],["u64"]],["self"]]],[11,"bitand","","",50,[[["self"],["u64"]],["self"]]],[11,"bitor","","",50,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["u64"]]]],[11,"bitor_assign","","",50,[[["self"],["u64"]]]],[11,"bitxor_assign","","",50,[[["self"],["u64"]]]],[11,"not","","",50,[[["self"]],["self"]]],[11,"bitxor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand","","",50,[[["self"],["self"]],["self"]]],[11,"bitor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["self"]]]],[11,"bitor_assign","","",50,[[["self"],["self"]]]],[11,"bitxor_assign","","",50,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",50,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",50,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",50,[[["self"]],["u64"]]],[11,"shl","","",50,[[["self"],["u8"]],["self"]]],[11,"shr","","",50,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["u8"]]]],[11,"shr_assign","","",50,[[["self"],["u8"]]]],[11,"shl","","",50,[[["self"],["u16"]],["self"]]],[11,"shr","","",50,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["u16"]]]],[11,"shr_assign","","",50,[[["self"],["u16"]]]],[11,"shl","","",50,[[["self"],["u32"]],["self"]]],[11,"shr","","",50,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["u32"]]]],[11,"shr_assign","","",50,[[["self"],["u32"]]]],[11,"shl","","",50,[[["self"],["u64"]],["self"]]],[11,"shr","","",50,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["u64"]]]],[11,"shr_assign","","",50,[[["self"],["u64"]]]],[11,"shl","","",50,[[["self"],["usize"]],["self"]]],[11,"shr","","",50,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["usize"]]]],[11,"shr_assign","","",50,[[["self"],["usize"]]]],[11,"shl","","",50,[[["self"],["i8"]],["self"]]],[11,"shr","","",50,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["i8"]]]],[11,"shr_assign","","",50,[[["self"],["i8"]]]],[11,"shl","","",50,[[["self"],["i16"]],["self"]]],[11,"shr","","",50,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["i16"]]]],[11,"shr_assign","","",50,[[["self"],["i16"]]]],[11,"shl","","",50,[[["self"],["i32"]],["self"]]],[11,"shr","","",50,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["i32"]]]],[11,"shr_assign","","",50,[[["self"],["i32"]]]],[11,"shl","","",50,[[["self"],["i64"]],["self"]]],[11,"shr","","",50,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["i64"]]]],[11,"shr_assign","","",50,[[["self"],["i64"]]]],[11,"shl","","",50,[[["self"],["isize"]],["self"]]],[11,"shr","","",50,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["isize"]]]],[11,"shr_assign","","",50,[[["self"],["isize"]]]],[11,"shl","","",50,[[["self"],["self"]],["self"]]],[11,"shr","","",50,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",50,[[["self"],["self"]]]],[11,"shr_assign","","",50,[[["self"],["self"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"ne","","",50,[[["self"],["self"]],["bool"]]],[11,"default","","",50,[[],["self"]]],[11,"min","","Minimum of two vectors.",50,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",50,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",50,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",50,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",50,[[["self"]],["self"]]],[11,"clone","","",51,[[["self"]],["f64x8"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",51,[[["self"],["f64x8"]],["option",["ordering"]]]],[11,"lt","","",51,[[["self"],["f64x8"]],["bool"]]],[11,"le","","",51,[[["self"],["f64x8"]],["bool"]]],[11,"gt","","",51,[[["self"],["f64x8"]],["bool"]]],[11,"ge","","",51,[[["self"],["f64x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",51,[[["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",51,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",51,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",51,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",51,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["f64"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",51,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",51,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"eq","","Lane-wise equality comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",51,[[["self"],["f64x8"]],["m1x8"]]],[11,"add","","",51,[[["self"],["self"]],["self"]]],[11,"sub","","",51,[[["self"],["self"]],["self"]]],[11,"mul","","",51,[[["self"],["self"]],["self"]]],[11,"div","","",51,[[["self"],["self"]],["self"]]],[11,"rem","","",51,[[["self"],["self"]],["self"]]],[11,"add_assign","","",51,[[["self"],["self"]]]],[11,"sub_assign","","",51,[[["self"],["self"]]]],[11,"mul_assign","","",51,[[["self"],["self"]]]],[11,"div_assign","","",51,[[["self"],["self"]]]],[11,"rem_assign","","",51,[[["self"],["self"]]]],[11,"add","","",51,[[["self"],["f64"]],["self"]]],[11,"sub","","",51,[[["self"],["f64"]],["self"]]],[11,"mul","","",51,[[["self"],["f64"]],["self"]]],[11,"div","","",51,[[["self"],["f64"]],["self"]]],[11,"rem","","",51,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",51,[[["self"],["f64"]]]],[11,"sub_assign","","",51,[[["self"],["f64"]]]],[11,"mul_assign","","",51,[[["self"],["f64"]]]],[11,"div_assign","","",51,[[["self"],["f64"]]]],[11,"rem_assign","","",51,[[["self"],["f64"]]]],[11,"sum","","Horizontal sum of the vector elements.",51,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",51,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",51,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",51,[[["self"]],["f64"]]],[11,"neg","","",51,[[["self"]],["self"]]],[11,"eq","","",51,[[["self"],["self"]],["bool"]]],[11,"ne","","",51,[[["self"],["self"]],["bool"]]],[11,"default","","",51,[[],["self"]]],[11,"min","","Minimum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",51,[[["self"]],["self"]]],[11,"sqrt","","Square-root",51,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",51,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",51,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",51,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",51,[[["self"]],["self"]]],[11,"cos","","Cos",51,[[["self"]],["self"]]],[11,"clone","","",52,[[["self"]],["m1x8"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",52,[[["self"],["m1x8"]],["option",["ordering"]]]],[11,"lt","","",52,[[["self"],["m1x8"]],["bool"]]],[11,"le","","",52,[[["self"],["m1x8"]],["bool"]]],[11,"gt","","",52,[[["self"],["m1x8"]],["bool"]]],[11,"ge","","",52,[[["self"],["m1x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",52,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",52,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",52,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",52,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",52,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",52,[[["self"]],["self"]]],[11,"bitxor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand","","",52,[[["self"],["self"]],["self"]]],[11,"bitor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["self"]]]],[11,"bitor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor","","",52,[[["self"],["bool"]],["self"]]],[11,"bitand","","",52,[[["self"],["bool"]],["self"]]],[11,"bitor","","",52,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["bool"]]]],[11,"bitor_assign","","",52,[[["self"],["bool"]]]],[11,"bitxor_assign","","",52,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",52,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",52,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",52,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",52,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",52,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",52,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",52,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",52,[[["self"],["m1x8"]],["m1x8"]]],[11,"eq","","",52,[[["self"],["self"]],["bool"]]],[11,"ne","","",52,[[["self"],["self"]],["bool"]]],[11,"default","","",52,[[],["self"]]],[11,"from_bits","","",39,[[["u64x8"]],["i8x64"]]],[11,"from_bits","","",39,[[["i64x8"]],["i8x64"]]],[11,"from_bits","","",39,[[["f64x8"]],["i8x64"]]],[11,"from_bits","","",39,[[["m1x8"]],["i8x64"]]],[11,"from_bits","","",39,[[["u32x16"]],["i8x64"]]],[11,"from_bits","","",39,[[["i32x16"]],["i8x64"]]],[11,"from_bits","","",39,[[["f32x16"]],["i8x64"]]],[11,"from_bits","","",39,[[["m1x16"]],["i8x64"]]],[11,"from_bits","","",39,[[["u16x32"]],["i8x64"]]],[11,"from_bits","","",39,[[["i16x32"]],["i8x64"]]],[11,"from_bits","","",39,[[["m1x32"]],["i8x64"]]],[11,"from_bits","","",39,[[["u8x64"]],["i8x64"]]],[11,"from_bits","","",39,[[["m1x64"]],["i8x64"]]],[11,"from_bits","","",40,[[["u64x8"]],["u8x64"]]],[11,"from_bits","","",40,[[["i64x8"]],["u8x64"]]],[11,"from_bits","","",40,[[["f64x8"]],["u8x64"]]],[11,"from_bits","","",40,[[["m1x8"]],["u8x64"]]],[11,"from_bits","","",40,[[["u32x16"]],["u8x64"]]],[11,"from_bits","","",40,[[["i32x16"]],["u8x64"]]],[11,"from_bits","","",40,[[["f32x16"]],["u8x64"]]],[11,"from_bits","","",40,[[["m1x16"]],["u8x64"]]],[11,"from_bits","","",40,[[["u16x32"]],["u8x64"]]],[11,"from_bits","","",40,[[["i16x32"]],["u8x64"]]],[11,"from_bits","","",40,[[["m1x32"]],["u8x64"]]],[11,"from_bits","","",40,[[["i8x64"]],["u8x64"]]],[11,"from_bits","","",40,[[["m1x64"]],["u8x64"]]],[11,"from_bits","","",42,[[["u64x8"]],["i16x32"]]],[11,"from_bits","","",42,[[["i64x8"]],["i16x32"]]],[11,"from_bits","","",42,[[["f64x8"]],["i16x32"]]],[11,"from_bits","","",42,[[["m1x8"]],["i16x32"]]],[11,"from_bits","","",42,[[["u32x16"]],["i16x32"]]],[11,"from_bits","","",42,[[["i32x16"]],["i16x32"]]],[11,"from_bits","","",42,[[["f32x16"]],["i16x32"]]],[11,"from_bits","","",42,[[["m1x16"]],["i16x32"]]],[11,"from_bits","","",42,[[["u16x32"]],["i16x32"]]],[11,"from_bits","","",42,[[["m1x32"]],["i16x32"]]],[11,"from_bits","","",42,[[["i8x64"]],["i16x32"]]],[11,"from_bits","","",42,[[["u8x64"]],["i16x32"]]],[11,"from_bits","","",42,[[["m1x64"]],["i16x32"]]],[11,"from_bits","","",43,[[["u64x8"]],["u16x32"]]],[11,"from_bits","","",43,[[["i64x8"]],["u16x32"]]],[11,"from_bits","","",43,[[["f64x8"]],["u16x32"]]],[11,"from_bits","","",43,[[["m1x8"]],["u16x32"]]],[11,"from_bits","","",43,[[["u32x16"]],["u16x32"]]],[11,"from_bits","","",43,[[["i32x16"]],["u16x32"]]],[11,"from_bits","","",43,[[["f32x16"]],["u16x32"]]],[11,"from_bits","","",43,[[["m1x16"]],["u16x32"]]],[11,"from_bits","","",43,[[["i16x32"]],["u16x32"]]],[11,"from_bits","","",43,[[["m1x32"]],["u16x32"]]],[11,"from_bits","","",43,[[["i8x64"]],["u16x32"]]],[11,"from_bits","","",43,[[["u8x64"]],["u16x32"]]],[11,"from_bits","","",43,[[["m1x64"]],["u16x32"]]],[11,"from_bits","","",45,[[["u64x8"]],["i32x16"]]],[11,"from_bits","","",45,[[["i64x8"]],["i32x16"]]],[11,"from_bits","","",45,[[["f64x8"]],["i32x16"]]],[11,"from_bits","","",45,[[["m1x8"]],["i32x16"]]],[11,"from_bits","","",45,[[["u32x16"]],["i32x16"]]],[11,"from_bits","","",45,[[["f32x16"]],["i32x16"]]],[11,"from_bits","","",45,[[["m1x16"]],["i32x16"]]],[11,"from_bits","","",45,[[["u16x32"]],["i32x16"]]],[11,"from_bits","","",45,[[["i16x32"]],["i32x16"]]],[11,"from_bits","","",45,[[["m1x32"]],["i32x16"]]],[11,"from_bits","","",45,[[["i8x64"]],["i32x16"]]],[11,"from_bits","","",45,[[["u8x64"]],["i32x16"]]],[11,"from_bits","","",45,[[["m1x64"]],["i32x16"]]],[11,"from_bits","","",46,[[["u64x8"]],["u32x16"]]],[11,"from_bits","","",46,[[["i64x8"]],["u32x16"]]],[11,"from_bits","","",46,[[["f64x8"]],["u32x16"]]],[11,"from_bits","","",46,[[["m1x8"]],["u32x16"]]],[11,"from_bits","","",46,[[["i32x16"]],["u32x16"]]],[11,"from_bits","","",46,[[["f32x16"]],["u32x16"]]],[11,"from_bits","","",46,[[["m1x16"]],["u32x16"]]],[11,"from_bits","","",46,[[["u16x32"]],["u32x16"]]],[11,"from_bits","","",46,[[["i16x32"]],["u32x16"]]],[11,"from_bits","","",46,[[["m1x32"]],["u32x16"]]],[11,"from_bits","","",46,[[["i8x64"]],["u32x16"]]],[11,"from_bits","","",46,[[["u8x64"]],["u32x16"]]],[11,"from_bits","","",46,[[["m1x64"]],["u32x16"]]],[11,"from_bits","","",47,[[["u64x8"]],["f32x16"]]],[11,"from_bits","","",47,[[["i64x8"]],["f32x16"]]],[11,"from_bits","","",47,[[["f64x8"]],["f32x16"]]],[11,"from_bits","","",47,[[["m1x8"]],["f32x16"]]],[11,"from_bits","","",47,[[["u32x16"]],["f32x16"]]],[11,"from_bits","","",47,[[["i32x16"]],["f32x16"]]],[11,"from_bits","","",47,[[["m1x16"]],["f32x16"]]],[11,"from_bits","","",47,[[["u16x32"]],["f32x16"]]],[11,"from_bits","","",47,[[["i16x32"]],["f32x16"]]],[11,"from_bits","","",47,[[["m1x32"]],["f32x16"]]],[11,"from_bits","","",47,[[["i8x64"]],["f32x16"]]],[11,"from_bits","","",47,[[["u8x64"]],["f32x16"]]],[11,"from_bits","","",47,[[["m1x64"]],["f32x16"]]],[11,"from_bits","","",49,[[["u64x8"]],["i64x8"]]],[11,"from_bits","","",49,[[["f64x8"]],["i64x8"]]],[11,"from_bits","","",49,[[["m1x8"]],["i64x8"]]],[11,"from_bits","","",49,[[["u32x16"]],["i64x8"]]],[11,"from_bits","","",49,[[["i32x16"]],["i64x8"]]],[11,"from_bits","","",49,[[["f32x16"]],["i64x8"]]],[11,"from_bits","","",49,[[["m1x16"]],["i64x8"]]],[11,"from_bits","","",49,[[["u16x32"]],["i64x8"]]],[11,"from_bits","","",49,[[["i16x32"]],["i64x8"]]],[11,"from_bits","","",49,[[["m1x32"]],["i64x8"]]],[11,"from_bits","","",49,[[["i8x64"]],["i64x8"]]],[11,"from_bits","","",49,[[["u8x64"]],["i64x8"]]],[11,"from_bits","","",49,[[["m1x64"]],["i64x8"]]],[11,"from_bits","","",50,[[["i64x8"]],["u64x8"]]],[11,"from_bits","","",50,[[["f64x8"]],["u64x8"]]],[11,"from_bits","","",50,[[["m1x8"]],["u64x8"]]],[11,"from_bits","","",50,[[["u32x16"]],["u64x8"]]],[11,"from_bits","","",50,[[["i32x16"]],["u64x8"]]],[11,"from_bits","","",50,[[["f32x16"]],["u64x8"]]],[11,"from_bits","","",50,[[["m1x16"]],["u64x8"]]],[11,"from_bits","","",50,[[["u16x32"]],["u64x8"]]],[11,"from_bits","","",50,[[["i16x32"]],["u64x8"]]],[11,"from_bits","","",50,[[["m1x32"]],["u64x8"]]],[11,"from_bits","","",50,[[["i8x64"]],["u64x8"]]],[11,"from_bits","","",50,[[["u8x64"]],["u64x8"]]],[11,"from_bits","","",50,[[["m1x64"]],["u64x8"]]],[11,"from_bits","","",51,[[["u64x8"]],["f64x8"]]],[11,"from_bits","","",51,[[["i64x8"]],["f64x8"]]],[11,"from_bits","","",51,[[["m1x8"]],["f64x8"]]],[11,"from_bits","","",51,[[["u32x16"]],["f64x8"]]],[11,"from_bits","","",51,[[["i32x16"]],["f64x8"]]],[11,"from_bits","","",51,[[["f32x16"]],["f64x8"]]],[11,"from_bits","","",51,[[["m1x16"]],["f64x8"]]],[11,"from_bits","","",51,[[["u16x32"]],["f64x8"]]],[11,"from_bits","","",51,[[["i16x32"]],["f64x8"]]],[11,"from_bits","","",51,[[["m1x32"]],["f64x8"]]],[11,"from_bits","","",51,[[["i8x64"]],["f64x8"]]],[11,"from_bits","","",51,[[["u8x64"]],["f64x8"]]],[11,"from_bits","","",51,[[["m1x64"]],["f64x8"]]],[11,"from","","",51,[[["u64x8"]],["f64x8"]]],[11,"from","","",51,[[["i64x8"]],["f64x8"]]],[11,"from","","",51,[[["m1x8"]],["f64x8"]]],[11,"from","","",51,[[["u32x8"]],["f64x8"]]],[11,"from","","",51,[[["i32x8"]],["f64x8"]]],[11,"from","","",51,[[["f32x8"]],["f64x8"]]],[11,"from","","",51,[[["m32x8"]],["f64x8"]]],[11,"from","","",51,[[["u16x8"]],["f64x8"]]],[11,"from","","",51,[[["i16x8"]],["f64x8"]]],[11,"from","","",51,[[["m16x8"]],["f64x8"]]],[11,"from","","",51,[[["u8x8"]],["f64x8"]]],[11,"from","","",51,[[["i8x8"]],["f64x8"]]],[11,"from","","",51,[[["m8x8"]],["f64x8"]]],[11,"from","","",49,[[["u64x8"]],["i64x8"]]],[11,"from","","",49,[[["f64x8"]],["i64x8"]]],[11,"from","","",49,[[["m1x8"]],["i64x8"]]],[11,"from","","",49,[[["u32x8"]],["i64x8"]]],[11,"from","","",49,[[["i32x8"]],["i64x8"]]],[11,"from","","",49,[[["f32x8"]],["i64x8"]]],[11,"from","","",49,[[["m32x8"]],["i64x8"]]],[11,"from","","",49,[[["u16x8"]],["i64x8"]]],[11,"from","","",49,[[["i16x8"]],["i64x8"]]],[11,"from","","",49,[[["m16x8"]],["i64x8"]]],[11,"from","","",49,[[["u8x8"]],["i64x8"]]],[11,"from","","",49,[[["i8x8"]],["i64x8"]]],[11,"from","","",49,[[["m8x8"]],["i64x8"]]],[11,"from","","",50,[[["i64x8"]],["u64x8"]]],[11,"from","","",50,[[["f64x8"]],["u64x8"]]],[11,"from","","",50,[[["m1x8"]],["u64x8"]]],[11,"from","","",50,[[["u32x8"]],["u64x8"]]],[11,"from","","",50,[[["i32x8"]],["u64x8"]]],[11,"from","","",50,[[["f32x8"]],["u64x8"]]],[11,"from","","",50,[[["m32x8"]],["u64x8"]]],[11,"from","","",50,[[["u16x8"]],["u64x8"]]],[11,"from","","",50,[[["i16x8"]],["u64x8"]]],[11,"from","","",50,[[["m16x8"]],["u64x8"]]],[11,"from","","",50,[[["u8x8"]],["u64x8"]]],[11,"from","","",50,[[["i8x8"]],["u64x8"]]],[11,"from","","",50,[[["m8x8"]],["u64x8"]]],[11,"from","","",47,[[["u32x16"]],["f32x16"]]],[11,"from","","",47,[[["i32x16"]],["f32x16"]]],[11,"from","","",47,[[["m1x16"]],["f32x16"]]],[11,"from","","",47,[[["u16x16"]],["f32x16"]]],[11,"from","","",47,[[["i16x16"]],["f32x16"]]],[11,"from","","",47,[[["m16x16"]],["f32x16"]]],[11,"from","","",47,[[["u8x16"]],["f32x16"]]],[11,"from","","",47,[[["i8x16"]],["f32x16"]]],[11,"from","","",47,[[["m8x16"]],["f32x16"]]],[11,"from","","",45,[[["u32x16"]],["i32x16"]]],[11,"from","","",45,[[["f32x16"]],["i32x16"]]],[11,"from","","",45,[[["m1x16"]],["i32x16"]]],[11,"from","","",45,[[["u16x16"]],["i32x16"]]],[11,"from","","",45,[[["i16x16"]],["i32x16"]]],[11,"from","","",45,[[["m16x16"]],["i32x16"]]],[11,"from","","",45,[[["u8x16"]],["i32x16"]]],[11,"from","","",45,[[["i8x16"]],["i32x16"]]],[11,"from","","",45,[[["m8x16"]],["i32x16"]]],[11,"from","","",46,[[["i32x16"]],["u32x16"]]],[11,"from","","",46,[[["f32x16"]],["u32x16"]]],[11,"from","","",46,[[["m1x16"]],["u32x16"]]],[11,"from","","",46,[[["u16x16"]],["u32x16"]]],[11,"from","","",46,[[["i16x16"]],["u32x16"]]],[11,"from","","",46,[[["m16x16"]],["u32x16"]]],[11,"from","","",46,[[["u8x16"]],["u32x16"]]],[11,"from","","",46,[[["i8x16"]],["u32x16"]]],[11,"from","","",46,[[["m8x16"]],["u32x16"]]],[11,"from","","",42,[[["u16x32"]],["i16x32"]]],[11,"from","","",42,[[["u8x32"]],["i16x32"]]],[11,"from","","",42,[[["i8x32"]],["i16x32"]]],[11,"from","","",42,[[["m1x32"]],["i16x32"]]],[11,"from","","",42,[[["m8x32"]],["i16x32"]]],[11,"from","","",43,[[["i16x32"]],["u16x32"]]],[11,"from","","",43,[[["u8x32"]],["u16x32"]]],[11,"from","","",43,[[["i8x32"]],["u16x32"]]],[11,"from","","",43,[[["m1x32"]],["u16x32"]]],[11,"from","","",43,[[["m8x32"]],["u16x32"]]],[11,"from","","",39,[[["u8x64"]],["i8x64"]]],[11,"from","","",39,[[["m1x64"]],["i8x64"]]],[11,"from","","",40,[[["i8x64"]],["u8x64"]]],[11,"from","","",40,[[["m1x64"]],["u8x64"]]],[11,"from","","",44,[[["m8x32"]],["m1x32"]]],[11,"from","","",48,[[["m16x16"]],["m1x16"]]],[11,"from","","",48,[[["m8x16"]],["m1x16"]]],[11,"from","","",52,[[["m32x8"]],["m1x8"]]],[11,"from","","",52,[[["m16x8"]],["m1x8"]]],[11,"from","","",52,[[["m8x8"]],["m1x8"]]],[11,"clone","","",53,[[["self"]],["i8x8"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",53,[[["self"],["i8x8"]],["option",["ordering"]]]],[11,"lt","","",53,[[["self"],["i8x8"]],["bool"]]],[11,"le","","",53,[[["self"],["i8x8"]],["bool"]]],[11,"gt","","",53,[[["self"],["i8x8"]],["bool"]]],[11,"ge","","",53,[[["self"],["i8x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",53,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",53,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",53,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",53,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",53,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["i8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",53,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",53,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",53,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",53,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"eq","","Lane-wise equality comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",53,[[["self"],["i8x8"]],["m8x8"]]],[11,"hash","","",53,[[["self"],["h"]]]],[11,"add","","",53,[[["self"],["self"]],["self"]]],[11,"sub","","",53,[[["self"],["self"]],["self"]]],[11,"mul","","",53,[[["self"],["self"]],["self"]]],[11,"div","","",53,[[["self"],["self"]],["self"]]],[11,"rem","","",53,[[["self"],["self"]],["self"]]],[11,"add_assign","","",53,[[["self"],["self"]]]],[11,"sub_assign","","",53,[[["self"],["self"]]]],[11,"mul_assign","","",53,[[["self"],["self"]]]],[11,"div_assign","","",53,[[["self"],["self"]]]],[11,"rem_assign","","",53,[[["self"],["self"]]]],[11,"add","","",53,[[["self"],["i8"]],["self"]]],[11,"sub","","",53,[[["self"],["i8"]],["self"]]],[11,"mul","","",53,[[["self"],["i8"]],["self"]]],[11,"div","","",53,[[["self"],["i8"]],["self"]]],[11,"rem","","",53,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",53,[[["self"],["i8"]]]],[11,"sub_assign","","",53,[[["self"],["i8"]]]],[11,"mul_assign","","",53,[[["self"],["i8"]]]],[11,"div_assign","","",53,[[["self"],["i8"]]]],[11,"rem_assign","","",53,[[["self"],["i8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",53,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",53,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",53,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",53,[[["self"]],["i8"]]],[11,"neg","","",53,[[["self"]],["self"]]],[11,"not","","",53,[[["self"]],["self"]]],[11,"bitxor","","",53,[[["self"],["self"]],["self"]]],[11,"bitand","","",53,[[["self"],["self"]],["self"]]],[11,"bitor","","",53,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",53,[[["self"],["self"]]]],[11,"bitor_assign","","",53,[[["self"],["self"]]]],[11,"bitxor_assign","","",53,[[["self"],["self"]]]],[11,"bitxor","","",53,[[["self"],["i8"]],["self"]]],[11,"bitand","","",53,[[["self"],["i8"]],["self"]]],[11,"bitor","","",53,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",53,[[["self"],["i8"]]]],[11,"bitor_assign","","",53,[[["self"],["i8"]]]],[11,"bitxor_assign","","",53,[[["self"],["i8"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",53,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",53,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",53,[[["self"]],["i8"]]],[11,"shl","","",53,[[["self"],["u8"]],["self"]]],[11,"shr","","",53,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["u8"]]]],[11,"shr_assign","","",53,[[["self"],["u8"]]]],[11,"shl","","",53,[[["self"],["u16"]],["self"]]],[11,"shr","","",53,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["u16"]]]],[11,"shr_assign","","",53,[[["self"],["u16"]]]],[11,"shl","","",53,[[["self"],["u32"]],["self"]]],[11,"shr","","",53,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["u32"]]]],[11,"shr_assign","","",53,[[["self"],["u32"]]]],[11,"shl","","",53,[[["self"],["u64"]],["self"]]],[11,"shr","","",53,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["u64"]]]],[11,"shr_assign","","",53,[[["self"],["u64"]]]],[11,"shl","","",53,[[["self"],["usize"]],["self"]]],[11,"shr","","",53,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["usize"]]]],[11,"shr_assign","","",53,[[["self"],["usize"]]]],[11,"shl","","",53,[[["self"],["i8"]],["self"]]],[11,"shr","","",53,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["i8"]]]],[11,"shr_assign","","",53,[[["self"],["i8"]]]],[11,"shl","","",53,[[["self"],["i16"]],["self"]]],[11,"shr","","",53,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["i16"]]]],[11,"shr_assign","","",53,[[["self"],["i16"]]]],[11,"shl","","",53,[[["self"],["i32"]],["self"]]],[11,"shr","","",53,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["i32"]]]],[11,"shr_assign","","",53,[[["self"],["i32"]]]],[11,"shl","","",53,[[["self"],["i64"]],["self"]]],[11,"shr","","",53,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["i64"]]]],[11,"shr_assign","","",53,[[["self"],["i64"]]]],[11,"shl","","",53,[[["self"],["isize"]],["self"]]],[11,"shr","","",53,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["isize"]]]],[11,"shr_assign","","",53,[[["self"],["isize"]]]],[11,"shl","","",53,[[["self"],["self"]],["self"]]],[11,"shr","","",53,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",53,[[["self"],["self"]]]],[11,"shr_assign","","",53,[[["self"],["self"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["self"]],["bool"]]],[11,"ne","","",53,[[["self"],["self"]],["bool"]]],[11,"default","","",53,[[],["self"]]],[11,"min","","Minimum of two vectors.",53,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",53,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",53,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",53,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",53,[[["self"]],["self"]]],[11,"clone","","",54,[[["self"]],["u8x8"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",54,[[["self"],["u8x8"]],["option",["ordering"]]]],[11,"lt","","",54,[[["self"],["u8x8"]],["bool"]]],[11,"le","","",54,[[["self"],["u8x8"]],["bool"]]],[11,"gt","","",54,[[["self"],["u8x8"]],["bool"]]],[11,"ge","","",54,[[["self"],["u8x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",54,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",54,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",54,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",54,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",54,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["u8"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",54,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",54,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"eq","","Lane-wise equality comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",54,[[["self"],["u8x8"]],["m8x8"]]],[11,"hash","","",54,[[["self"],["h"]]]],[11,"add","","",54,[[["self"],["self"]],["self"]]],[11,"sub","","",54,[[["self"],["self"]],["self"]]],[11,"mul","","",54,[[["self"],["self"]],["self"]]],[11,"div","","",54,[[["self"],["self"]],["self"]]],[11,"rem","","",54,[[["self"],["self"]],["self"]]],[11,"add_assign","","",54,[[["self"],["self"]]]],[11,"sub_assign","","",54,[[["self"],["self"]]]],[11,"mul_assign","","",54,[[["self"],["self"]]]],[11,"div_assign","","",54,[[["self"],["self"]]]],[11,"rem_assign","","",54,[[["self"],["self"]]]],[11,"add","","",54,[[["self"],["u8"]],["self"]]],[11,"sub","","",54,[[["self"],["u8"]],["self"]]],[11,"mul","","",54,[[["self"],["u8"]],["self"]]],[11,"div","","",54,[[["self"],["u8"]],["self"]]],[11,"rem","","",54,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",54,[[["self"],["u8"]]]],[11,"sub_assign","","",54,[[["self"],["u8"]]]],[11,"mul_assign","","",54,[[["self"],["u8"]]]],[11,"div_assign","","",54,[[["self"],["u8"]]]],[11,"rem_assign","","",54,[[["self"],["u8"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",54,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",54,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",54,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",54,[[["self"]],["u8"]]],[11,"bitxor","","",54,[[["self"],["u8"]],["self"]]],[11,"bitand","","",54,[[["self"],["u8"]],["self"]]],[11,"bitor","","",54,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["u8"]]]],[11,"bitor_assign","","",54,[[["self"],["u8"]]]],[11,"bitxor_assign","","",54,[[["self"],["u8"]]]],[11,"not","","",54,[[["self"]],["self"]]],[11,"bitxor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand","","",54,[[["self"],["self"]],["self"]]],[11,"bitor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["self"]]]],[11,"bitor_assign","","",54,[[["self"],["self"]]]],[11,"bitxor_assign","","",54,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",54,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",54,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",54,[[["self"]],["u8"]]],[11,"shl","","",54,[[["self"],["u8"]],["self"]]],[11,"shr","","",54,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["u8"]]]],[11,"shr_assign","","",54,[[["self"],["u8"]]]],[11,"shl","","",54,[[["self"],["u16"]],["self"]]],[11,"shr","","",54,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["u16"]]]],[11,"shr_assign","","",54,[[["self"],["u16"]]]],[11,"shl","","",54,[[["self"],["u32"]],["self"]]],[11,"shr","","",54,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["u32"]]]],[11,"shr_assign","","",54,[[["self"],["u32"]]]],[11,"shl","","",54,[[["self"],["u64"]],["self"]]],[11,"shr","","",54,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["u64"]]]],[11,"shr_assign","","",54,[[["self"],["u64"]]]],[11,"shl","","",54,[[["self"],["usize"]],["self"]]],[11,"shr","","",54,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["usize"]]]],[11,"shr_assign","","",54,[[["self"],["usize"]]]],[11,"shl","","",54,[[["self"],["i8"]],["self"]]],[11,"shr","","",54,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["i8"]]]],[11,"shr_assign","","",54,[[["self"],["i8"]]]],[11,"shl","","",54,[[["self"],["i16"]],["self"]]],[11,"shr","","",54,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["i16"]]]],[11,"shr_assign","","",54,[[["self"],["i16"]]]],[11,"shl","","",54,[[["self"],["i32"]],["self"]]],[11,"shr","","",54,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["i32"]]]],[11,"shr_assign","","",54,[[["self"],["i32"]]]],[11,"shl","","",54,[[["self"],["i64"]],["self"]]],[11,"shr","","",54,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["i64"]]]],[11,"shr_assign","","",54,[[["self"],["i64"]]]],[11,"shl","","",54,[[["self"],["isize"]],["self"]]],[11,"shr","","",54,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["isize"]]]],[11,"shr_assign","","",54,[[["self"],["isize"]]]],[11,"shl","","",54,[[["self"],["self"]],["self"]]],[11,"shr","","",54,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",54,[[["self"],["self"]]]],[11,"shr_assign","","",54,[[["self"],["self"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["self"]],["bool"]]],[11,"ne","","",54,[[["self"],["self"]],["bool"]]],[11,"default","","",54,[[],["self"]]],[11,"min","","Minimum of two vectors.",54,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",54,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",54,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",54,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",54,[[["self"]],["self"]]],[11,"clone","","",55,[[["self"]],["m8x8"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",55,[[["self"],["m8x8"]],["option",["ordering"]]]],[11,"lt","","",55,[[["self"],["m8x8"]],["bool"]]],[11,"le","","",55,[[["self"],["m8x8"]],["bool"]]],[11,"gt","","",55,[[["self"],["m8x8"]],["bool"]]],[11,"ge","","",55,[[["self"],["m8x8"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",55,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",55,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",55,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",55,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",55,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",55,[[["self"]],["self"]]],[11,"bitxor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand","","",55,[[["self"],["self"]],["self"]]],[11,"bitor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["self"]]]],[11,"bitor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor","","",55,[[["self"],["bool"]],["self"]]],[11,"bitand","","",55,[[["self"],["bool"]],["self"]]],[11,"bitor","","",55,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["bool"]]]],[11,"bitor_assign","","",55,[[["self"],["bool"]]]],[11,"bitxor_assign","","",55,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",55,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",55,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",55,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",55,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",55,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",55,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",55,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",55,[[["self"],["m8x8"]],["m8x8"]]],[11,"eq","","",55,[[["self"],["self"]],["bool"]]],[11,"ne","","",55,[[["self"],["self"]],["bool"]]],[11,"default","","",55,[[],["self"]]],[11,"clone","","",56,[[["self"]],["i16x4"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",56,[[["self"],["i16x4"]],["option",["ordering"]]]],[11,"lt","","",56,[[["self"],["i16x4"]],["bool"]]],[11,"le","","",56,[[["self"],["i16x4"]],["bool"]]],[11,"gt","","",56,[[["self"],["i16x4"]],["bool"]]],[11,"ge","","",56,[[["self"],["i16x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",56,[[["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",56,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",56,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",56,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",56,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["i16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",56,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",56,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"eq","","Lane-wise equality comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",56,[[["self"],["i16x4"]],["m16x4"]]],[11,"hash","","",56,[[["self"],["h"]]]],[11,"add","","",56,[[["self"],["self"]],["self"]]],[11,"sub","","",56,[[["self"],["self"]],["self"]]],[11,"mul","","",56,[[["self"],["self"]],["self"]]],[11,"div","","",56,[[["self"],["self"]],["self"]]],[11,"rem","","",56,[[["self"],["self"]],["self"]]],[11,"add_assign","","",56,[[["self"],["self"]]]],[11,"sub_assign","","",56,[[["self"],["self"]]]],[11,"mul_assign","","",56,[[["self"],["self"]]]],[11,"div_assign","","",56,[[["self"],["self"]]]],[11,"rem_assign","","",56,[[["self"],["self"]]]],[11,"add","","",56,[[["self"],["i16"]],["self"]]],[11,"sub","","",56,[[["self"],["i16"]],["self"]]],[11,"mul","","",56,[[["self"],["i16"]],["self"]]],[11,"div","","",56,[[["self"],["i16"]],["self"]]],[11,"rem","","",56,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",56,[[["self"],["i16"]]]],[11,"sub_assign","","",56,[[["self"],["i16"]]]],[11,"mul_assign","","",56,[[["self"],["i16"]]]],[11,"div_assign","","",56,[[["self"],["i16"]]]],[11,"rem_assign","","",56,[[["self"],["i16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",56,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",56,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",56,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",56,[[["self"]],["i16"]]],[11,"neg","","",56,[[["self"]],["self"]]],[11,"not","","",56,[[["self"]],["self"]]],[11,"bitxor","","",56,[[["self"],["self"]],["self"]]],[11,"bitand","","",56,[[["self"],["self"]],["self"]]],[11,"bitor","","",56,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",56,[[["self"],["self"]]]],[11,"bitor_assign","","",56,[[["self"],["self"]]]],[11,"bitxor_assign","","",56,[[["self"],["self"]]]],[11,"bitxor","","",56,[[["self"],["i16"]],["self"]]],[11,"bitand","","",56,[[["self"],["i16"]],["self"]]],[11,"bitor","","",56,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",56,[[["self"],["i16"]]]],[11,"bitor_assign","","",56,[[["self"],["i16"]]]],[11,"bitxor_assign","","",56,[[["self"],["i16"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",56,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",56,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",56,[[["self"]],["i16"]]],[11,"shl","","",56,[[["self"],["u8"]],["self"]]],[11,"shr","","",56,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["u8"]]]],[11,"shr_assign","","",56,[[["self"],["u8"]]]],[11,"shl","","",56,[[["self"],["u16"]],["self"]]],[11,"shr","","",56,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["u16"]]]],[11,"shr_assign","","",56,[[["self"],["u16"]]]],[11,"shl","","",56,[[["self"],["u32"]],["self"]]],[11,"shr","","",56,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["u32"]]]],[11,"shr_assign","","",56,[[["self"],["u32"]]]],[11,"shl","","",56,[[["self"],["u64"]],["self"]]],[11,"shr","","",56,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["u64"]]]],[11,"shr_assign","","",56,[[["self"],["u64"]]]],[11,"shl","","",56,[[["self"],["usize"]],["self"]]],[11,"shr","","",56,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["usize"]]]],[11,"shr_assign","","",56,[[["self"],["usize"]]]],[11,"shl","","",56,[[["self"],["i8"]],["self"]]],[11,"shr","","",56,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["i8"]]]],[11,"shr_assign","","",56,[[["self"],["i8"]]]],[11,"shl","","",56,[[["self"],["i16"]],["self"]]],[11,"shr","","",56,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["i16"]]]],[11,"shr_assign","","",56,[[["self"],["i16"]]]],[11,"shl","","",56,[[["self"],["i32"]],["self"]]],[11,"shr","","",56,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["i32"]]]],[11,"shr_assign","","",56,[[["self"],["i32"]]]],[11,"shl","","",56,[[["self"],["i64"]],["self"]]],[11,"shr","","",56,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["i64"]]]],[11,"shr_assign","","",56,[[["self"],["i64"]]]],[11,"shl","","",56,[[["self"],["isize"]],["self"]]],[11,"shr","","",56,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["isize"]]]],[11,"shr_assign","","",56,[[["self"],["isize"]]]],[11,"shl","","",56,[[["self"],["self"]],["self"]]],[11,"shr","","",56,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["self"]]]],[11,"shr_assign","","",56,[[["self"],["self"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["self"]],["bool"]]],[11,"ne","","",56,[[["self"],["self"]],["bool"]]],[11,"default","","",56,[[],["self"]]],[11,"min","","Minimum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",56,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",56,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",56,[[["self"]],["self"]]],[11,"clone","","",57,[[["self"]],["u16x4"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",57,[[["self"],["u16x4"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["u16x4"]],["bool"]]],[11,"le","","",57,[[["self"],["u16x4"]],["bool"]]],[11,"gt","","",57,[[["self"],["u16x4"]],["bool"]]],[11,"ge","","",57,[[["self"],["u16x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",57,[[["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",57,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",57,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",57,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",57,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["u16"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",57,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",57,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",57,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",57,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"eq","","Lane-wise equality comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",57,[[["self"],["u16x4"]],["m16x4"]]],[11,"hash","","",57,[[["self"],["h"]]]],[11,"add","","",57,[[["self"],["self"]],["self"]]],[11,"sub","","",57,[[["self"],["self"]],["self"]]],[11,"mul","","",57,[[["self"],["self"]],["self"]]],[11,"div","","",57,[[["self"],["self"]],["self"]]],[11,"rem","","",57,[[["self"],["self"]],["self"]]],[11,"add_assign","","",57,[[["self"],["self"]]]],[11,"sub_assign","","",57,[[["self"],["self"]]]],[11,"mul_assign","","",57,[[["self"],["self"]]]],[11,"div_assign","","",57,[[["self"],["self"]]]],[11,"rem_assign","","",57,[[["self"],["self"]]]],[11,"add","","",57,[[["self"],["u16"]],["self"]]],[11,"sub","","",57,[[["self"],["u16"]],["self"]]],[11,"mul","","",57,[[["self"],["u16"]],["self"]]],[11,"div","","",57,[[["self"],["u16"]],["self"]]],[11,"rem","","",57,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",57,[[["self"],["u16"]]]],[11,"sub_assign","","",57,[[["self"],["u16"]]]],[11,"mul_assign","","",57,[[["self"],["u16"]]]],[11,"div_assign","","",57,[[["self"],["u16"]]]],[11,"rem_assign","","",57,[[["self"],["u16"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",57,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",57,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",57,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",57,[[["self"]],["u16"]]],[11,"bitxor","","",57,[[["self"],["u16"]],["self"]]],[11,"bitand","","",57,[[["self"],["u16"]],["self"]]],[11,"bitor","","",57,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["u16"]]]],[11,"bitor_assign","","",57,[[["self"],["u16"]]]],[11,"bitxor_assign","","",57,[[["self"],["u16"]]]],[11,"not","","",57,[[["self"]],["self"]]],[11,"bitxor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand","","",57,[[["self"],["self"]],["self"]]],[11,"bitor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["self"]]]],[11,"bitor_assign","","",57,[[["self"],["self"]]]],[11,"bitxor_assign","","",57,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",57,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",57,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",57,[[["self"]],["u16"]]],[11,"shl","","",57,[[["self"],["u8"]],["self"]]],[11,"shr","","",57,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["u8"]]]],[11,"shr_assign","","",57,[[["self"],["u8"]]]],[11,"shl","","",57,[[["self"],["u16"]],["self"]]],[11,"shr","","",57,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["u16"]]]],[11,"shr_assign","","",57,[[["self"],["u16"]]]],[11,"shl","","",57,[[["self"],["u32"]],["self"]]],[11,"shr","","",57,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["u32"]]]],[11,"shr_assign","","",57,[[["self"],["u32"]]]],[11,"shl","","",57,[[["self"],["u64"]],["self"]]],[11,"shr","","",57,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["u64"]]]],[11,"shr_assign","","",57,[[["self"],["u64"]]]],[11,"shl","","",57,[[["self"],["usize"]],["self"]]],[11,"shr","","",57,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["usize"]]]],[11,"shr_assign","","",57,[[["self"],["usize"]]]],[11,"shl","","",57,[[["self"],["i8"]],["self"]]],[11,"shr","","",57,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["i8"]]]],[11,"shr_assign","","",57,[[["self"],["i8"]]]],[11,"shl","","",57,[[["self"],["i16"]],["self"]]],[11,"shr","","",57,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["i16"]]]],[11,"shr_assign","","",57,[[["self"],["i16"]]]],[11,"shl","","",57,[[["self"],["i32"]],["self"]]],[11,"shr","","",57,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["i32"]]]],[11,"shr_assign","","",57,[[["self"],["i32"]]]],[11,"shl","","",57,[[["self"],["i64"]],["self"]]],[11,"shr","","",57,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["i64"]]]],[11,"shr_assign","","",57,[[["self"],["i64"]]]],[11,"shl","","",57,[[["self"],["isize"]],["self"]]],[11,"shr","","",57,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["isize"]]]],[11,"shr_assign","","",57,[[["self"],["isize"]]]],[11,"shl","","",57,[[["self"],["self"]],["self"]]],[11,"shr","","",57,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",57,[[["self"],["self"]]]],[11,"shr_assign","","",57,[[["self"],["self"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["self"]],["bool"]]],[11,"ne","","",57,[[["self"],["self"]],["bool"]]],[11,"default","","",57,[[],["self"]]],[11,"min","","Minimum of two vectors.",57,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",57,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",57,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",57,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",57,[[["self"]],["self"]]],[11,"clone","","",58,[[["self"]],["m16x4"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",58,[[["self"],["m16x4"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["m16x4"]],["bool"]]],[11,"le","","",58,[[["self"],["m16x4"]],["bool"]]],[11,"gt","","",58,[[["self"],["m16x4"]],["bool"]]],[11,"ge","","",58,[[["self"],["m16x4"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",58,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",58,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",58,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",58,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",58,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",58,[[["self"]],["self"]]],[11,"bitxor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand","","",58,[[["self"],["self"]],["self"]]],[11,"bitor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["self"]]]],[11,"bitor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor","","",58,[[["self"],["bool"]],["self"]]],[11,"bitand","","",58,[[["self"],["bool"]],["self"]]],[11,"bitor","","",58,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["bool"]]]],[11,"bitor_assign","","",58,[[["self"],["bool"]]]],[11,"bitxor_assign","","",58,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",58,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",58,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",58,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",58,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",58,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",58,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",58,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",58,[[["self"],["m16x4"]],["m16x4"]]],[11,"eq","","",58,[[["self"],["self"]],["bool"]]],[11,"ne","","",58,[[["self"],["self"]],["bool"]]],[11,"default","","",58,[[],["self"]]],[11,"clone","","",59,[[["self"]],["i32x2"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",59,[[["self"],["i32x2"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["i32x2"]],["bool"]]],[11,"le","","",59,[[["self"],["i32x2"]],["bool"]]],[11,"gt","","",59,[[["self"],["i32x2"]],["bool"]]],[11,"ge","","",59,[[["self"],["i32x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",59,[[["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",59,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",59,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",59,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",59,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["i32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",59,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",59,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"eq","","Lane-wise equality comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",59,[[["self"],["i32x2"]],["m32x2"]]],[11,"hash","","",59,[[["self"],["h"]]]],[11,"add","","",59,[[["self"],["self"]],["self"]]],[11,"sub","","",59,[[["self"],["self"]],["self"]]],[11,"mul","","",59,[[["self"],["self"]],["self"]]],[11,"div","","",59,[[["self"],["self"]],["self"]]],[11,"rem","","",59,[[["self"],["self"]],["self"]]],[11,"add_assign","","",59,[[["self"],["self"]]]],[11,"sub_assign","","",59,[[["self"],["self"]]]],[11,"mul_assign","","",59,[[["self"],["self"]]]],[11,"div_assign","","",59,[[["self"],["self"]]]],[11,"rem_assign","","",59,[[["self"],["self"]]]],[11,"add","","",59,[[["self"],["i32"]],["self"]]],[11,"sub","","",59,[[["self"],["i32"]],["self"]]],[11,"mul","","",59,[[["self"],["i32"]],["self"]]],[11,"div","","",59,[[["self"],["i32"]],["self"]]],[11,"rem","","",59,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",59,[[["self"],["i32"]]]],[11,"sub_assign","","",59,[[["self"],["i32"]]]],[11,"mul_assign","","",59,[[["self"],["i32"]]]],[11,"div_assign","","",59,[[["self"],["i32"]]]],[11,"rem_assign","","",59,[[["self"],["i32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",59,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",59,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",59,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",59,[[["self"]],["i32"]]],[11,"neg","","",59,[[["self"]],["self"]]],[11,"not","","",59,[[["self"]],["self"]]],[11,"bitxor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand","","",59,[[["self"],["self"]],["self"]]],[11,"bitor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["self"]]]],[11,"bitor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor","","",59,[[["self"],["i32"]],["self"]]],[11,"bitand","","",59,[[["self"],["i32"]],["self"]]],[11,"bitor","","",59,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["i32"]]]],[11,"bitor_assign","","",59,[[["self"],["i32"]]]],[11,"bitxor_assign","","",59,[[["self"],["i32"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",59,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",59,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",59,[[["self"]],["i32"]]],[11,"shl","","",59,[[["self"],["u8"]],["self"]]],[11,"shr","","",59,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u8"]]]],[11,"shr_assign","","",59,[[["self"],["u8"]]]],[11,"shl","","",59,[[["self"],["u16"]],["self"]]],[11,"shr","","",59,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u16"]]]],[11,"shr_assign","","",59,[[["self"],["u16"]]]],[11,"shl","","",59,[[["self"],["u32"]],["self"]]],[11,"shr","","",59,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u32"]]]],[11,"shr_assign","","",59,[[["self"],["u32"]]]],[11,"shl","","",59,[[["self"],["u64"]],["self"]]],[11,"shr","","",59,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u64"]]]],[11,"shr_assign","","",59,[[["self"],["u64"]]]],[11,"shl","","",59,[[["self"],["usize"]],["self"]]],[11,"shr","","",59,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["usize"]]]],[11,"shr_assign","","",59,[[["self"],["usize"]]]],[11,"shl","","",59,[[["self"],["i8"]],["self"]]],[11,"shr","","",59,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["i8"]]]],[11,"shr_assign","","",59,[[["self"],["i8"]]]],[11,"shl","","",59,[[["self"],["i16"]],["self"]]],[11,"shr","","",59,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["i16"]]]],[11,"shr_assign","","",59,[[["self"],["i16"]]]],[11,"shl","","",59,[[["self"],["i32"]],["self"]]],[11,"shr","","",59,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["i32"]]]],[11,"shr_assign","","",59,[[["self"],["i32"]]]],[11,"shl","","",59,[[["self"],["i64"]],["self"]]],[11,"shr","","",59,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["i64"]]]],[11,"shr_assign","","",59,[[["self"],["i64"]]]],[11,"shl","","",59,[[["self"],["isize"]],["self"]]],[11,"shr","","",59,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["isize"]]]],[11,"shr_assign","","",59,[[["self"],["isize"]]]],[11,"shl","","",59,[[["self"],["self"]],["self"]]],[11,"shr","","",59,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["self"]]]],[11,"shr_assign","","",59,[[["self"],["self"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["self"]],["bool"]]],[11,"ne","","",59,[[["self"],["self"]],["bool"]]],[11,"default","","",59,[[],["self"]]],[11,"min","","Minimum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",59,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"clone","","",60,[[["self"]],["u32x2"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",60,[[["self"],["u32x2"]],["option",["ordering"]]]],[11,"lt","","",60,[[["self"],["u32x2"]],["bool"]]],[11,"le","","",60,[[["self"],["u32x2"]],["bool"]]],[11,"gt","","",60,[[["self"],["u32x2"]],["bool"]]],[11,"ge","","",60,[[["self"],["u32x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",60,[[["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",60,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",60,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",60,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",60,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["u32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",60,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",60,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"eq","","Lane-wise equality comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",60,[[["self"],["u32x2"]],["m32x2"]]],[11,"hash","","",60,[[["self"],["h"]]]],[11,"add","","",60,[[["self"],["self"]],["self"]]],[11,"sub","","",60,[[["self"],["self"]],["self"]]],[11,"mul","","",60,[[["self"],["self"]],["self"]]],[11,"div","","",60,[[["self"],["self"]],["self"]]],[11,"rem","","",60,[[["self"],["self"]],["self"]]],[11,"add_assign","","",60,[[["self"],["self"]]]],[11,"sub_assign","","",60,[[["self"],["self"]]]],[11,"mul_assign","","",60,[[["self"],["self"]]]],[11,"div_assign","","",60,[[["self"],["self"]]]],[11,"rem_assign","","",60,[[["self"],["self"]]]],[11,"add","","",60,[[["self"],["u32"]],["self"]]],[11,"sub","","",60,[[["self"],["u32"]],["self"]]],[11,"mul","","",60,[[["self"],["u32"]],["self"]]],[11,"div","","",60,[[["self"],["u32"]],["self"]]],[11,"rem","","",60,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",60,[[["self"],["u32"]]]],[11,"sub_assign","","",60,[[["self"],["u32"]]]],[11,"mul_assign","","",60,[[["self"],["u32"]]]],[11,"div_assign","","",60,[[["self"],["u32"]]]],[11,"rem_assign","","",60,[[["self"],["u32"]]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",60,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",60,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",60,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",60,[[["self"]],["u32"]]],[11,"bitxor","","",60,[[["self"],["u32"]],["self"]]],[11,"bitand","","",60,[[["self"],["u32"]],["self"]]],[11,"bitor","","",60,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",60,[[["self"],["u32"]]]],[11,"bitor_assign","","",60,[[["self"],["u32"]]]],[11,"bitxor_assign","","",60,[[["self"],["u32"]]]],[11,"not","","",60,[[["self"]],["self"]]],[11,"bitxor","","",60,[[["self"],["self"]],["self"]]],[11,"bitand","","",60,[[["self"],["self"]],["self"]]],[11,"bitor","","",60,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",60,[[["self"],["self"]]]],[11,"bitor_assign","","",60,[[["self"],["self"]]]],[11,"bitxor_assign","","",60,[[["self"],["self"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",60,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",60,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",60,[[["self"]],["u32"]]],[11,"shl","","",60,[[["self"],["u8"]],["self"]]],[11,"shr","","",60,[[["self"],["u8"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["u8"]]]],[11,"shr_assign","","",60,[[["self"],["u8"]]]],[11,"shl","","",60,[[["self"],["u16"]],["self"]]],[11,"shr","","",60,[[["self"],["u16"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["u16"]]]],[11,"shr_assign","","",60,[[["self"],["u16"]]]],[11,"shl","","",60,[[["self"],["u32"]],["self"]]],[11,"shr","","",60,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["u32"]]]],[11,"shr_assign","","",60,[[["self"],["u32"]]]],[11,"shl","","",60,[[["self"],["u64"]],["self"]]],[11,"shr","","",60,[[["self"],["u64"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["u64"]]]],[11,"shr_assign","","",60,[[["self"],["u64"]]]],[11,"shl","","",60,[[["self"],["usize"]],["self"]]],[11,"shr","","",60,[[["self"],["usize"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["usize"]]]],[11,"shr_assign","","",60,[[["self"],["usize"]]]],[11,"shl","","",60,[[["self"],["i8"]],["self"]]],[11,"shr","","",60,[[["self"],["i8"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["i8"]]]],[11,"shr_assign","","",60,[[["self"],["i8"]]]],[11,"shl","","",60,[[["self"],["i16"]],["self"]]],[11,"shr","","",60,[[["self"],["i16"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["i16"]]]],[11,"shr_assign","","",60,[[["self"],["i16"]]]],[11,"shl","","",60,[[["self"],["i32"]],["self"]]],[11,"shr","","",60,[[["self"],["i32"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["i32"]]]],[11,"shr_assign","","",60,[[["self"],["i32"]]]],[11,"shl","","",60,[[["self"],["i64"]],["self"]]],[11,"shr","","",60,[[["self"],["i64"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["i64"]]]],[11,"shr_assign","","",60,[[["self"],["i64"]]]],[11,"shl","","",60,[[["self"],["isize"]],["self"]]],[11,"shr","","",60,[[["self"],["isize"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["isize"]]]],[11,"shr_assign","","",60,[[["self"],["isize"]]]],[11,"shl","","",60,[[["self"],["self"]],["self"]]],[11,"shr","","",60,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",60,[[["self"],["self"]]]],[11,"shr_assign","","",60,[[["self"],["self"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["self"]],["bool"]]],[11,"ne","","",60,[[["self"],["self"]],["bool"]]],[11,"default","","",60,[[],["self"]]],[11,"min","","Minimum of two vectors.",60,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",60,[[["self"],["self"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",60,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",60,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",60,[[["self"]],["self"]]],[11,"clone","","",61,[[["self"]],["m32x2"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",61,[[["self"],["m32x2"]],["option",["ordering"]]]],[11,"lt","","",61,[[["self"],["m32x2"]],["bool"]]],[11,"le","","",61,[[["self"],["m32x2"]],["bool"]]],[11,"gt","","",61,[[["self"],["m32x2"]],["bool"]]],[11,"ge","","",61,[[["self"],["m32x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",61,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",61,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",61,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",61,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",61,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",61,[[["self"]],["self"]]],[11,"bitxor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand","","",61,[[["self"],["self"]],["self"]]],[11,"bitor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["self"]]]],[11,"bitor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor","","",61,[[["self"],["bool"]],["self"]]],[11,"bitand","","",61,[[["self"],["bool"]],["self"]]],[11,"bitor","","",61,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["bool"]]]],[11,"bitor_assign","","",61,[[["self"],["bool"]]]],[11,"bitxor_assign","","",61,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",61,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",61,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",61,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",61,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",61,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",61,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",61,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",61,[[["self"],["m32x2"]],["m32x2"]]],[11,"eq","","",61,[[["self"],["self"]],["bool"]]],[11,"ne","","",61,[[["self"],["self"]],["bool"]]],[11,"default","","",61,[[],["self"]]],[11,"clone","","",62,[[["self"]],["f32x2"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",62,[[["self"],["f32x2"]],["option",["ordering"]]]],[11,"lt","","",62,[[["self"],["f32x2"]],["bool"]]],[11,"le","","",62,[[["self"],["f32x2"]],["bool"]]],[11,"gt","","",62,[[["self"],["f32x2"]],["bool"]]],[11,"ge","","",62,[[["self"],["f32x2"]],["bool"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",62,[[["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",62,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",62,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",62,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",62,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["f32"]],["self"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",62,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",62,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"eq","","Lane-wise equality comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",62,[[["self"],["f32x2"]],["m32x2"]]],[11,"add","","",62,[[["self"],["self"]],["self"]]],[11,"sub","","",62,[[["self"],["self"]],["self"]]],[11,"mul","","",62,[[["self"],["self"]],["self"]]],[11,"div","","",62,[[["self"],["self"]],["self"]]],[11,"rem","","",62,[[["self"],["self"]],["self"]]],[11,"add_assign","","",62,[[["self"],["self"]]]],[11,"sub_assign","","",62,[[["self"],["self"]]]],[11,"mul_assign","","",62,[[["self"],["self"]]]],[11,"div_assign","","",62,[[["self"],["self"]]]],[11,"rem_assign","","",62,[[["self"],["self"]]]],[11,"add","","",62,[[["self"],["f32"]],["self"]]],[11,"sub","","",62,[[["self"],["f32"]],["self"]]],[11,"mul","","",62,[[["self"],["f32"]],["self"]]],[11,"div","","",62,[[["self"],["f32"]],["self"]]],[11,"rem","","",62,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",62,[[["self"],["f32"]]]],[11,"sub_assign","","",62,[[["self"],["f32"]]]],[11,"mul_assign","","",62,[[["self"],["f32"]]]],[11,"div_assign","","",62,[[["self"],["f32"]]]],[11,"rem_assign","","",62,[[["self"],["f32"]]]],[11,"sum","","Horizontal sum of the vector elements.",62,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",62,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",62,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",62,[[["self"]],["f32"]]],[11,"neg","","",62,[[["self"]],["self"]]],[11,"eq","","",62,[[["self"],["self"]],["bool"]]],[11,"ne","","",62,[[["self"],["self"]],["bool"]]],[11,"default","","",62,[[],["self"]]],[11,"min","","Minimum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"abs","","Absolute-value",62,[[["self"]],["self"]]],[11,"sqrt","","Square-root",62,[[["self"]],["self"]]],[11,"sqrte","","Square-root estimate",62,[[["self"]],["self"]]],[11,"rsqrte","","Reciprocal square-root estimate",62,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",62,[[["self"],["self"],["self"]],["self"]]],[11,"sin","","Sin",62,[[["self"]],["self"]]],[11,"cos","","Cos",62,[[["self"]],["self"]]],[11,"from_bits","","",60,[[["i32x2"]],["u32x2"]]],[11,"from_bits","","",60,[[["f32x2"]],["u32x2"]]],[11,"from_bits","","",60,[[["m32x2"]],["u32x2"]]],[11,"from_bits","","",60,[[["u16x4"]],["u32x2"]]],[11,"from_bits","","",60,[[["i16x4"]],["u32x2"]]],[11,"from_bits","","",60,[[["m16x4"]],["u32x2"]]],[11,"from_bits","","",60,[[["u8x8"]],["u32x2"]]],[11,"from_bits","","",60,[[["i8x8"]],["u32x2"]]],[11,"from_bits","","",60,[[["m8x8"]],["u32x2"]]],[11,"from_bits","","",59,[[["u32x2"]],["i32x2"]]],[11,"from_bits","","",59,[[["f32x2"]],["i32x2"]]],[11,"from_bits","","",59,[[["m32x2"]],["i32x2"]]],[11,"from_bits","","",59,[[["u16x4"]],["i32x2"]]],[11,"from_bits","","",59,[[["i16x4"]],["i32x2"]]],[11,"from_bits","","",59,[[["m16x4"]],["i32x2"]]],[11,"from_bits","","",59,[[["u8x8"]],["i32x2"]]],[11,"from_bits","","",59,[[["i8x8"]],["i32x2"]]],[11,"from_bits","","",59,[[["m8x8"]],["i32x2"]]],[11,"from_bits","","",62,[[["i32x2"]],["f32x2"]]],[11,"from_bits","","",62,[[["u32x2"]],["f32x2"]]],[11,"from_bits","","",62,[[["m32x2"]],["f32x2"]]],[11,"from_bits","","",62,[[["u16x4"]],["f32x2"]]],[11,"from_bits","","",62,[[["i16x4"]],["f32x2"]]],[11,"from_bits","","",62,[[["m16x4"]],["f32x2"]]],[11,"from_bits","","",62,[[["u8x8"]],["f32x2"]]],[11,"from_bits","","",62,[[["i8x8"]],["f32x2"]]],[11,"from_bits","","",62,[[["m8x8"]],["f32x2"]]],[11,"from_bits","","",57,[[["u32x2"]],["u16x4"]]],[11,"from_bits","","",57,[[["i32x2"]],["u16x4"]]],[11,"from_bits","","",57,[[["m32x2"]],["u16x4"]]],[11,"from_bits","","",57,[[["i16x4"]],["u16x4"]]],[11,"from_bits","","",57,[[["m16x4"]],["u16x4"]]],[11,"from_bits","","",57,[[["u8x8"]],["u16x4"]]],[11,"from_bits","","",57,[[["i8x8"]],["u16x4"]]],[11,"from_bits","","",57,[[["m8x8"]],["u16x4"]]],[11,"from_bits","","",56,[[["u32x2"]],["i16x4"]]],[11,"from_bits","","",56,[[["i32x2"]],["i16x4"]]],[11,"from_bits","","",56,[[["m32x2"]],["i16x4"]]],[11,"from_bits","","",56,[[["u16x4"]],["i16x4"]]],[11,"from_bits","","",56,[[["m16x4"]],["i16x4"]]],[11,"from_bits","","",56,[[["u8x8"]],["i16x4"]]],[11,"from_bits","","",56,[[["i8x8"]],["i16x4"]]],[11,"from_bits","","",56,[[["m8x8"]],["i16x4"]]],[11,"from_bits","","",54,[[["u32x2"]],["u8x8"]]],[11,"from_bits","","",54,[[["i32x2"]],["u8x8"]]],[11,"from_bits","","",54,[[["m32x2"]],["u8x8"]]],[11,"from_bits","","",54,[[["u16x4"]],["u8x8"]]],[11,"from_bits","","",54,[[["i16x4"]],["u8x8"]]],[11,"from_bits","","",54,[[["m16x4"]],["u8x8"]]],[11,"from_bits","","",54,[[["i8x8"]],["u8x8"]]],[11,"from_bits","","",54,[[["m8x8"]],["u8x8"]]],[11,"from_bits","","",53,[[["u32x2"]],["i8x8"]]],[11,"from_bits","","",53,[[["i32x2"]],["i8x8"]]],[11,"from_bits","","",53,[[["m32x2"]],["i8x8"]]],[11,"from_bits","","",53,[[["u16x4"]],["i8x8"]]],[11,"from_bits","","",53,[[["i16x4"]],["i8x8"]]],[11,"from_bits","","",53,[[["m16x4"]],["i8x8"]]],[11,"from_bits","","",53,[[["u8x8"]],["i8x8"]]],[11,"from_bits","","",53,[[["m8x8"]],["i8x8"]]],[11,"from","","",62,[[["f64x2"]],["f32x2"]]],[11,"from","","",62,[[["u64x2"]],["f32x2"]]],[11,"from","","",62,[[["i64x2"]],["f32x2"]]],[11,"from","","",62,[[["m64x2"]],["f32x2"]]],[11,"from","","",62,[[["u32x2"]],["f32x2"]]],[11,"from","","",62,[[["i32x2"]],["f32x2"]]],[11,"from","","",62,[[["m32x2"]],["f32x2"]]],[11,"from","","",62,[[["u16x2"]],["f32x2"]]],[11,"from","","",62,[[["i16x2"]],["f32x2"]]],[11,"from","","",62,[[["m16x2"]],["f32x2"]]],[11,"from","","",62,[[["u8x2"]],["f32x2"]]],[11,"from","","",62,[[["i8x2"]],["f32x2"]]],[11,"from","","",62,[[["m8x2"]],["f32x2"]]],[11,"from","","",60,[[["f64x2"]],["u32x2"]]],[11,"from","","",60,[[["u64x2"]],["u32x2"]]],[11,"from","","",60,[[["i64x2"]],["u32x2"]]],[11,"from","","",60,[[["m64x2"]],["u32x2"]]],[11,"from","","",60,[[["f32x2"]],["u32x2"]]],[11,"from","","",60,[[["i32x2"]],["u32x2"]]],[11,"from","","",60,[[["m32x2"]],["u32x2"]]],[11,"from","","",60,[[["u16x2"]],["u32x2"]]],[11,"from","","",60,[[["i16x2"]],["u32x2"]]],[11,"from","","",60,[[["m16x2"]],["u32x2"]]],[11,"from","","",60,[[["u8x2"]],["u32x2"]]],[11,"from","","",60,[[["i8x2"]],["u32x2"]]],[11,"from","","",60,[[["m8x2"]],["u32x2"]]],[11,"from","","",59,[[["f64x2"]],["i32x2"]]],[11,"from","","",59,[[["u64x2"]],["i32x2"]]],[11,"from","","",59,[[["i64x2"]],["i32x2"]]],[11,"from","","",59,[[["m64x2"]],["i32x2"]]],[11,"from","","",59,[[["f32x2"]],["i32x2"]]],[11,"from","","",59,[[["u32x2"]],["i32x2"]]],[11,"from","","",59,[[["m32x2"]],["i32x2"]]],[11,"from","","",59,[[["u16x2"]],["i32x2"]]],[11,"from","","",59,[[["i16x2"]],["i32x2"]]],[11,"from","","",59,[[["m16x2"]],["i32x2"]]],[11,"from","","",59,[[["u8x2"]],["i32x2"]]],[11,"from","","",59,[[["i8x2"]],["i32x2"]]],[11,"from","","",59,[[["m8x2"]],["i32x2"]]],[11,"from","","",57,[[["f64x4"]],["u16x4"]]],[11,"from","","",57,[[["u64x4"]],["u16x4"]]],[11,"from","","",57,[[["i64x4"]],["u16x4"]]],[11,"from","","",57,[[["m64x4"]],["u16x4"]]],[11,"from","","",57,[[["f32x4"]],["u16x4"]]],[11,"from","","",57,[[["i32x4"]],["u16x4"]]],[11,"from","","",57,[[["u32x4"]],["u16x4"]]],[11,"from","","",57,[[["m32x4"]],["u16x4"]]],[11,"from","","",57,[[["i16x4"]],["u16x4"]]],[11,"from","","",57,[[["m16x4"]],["u16x4"]]],[11,"from","","",57,[[["u8x4"]],["u16x4"]]],[11,"from","","",57,[[["i8x4"]],["u16x4"]]],[11,"from","","",57,[[["m8x4"]],["u16x4"]]],[11,"from","","",56,[[["f64x4"]],["i16x4"]]],[11,"from","","",56,[[["u64x4"]],["i16x4"]]],[11,"from","","",56,[[["i64x4"]],["i16x4"]]],[11,"from","","",56,[[["m64x4"]],["i16x4"]]],[11,"from","","",56,[[["f32x4"]],["i16x4"]]],[11,"from","","",56,[[["i32x4"]],["i16x4"]]],[11,"from","","",56,[[["u32x4"]],["i16x4"]]],[11,"from","","",56,[[["m32x4"]],["i16x4"]]],[11,"from","","",56,[[["u16x4"]],["i16x4"]]],[11,"from","","",56,[[["m16x4"]],["i16x4"]]],[11,"from","","",56,[[["u8x4"]],["i16x4"]]],[11,"from","","",56,[[["i8x4"]],["i16x4"]]],[11,"from","","",56,[[["m8x4"]],["i16x4"]]],[11,"from","","",53,[[["f64x8"]],["i8x8"]]],[11,"from","","",53,[[["u64x8"]],["i8x8"]]],[11,"from","","",53,[[["i64x8"]],["i8x8"]]],[11,"from","","",53,[[["m1x8"]],["i8x8"]]],[11,"from","","",53,[[["f32x8"]],["i8x8"]]],[11,"from","","",53,[[["u32x8"]],["i8x8"]]],[11,"from","","",53,[[["i32x8"]],["i8x8"]]],[11,"from","","",53,[[["m32x8"]],["i8x8"]]],[11,"from","","",53,[[["i16x8"]],["i8x8"]]],[11,"from","","",53,[[["u16x8"]],["i8x8"]]],[11,"from","","",53,[[["m16x8"]],["i8x8"]]],[11,"from","","",53,[[["u8x8"]],["i8x8"]]],[11,"from","","",53,[[["m8x8"]],["i8x8"]]],[11,"from","","",54,[[["f64x8"]],["u8x8"]]],[11,"from","","",54,[[["u64x8"]],["u8x8"]]],[11,"from","","",54,[[["i64x8"]],["u8x8"]]],[11,"from","","",54,[[["m1x8"]],["u8x8"]]],[11,"from","","",54,[[["f32x8"]],["u8x8"]]],[11,"from","","",54,[[["u32x8"]],["u8x8"]]],[11,"from","","",54,[[["i32x8"]],["u8x8"]]],[11,"from","","",54,[[["m32x8"]],["u8x8"]]],[11,"from","","",54,[[["i16x8"]],["u8x8"]]],[11,"from","","",54,[[["u16x8"]],["u8x8"]]],[11,"from","","",54,[[["m16x8"]],["u8x8"]]],[11,"from","","",54,[[["i8x8"]],["u8x8"]]],[11,"from","","",54,[[["m8x8"]],["u8x8"]]],[11,"from","","",55,[[["m1x8"]],["m8x8"]]],[11,"from","","",55,[[["m32x8"]],["m8x8"]]],[11,"from","","",55,[[["m16x8"]],["m8x8"]]],[11,"from","","",58,[[["m64x4"]],["m16x4"]]],[11,"from","","",58,[[["m32x4"]],["m16x4"]]],[11,"from","","",58,[[["m8x4"]],["m16x4"]]],[11,"from","","",61,[[["m64x2"]],["m32x2"]]],[11,"from","","",61,[[["m16x2"]],["m32x2"]]],[11,"from","","",61,[[["m8x2"]],["m32x2"]]],[11,"clone","coresimd::arch::powerpc","",63,[[["self"]],["vector_signed_char"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["vector_unsigned_char"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["vector_bool_char"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["vector_signed_short"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["vector_unsigned_short"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["vector_bool_short"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["vector_signed_int"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["vector_unsigned_int"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["vector_bool_int"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["vector_float"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"from_bits","","",63,[[["u64x2"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["i64x2"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["f64x2"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["m64x2"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["u32x4"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["i32x4"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["f32x4"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["m32x4"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["u16x8"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["i16x8"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["m16x8"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["u8x16"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["i8x16"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["m8x16"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_unsigned_char"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_bool_char"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_signed_short"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_unsigned_short"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_bool_short"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_signed_int"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_unsigned_int"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_float"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["vector_bool_int"]],["vector_signed_char"]]],[11,"from_bits","coresimd::simd","",2,[[["vector_signed_char"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_unsigned_char"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_bool_char"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_signed_short"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_unsigned_short"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_bool_short"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_signed_int"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_unsigned_int"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_float"]],["i8x16"]]],[11,"from_bits","","",2,[[["vector_bool_int"]],["i8x16"]]],[11,"from_bits","coresimd::arch::powerpc","",64,[[["u64x2"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["i64x2"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["f64x2"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["m64x2"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["u32x4"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["i32x4"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["f32x4"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["m32x4"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["u16x8"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["i16x8"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["m16x8"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["u8x16"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["i8x16"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["m8x16"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_signed_char"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_bool_char"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_signed_short"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_unsigned_short"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_bool_short"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_signed_int"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_unsigned_int"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_float"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_bool_int"]],["vector_unsigned_char"]]],[11,"from_bits","coresimd::simd","",3,[[["vector_signed_char"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_unsigned_char"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_bool_char"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_signed_short"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_unsigned_short"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_bool_short"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_signed_int"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_unsigned_int"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_float"]],["u8x16"]]],[11,"from_bits","","",3,[[["vector_bool_int"]],["u8x16"]]],[11,"from_bits","coresimd::arch::powerpc","",65,[[["m64x2"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["m32x4"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["m16x8"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["m8x16"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["vector_bool_short"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["vector_bool_int"]],["vector_bool_char"]]],[11,"from_bits","coresimd::simd","",4,[[["vector_bool_char"]],["m8x16"]]],[11,"from_bits","","",4,[[["vector_bool_short"]],["m8x16"]]],[11,"from_bits","","",4,[[["vector_bool_int"]],["m8x16"]]],[11,"from_bits","coresimd::arch::powerpc","",66,[[["u64x2"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["i64x2"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["f64x2"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["m64x2"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["u32x4"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["i32x4"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["f32x4"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["m32x4"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["u16x8"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["i16x8"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["m16x8"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["u8x16"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["i8x16"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["m8x16"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_signed_char"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_bool_char"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_unsigned_short"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_bool_short"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_signed_int"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_unsigned_int"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_float"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_bool_int"]],["vector_signed_short"]]],[11,"from_bits","coresimd::simd","",5,[[["vector_signed_char"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_unsigned_char"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_bool_char"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_signed_short"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_unsigned_short"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_bool_short"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_signed_int"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_unsigned_int"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_float"]],["i16x8"]]],[11,"from_bits","","",5,[[["vector_bool_int"]],["i16x8"]]],[11,"from_bits","coresimd::arch::powerpc","",67,[[["u64x2"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["i64x2"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["f64x2"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["m64x2"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["u32x4"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["i32x4"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["f32x4"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["m32x4"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["u16x8"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["i16x8"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["m16x8"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["u8x16"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["i8x16"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["m8x16"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_signed_char"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_bool_char"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_signed_short"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_bool_short"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_signed_int"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_unsigned_int"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_float"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["vector_bool_int"]],["vector_unsigned_short"]]],[11,"from_bits","coresimd::simd","",6,[[["vector_signed_char"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_unsigned_char"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_bool_char"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_signed_short"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_unsigned_short"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_bool_short"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_signed_int"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_unsigned_int"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_float"]],["u16x8"]]],[11,"from_bits","","",6,[[["vector_bool_int"]],["u16x8"]]],[11,"from_bits","coresimd::arch::powerpc","",68,[[["m64x2"]],["vector_bool_short"]]],[11,"from_bits","","",68,[[["m32x4"]],["vector_bool_short"]]],[11,"from_bits","","",68,[[["m16x8"]],["vector_bool_short"]]],[11,"from_bits","","",68,[[["m8x16"]],["vector_bool_short"]]],[11,"from_bits","","",68,[[["vector_bool_int"]],["vector_bool_short"]]],[11,"from_bits","coresimd::simd","",7,[[["vector_bool_short"]],["m16x8"]]],[11,"from_bits","","",7,[[["vector_bool_int"]],["m16x8"]]],[11,"from_bits","coresimd::arch::powerpc","",69,[[["u64x2"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["i64x2"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["f64x2"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["m64x2"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["u32x4"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["i32x4"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["f32x4"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["m32x4"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["u16x8"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["i16x8"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["m16x8"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["u8x16"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["i8x16"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["m8x16"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_signed_char"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_bool_char"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_signed_short"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_unsigned_short"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_bool_short"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_unsigned_int"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_float"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["vector_bool_int"]],["vector_signed_int"]]],[11,"from_bits","coresimd::simd","",8,[[["vector_signed_char"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_unsigned_char"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_bool_char"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_signed_short"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_unsigned_short"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_bool_short"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_signed_int"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_unsigned_int"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_float"]],["i32x4"]]],[11,"from_bits","","",8,[[["vector_bool_int"]],["i32x4"]]],[11,"from_bits","coresimd::arch::powerpc","",70,[[["u64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["i64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["f64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["m64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["u32x4"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["i32x4"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["f32x4"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["m32x4"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["u16x8"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["i16x8"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["m16x8"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["u8x16"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["i8x16"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["m8x16"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_signed_char"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_bool_char"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_signed_short"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_unsigned_short"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_bool_short"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_signed_int"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_float"]],["vector_unsigned_int"]]],[11,"from_bits","","",70,[[["vector_bool_int"]],["vector_unsigned_int"]]],[11,"from_bits","coresimd::simd","",9,[[["vector_signed_char"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_unsigned_char"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_bool_char"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_signed_short"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_unsigned_short"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_bool_short"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_signed_int"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_unsigned_int"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_float"]],["u32x4"]]],[11,"from_bits","","",9,[[["vector_bool_int"]],["u32x4"]]],[11,"from_bits","coresimd::arch::powerpc","",71,[[["u64x2"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["i64x2"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["f64x2"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["m64x2"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["u32x4"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["i32x4"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["f32x4"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["m32x4"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["u16x8"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["i16x8"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["m16x8"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["u8x16"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["i8x16"]],["vector_bool_int"]]],[11,"from_bits","","",71,[[["m8x16"]],["vector_bool_int"]]],[11,"from_bits","coresimd::simd","",11,[[["vector_bool_int"]],["m32x4"]]],[11,"from_bits","coresimd::arch::powerpc","",72,[[["u64x2"]],["vector_float"]]],[11,"from_bits","","",72,[[["i64x2"]],["vector_float"]]],[11,"from_bits","","",72,[[["f64x2"]],["vector_float"]]],[11,"from_bits","","",72,[[["m64x2"]],["vector_float"]]],[11,"from_bits","","",72,[[["u32x4"]],["vector_float"]]],[11,"from_bits","","",72,[[["i32x4"]],["vector_float"]]],[11,"from_bits","","",72,[[["f32x4"]],["vector_float"]]],[11,"from_bits","","",72,[[["m32x4"]],["vector_float"]]],[11,"from_bits","","",72,[[["u16x8"]],["vector_float"]]],[11,"from_bits","","",72,[[["i16x8"]],["vector_float"]]],[11,"from_bits","","",72,[[["m16x8"]],["vector_float"]]],[11,"from_bits","","",72,[[["u8x16"]],["vector_float"]]],[11,"from_bits","","",72,[[["i8x16"]],["vector_float"]]],[11,"from_bits","","",72,[[["m8x16"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_signed_char"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_bool_char"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_signed_short"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_unsigned_short"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_bool_short"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_signed_int"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_unsigned_int"]],["vector_float"]]],[11,"from_bits","","",72,[[["vector_bool_int"]],["vector_float"]]],[11,"from_bits","coresimd::simd","",10,[[["vector_signed_char"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_unsigned_char"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_bool_char"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_signed_short"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_unsigned_short"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_bool_short"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_signed_int"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_unsigned_int"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_float"]],["f32x4"]]],[11,"from_bits","","",10,[[["vector_bool_int"]],["f32x4"]]]],"paths":[[8,"FromBits"],[8,"IntoBits"],[3,"i8x16"],[3,"u8x16"],[3,"m8x16"],[3,"i16x8"],[3,"u16x8"],[3,"m16x8"],[3,"i32x4"],[3,"u32x4"],[3,"f32x4"],[3,"m32x4"],[3,"i64x2"],[3,"u64x2"],[3,"f64x2"],[3,"m64x2"],[3,"i8x2"],[3,"u8x2"],[3,"m8x2"],[3,"i8x32"],[3,"u8x32"],[3,"m8x32"],[3,"i16x16"],[3,"u16x16"],[3,"m16x16"],[3,"i32x8"],[3,"u32x8"],[3,"f32x8"],[3,"m32x8"],[3,"i64x4"],[3,"u64x4"],[3,"f64x4"],[3,"m64x4"],[3,"i16x2"],[3,"u16x2"],[3,"m16x2"],[3,"i8x4"],[3,"u8x4"],[3,"m8x4"],[3,"i8x64"],[3,"u8x64"],[3,"m1x64"],[3,"i16x32"],[3,"u16x32"],[3,"m1x32"],[3,"i32x16"],[3,"u32x16"],[3,"f32x16"],[3,"m1x16"],[3,"i64x8"],[3,"u64x8"],[3,"f64x8"],[3,"m1x8"],[3,"i8x8"],[3,"u8x8"],[3,"m8x8"],[3,"i16x4"],[3,"u16x4"],[3,"m16x4"],[3,"i32x2"],[3,"u32x2"],[3,"m32x2"],[3,"f32x2"],[3,"vector_signed_char"],[3,"vector_unsigned_char"],[3,"vector_bool_char"],[3,"vector_signed_short"],[3,"vector_unsigned_short"],[3,"vector_bool_short"],[3,"vector_signed_int"],[3,"vector_unsigned_int"],[3,"vector_bool_int"],[3,"vector_float"]]};
searchIndex["stdsimd"]={"doc":"SIMD and vendor intrinsics support library.","items":[[0,"simd","stdsimd","Platform independent SIMD vector types and operations.",N,N],[3,"u64x4","stdsimd::simd","A 256-bit vector with 4 `u64` lanes.",N,N],[3,"u8x8","","A 64-bit vector with 8 `u8` lanes.",N,N],[3,"i8x4","","A 32-bit wide vector with 4 `i8` lanes.",N,N],[3,"u32x2","","A 64-bit vector with 2 `u32` lanes.",N,N],[3,"m1x32","","A 32-bit vector mask with 32 lanes (FIXME: 512-bit wide).",N,N],[3,"m1x8","","A 8-bit vector mask with 8 lanes (FIXME: 512-bit wide).",N,N],[3,"m8x2","","A 16-bit wide vector mask with 2 lanes.",N,N],[3,"f32x16","","A 512-bit vector with 16 `f32` lanes.",N,N],[3,"u32x4","","A 128-bit vector with 4 `u32` lanes.",N,N],[3,"m64x4","","A 256-bit vector mask with 4 lanes.",N,N],[3,"m32x4","","A 128-bit vector mask with 4 lanes.",N,N],[3,"f64x4","","A 256-bit vector with 4 `f64` lanes.",N,N],[3,"m8x32","","A 256-bit vector mask with 32 lanes.",N,N],[3,"m16x16","","A 256-bit vector mask with 16 lanes.",N,N],[3,"u16x32","","A 512-bit vector with 32 `u16` lanes.",N,N],[3,"m64x2","","A 128-bit vector mask with 2 lanes.",N,N],[3,"f32x2","","A 64-bit vector with 2 `f32` lanes.",N,N],[3,"i32x8","","A 256-bit vector with 8 `i32` lanes.",N,N],[3,"m8x8","","A 64-bit vector mask with 8 lanes.",N,N],[3,"i8x2","","A 16-bit wide vector with 2 `i8` lanes.",N,N],[3,"u32x16","","A 512-bit vector with 16 `u32` lanes.",N,N],[3,"u8x4","","A 32-bit wide vector with 4 `u8` lanes.",N,N],[3,"i8x32","","A 256-bit vector with 32 `i8` lanes.",N,N],[3,"i64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[3,"u16x16","","A 256-bit vector with 16 `u16` lanes.",N,N],[3,"m16x8","","A 128-bit vector mask with 8 lanes.",N,N],[3,"u16x2","","A 32-bit wide vector with 2 `u16` lanes.",N,N],[3,"m1x64","","A 64-bit vector mask with 64 lanes (FIXME: 512-bit wide).",N,N],[3,"m8x16","","A 128-bit vector mask with 16 lanes.",N,N],[3,"u64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[3,"i64x8","","A 512-bit vector with 8 `i64` lanes.",N,N],[3,"u8x32","","A 256-bit vector with 32 `u8` lanes.",N,N],[8,"IntoBits","","Safe lossless bitwise conversion from `Self` to `T`.",N,N],[10,"into_bits","","Safe lossless bitwise transmute from `self` to `T`.",0,[[["self"]],["t"]]],[3,"f32x4","","A 128-bit vector with 4 `f32` lanes.",N,N],[3,"m16x4","","A 64-bit vector mask with 4 lanes.",N,N],[3,"i32x4","","A 128-bit vector with 4 `i32` lanes.",N,N],[3,"i16x16","","A 256-bit vector with 16 `i16` lanes.",N,N],[3,"i8x64","","A 512-bit vector with 64 `i8` lanes.",N,N],[3,"i16x8","","A 128-bit vector with 8 `i16` lanes.",N,N],[3,"m32x2","","A 64-bit vector mask with 2 lanes.",N,N],[3,"u64x8","","A 512-bit vector with 8 `u64` lanes.",N,N],[3,"u16x8","","A 128-bit vector with 8 `u16` lanes.",N,N],[3,"u8x2","","A 16-bit wide vector with 2 `u8` lanes.",N,N],[3,"i32x16","","A 512-bit vector with 16 `i32` lanes.",N,N],[3,"i64x4","","A 256-bit vector with 4 `i64` lanes.",N,N],[3,"i32x2","","A 64-bit vector with 2 `i32` lanes.",N,N],[8,"FromBits","","Safe lossless bitwise conversion from `T` to `Self`.",N,N],[10,"from_bits","","Safe lossless bitwise from `T` to `Self`.",1,[[["t"]],["self"]]],[3,"u32x8","","A 256-bit vector with 8 `u32` lanes.",N,N],[3,"m16x2","","A 32-bit wide vector mask with 2 lanes.",N,N],[3,"i16x4","","A 64-bit vector with 4 `i16` lanes.",N,N],[3,"u8x16","","A 128-bit vector with 16 `u8` lanes.",N,N],[3,"i8x8","","A 64-bit vector with 8 `i8` lanes.",N,N],[3,"u8x64","","A 512-bit vector with 64 `u8` lanes.",N,N],[3,"i16x32","","A 512-bit vector with 32 `i16` lanes.",N,N],[3,"m8x4","","A 32-bit wide vector mask 4 lanes.",N,N],[3,"f64x8","","A 512-bit vector with 8 `f64` lanes.",N,N],[3,"m32x8","","A 256-bit vector mask with 8 lanes.",N,N],[3,"i8x16","","A 128-bit vector with 16 `i8` lanes.",N,N],[3,"f32x8","","A 256-bit vector with 8 `f32` lanes.",N,N],[3,"f64x2","","A 128-bit vector with 2 `f64` lanes.",N,N],[3,"i16x2","","A 32-bit wide vector with 2 `i16` lanes.",N,N],[3,"m1x16","","A 16-bit vector mask with 16 lanes (FIXME: 512-bit wide).",N,N],[3,"u16x4","","A 64-bit vector with 4 `u16` lanes.",N,N],[0,"arch","stdsimd","SIMD and vendor intrinsics module.",N,N],[0,"powerpc","stdsimd::arch","Platform-specific intrinsics for the `PowerPC` platform.",N,N],[3,"vector_unsigned_char","stdsimd::arch::powerpc","PowerPC-specific 128-bit wide vector of sixteen packed `u8`",N,N],[3,"vector_bool_char","","PowerPC-specific 128-bit wide vector mask of sixteen packed elements",N,N],[3,"vector_unsigned_int","","PowerPC-specific 128-bit wide vector of four packed `u32`",N,N],[3,"vector_bool_int","","PowerPC-specific 128-bit wide vector mask of four packed elements",N,N],[3,"vector_unsigned_short","","PowerPC-specific 128-bit wide vector of eight packed `u16`",N,N],[5,"vec_mradds","","Vector Multiply Round and Add Saturated",N,[[["vector_signed_short"],["vector_signed_short"],["vector_signed_short"]],["vector_signed_short"]]],[3,"vector_signed_char","","PowerPC-specific 128-bit wide vector of sixteen packed `i8`",N,N],[3,"vector_signed_int","","PowerPC-specific 128-bit wide vector of four packed `i32`",N,N],[5,"vec_perm","","Vector permute.",N,[[["t"],["t"],["vector_unsigned_char"]],["t"]]],[3,"vector_signed_short","","PowerPC-specific 128-bit wide vector of eight packed `i16`",N,N],[3,"vector_float","","PowerPC-specific 128-bit wide vector of four packed `f32`",N,N],[5,"vec_madds","","Vector Multiply Add Saturated",N,[[["vector_signed_short"],["vector_signed_short"],["vector_signed_short"]],["vector_signed_short"]]],[5,"vec_add","","Vector add.",N,N],[3,"vector_bool_short","","PowerPC-specific 128-bit wide vector mask of eight packed elements",N,N],[14,"is_x86_feature_detected","stdsimd","",N,N],[14,"is_arm_feature_detected","","",N,N],[14,"is_aarch64_feature_detected","","",N,N],[14,"is_powerpc64_feature_detected","","",N,N],[14,"is_mips_feature_detected","","",N,N],[14,"is_mips64_feature_detected","","",N,N],[14,"is_powerpc_feature_detected","","",N,N],[11,"new","stdsimd::simd","Creates a new instance with each vector elements initialized with the provided values.",2,[[["u64"],["u64"],["u64"],["u64"]],["u64x4"]]],[11,"lanes","","Returns the number of vector lanes.",2,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",2,[[["u64"]],["u64x4"]]],[11,"extract","","Extracts the value at `index`.",2,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",2,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",2,[[["self"],["usize"],["u64"]],["u64x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",2,[[["self"],["usize"],["u64"]],["u64x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",2,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",2,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",2,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",2,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",2,N],[11,"eq","","Lane-wise equality comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",2,[[["self"],["u64x4"]],["m64x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",2,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",2,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",2,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",2,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",2,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",2,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",2,[[["self"]],["u64"]]],[11,"min","","Minimum of two vectors.",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"max","","Maximum of two vectors.",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",2,[[["self"]],["u64x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",2,[[["self"]],["u64x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",2,[[["self"]],["u64x4"]]],[11,"bitand_assign","","",2,N],[11,"bitand_assign","","",3,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",5,N],[11,"bitand_assign","","",6,N],[11,"bitand_assign","","",7,N],[11,"bitand_assign","","",8,N],[11,"bitand_assign","","",9,N],[11,"bitand_assign","","",10,N],[11,"bitand_assign","","",11,N],[11,"bitand_assign","","",12,N],[11,"bitand_assign","","",13,N],[11,"bitand_assign","","",14,N],[11,"bitand_assign","","",12,N],[11,"bitand_assign","","",15,N],[11,"bitand_assign","","",16,N],[11,"bitand_assign","","",17,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",19,N],[11,"bitand_assign","","",20,N],[11,"bitand_assign","","",21,N],[11,"bitand_assign","","",22,N],[11,"bitand_assign","","",23,N],[11,"bitand_assign","","",19,N],[11,"bitand_assign","","",24,N],[11,"bitand_assign","","",9,N],[11,"bitand_assign","","",5,N],[11,"bitand_assign","","",25,N],[11,"bitand_assign","","",26,N],[11,"bitand_assign","","",27,N],[11,"bitand_assign","","",28,N],[11,"bitand_assign","","",29,N],[11,"bitand_assign","","",30,N],[11,"bitand_assign","","",31,N],[11,"bitand_assign","","",32,N],[11,"bitand_assign","","",33,N],[11,"bitand_assign","","",18,N],[11,"bitand_assign","","",34,N],[11,"bitand_assign","","",34,N],[11,"bitand_assign","","",35,N],[11,"bitand_assign","","",13,N],[11,"bitand_assign","","",36,N],[11,"bitand_assign","","",36,N],[11,"bitand_assign","","",37,N],[11,"bitand_assign","","",37,N],[11,"bitand_assign","","",38,N],[11,"bitand_assign","","",39,N],[11,"bitand_assign","","",40,N],[11,"bitand_assign","","",14,N],[11,"bitand_assign","","",25,N],[11,"bitand_assign","","",41,N],[11,"bitand_assign","","",42,N],[11,"bitand_assign","","",33,N],[11,"bitand_assign","","",11,N],[11,"bitand_assign","","",2,N],[11,"bitand_assign","","",43,N],[11,"bitand_assign","","",17,N],[11,"bitand_assign","","",40,N],[11,"bitand_assign","","",44,N],[11,"bitand_assign","","",45,N],[11,"bitand_assign","","",10,N],[11,"bitand_assign","","",8,N],[11,"bitand_assign","","",28,N],[11,"bitand_assign","","",21,N],[11,"bitand_assign","","",46,N],[11,"bitand_assign","","",7,N],[11,"bitand_assign","","",47,N],[11,"bitand_assign","","",26,N],[11,"bitand_assign","","",27,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",48,N],[11,"bitand_assign","","",49,N],[11,"bitand_assign","","",29,N],[11,"bitand_assign","","",20,N],[11,"bitand_assign","","",16,N],[11,"bitand_assign","","",45,N],[11,"bitand_assign","","",46,N],[11,"bitand_assign","","",50,N],[11,"bitand_assign","","",43,N],[11,"bitand_assign","","",42,N],[11,"bitand_assign","","",23,N],[11,"bitand_assign","","",49,N],[11,"bitand_assign","","",15,N],[11,"bitand_assign","","",51,N],[11,"bitand_assign","","",52,N],[11,"bitand_assign","","",30,N],[11,"bitand_assign","","",31,N],[11,"bitand_assign","","",53,N],[11,"bitand_assign","","",35,N],[11,"bitand_assign","","",53,N],[11,"bitand_assign","","",6,N],[11,"bitand_assign","","",38,N],[11,"bitand_assign","","",50,N],[11,"bitand_assign","","",39,N],[11,"bitand_assign","","",3,N],[11,"bitand_assign","","",32,N],[11,"bitand_assign","","",52,N],[11,"bitand_assign","","",22,N],[11,"bitand_assign","","",24,N],[11,"bitand_assign","","",48,N],[11,"bitand_assign","","",47,N],[11,"bitand_assign","","",54,N],[11,"bitand_assign","","",41,N],[11,"bitand_assign","","",44,N],[11,"bitand_assign","","",55,N],[11,"bitand_assign","","",55,N],[11,"bitand_assign","","",54,N],[11,"bitand_assign","","",51,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"add","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"add","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"add","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"add","","",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"add","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"add","","",57,[[["self"],["f64"]],["f64x8"]]],[11,"add","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"add","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"add","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"add","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"add","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"add","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"add","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"add","","",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"add","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"add","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"add","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"add","","",59,[[["self"],["f64"]],["f64x2"]]],[11,"add","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"add","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"add","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"add","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"add","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"add","","",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"add","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"add","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"add","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"add","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"add","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"add","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"add","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"add","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"add","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"add","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"add","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"add","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"add","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"add","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"add","","",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"add","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"add","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"add","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"add","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"add","","",58,[[["self"],["f32"]],["f32x16"]]],[11,"add","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"add","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"add","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"add","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"add","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"add","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"add","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"add","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"add","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"add","","",61,[[["self"],["f64"]],["f64x4"]]],[11,"add","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"add","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"add","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"add","","",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"add","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"add","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"add","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"add","","",56,[[["self"],["f32"]],["f32x4"]]],[11,"add","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"add","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"add","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"add","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"add","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"add","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"add","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"add","","",60,[[["self"],["f32"]],["f32x2"]]],[11,"add","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"add","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"add","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"add","","",62,[[["self"],["f32"]],["f32x8"]]],[11,"add","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"add","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"add","","",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"add","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"add","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"add","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"add","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"add","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"add","","",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"add","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"add","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"shr_assign","","",50,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",28,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",17,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",11,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",33,N],[11,"shr_assign","","",46,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",14,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",50,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",16,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",43,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",3,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",38,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",19,N],[11,"shr_assign","","",27,N],[11,"shr_assign","","",54,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",12,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",8,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",44,N],[11,"shr_assign","","",48,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",25,N],[11,"shr_assign","","",51,N],[11,"shr_assign","","",7,N],[11,"shr_assign","","",6,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",2,N],[11,"shr_assign","","",21,N],[11,"shr_assign","","",36,N],[11,"shr_assign","","",20,N],[11,"shr_assign","","",22,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",32,N],[11,"shr_assign","","",35,N],[11,"shr_assign","","",49,N],[11,"shr_assign","","",5,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",55,N],[11,"shr_assign","","",10,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",34,N],[11,"shr_assign","","",36,N],[11,"default","","",29,[[],["m32x4"]]],[11,"default","","",30,[[],["m32x8"]]],[11,"default","","",51,[[],["i32x4"]]],[11,"default","","",50,[[],["u8x4"]]],[11,"default","","",14,[[],["u16x2"]]],[11,"default","","",34,[[],["i16x2"]]],[11,"default","","",38,[[],["i32x8"]]],[11,"default","","",2,[[],["u64x4"]]],[11,"default","","",54,[[],["i8x4"]]],[11,"default","","",3,[[],["u8x64"]]],[11,"default","","",18,[[],["m8x8"]]],[11,"default","","",45,[[],["m8x4"]]],[11,"default","","",10,[[],["u16x16"]]],[11,"default","","",56,[[],["f32x4"]]],[11,"default","","",25,[[],["i16x4"]]],[11,"default","","",35,[[],["i64x2"]]],[11,"default","","",12,[[],["u16x8"]]],[11,"default","","",27,[[],["i16x32"]]],[11,"default","","",32,[[],["u16x32"]]],[11,"default","","",5,[[],["u32x8"]]],[11,"default","","",21,[[],["u8x32"]]],[11,"default","","",61,[[],["f64x4"]]],[11,"default","","",15,[[],["m8x32"]]],[11,"default","","",62,[[],["f32x8"]]],[11,"default","","",60,[[],["f32x2"]]],[11,"default","","",13,[[],["m1x8"]]],[11,"default","","",36,[[],["i8x64"]]],[11,"default","","",59,[[],["f64x2"]]],[11,"default","","",24,[[],["m1x64"]]],[11,"default","","",28,[[],["u32x16"]]],[11,"default","","",4,[[],["i8x2"]]],[11,"default","","",20,[[],["i64x4"]]],[11,"default","","",6,[[],["u64x8"]]],[11,"default","","",9,[[],["m8x2"]]],[11,"default","","",43,[[],["u8x16"]]],[11,"default","","",47,[[],["m1x32"]]],[11,"default","","",49,[[],["u8x2"]]],[11,"default","","",7,[[],["u32x2"]]],[11,"default","","",31,[[],["m16x16"]]],[11,"default","","",53,[[],["m64x2"]]],[11,"default","","",40,[[],["i32x16"]]],[11,"default","","",23,[[],["m32x2"]]],[11,"default","","",48,[[],["i8x32"]]],[11,"default","","",46,[[],["i64x8"]]],[11,"default","","",37,[[],["m1x16"]]],[11,"default","","",19,[[],["i8x8"]]],[11,"default","","",17,[[],["u32x4"]]],[11,"default","","",11,[[],["i32x2"]]],[11,"default","","",39,[[],["m16x8"]]],[11,"default","","",57,[[],["f64x8"]]],[11,"default","","",8,[[],["i16x16"]]],[11,"default","","",52,[[],["m16x2"]]],[11,"default","","",33,[[],["i8x16"]]],[11,"default","","",58,[[],["f32x16"]]],[11,"default","","",16,[[],["u64x2"]]],[11,"default","","",26,[[],["m64x4"]]],[11,"default","","",55,[[],["i16x8"]]],[11,"default","","",44,[[],["u8x8"]]],[11,"default","","",22,[[],["u16x4"]]],[11,"default","","",42,[[],["m16x4"]]],[11,"default","","",41,[[],["m8x16"]]],[11,"bitxor_assign","","",48,N],[11,"bitxor_assign","","",36,N],[11,"bitxor_assign","","",14,N],[11,"bitxor_assign","","",23,N],[11,"bitxor_assign","","",35,N],[11,"bitxor_assign","","",13,N],[11,"bitxor_assign","","",30,N],[11,"bitxor_assign","","",36,N],[11,"bitxor_assign","","",27,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",37,N],[11,"bitxor_assign","","",38,N],[11,"bitxor_assign","","",38,N],[11,"bitxor_assign","","",2,N],[11,"bitxor_assign","","",24,N],[11,"bitxor_assign","","",10,N],[11,"bitxor_assign","","",8,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",51,N],[11,"bitxor_assign","","",11,N],[11,"bitxor_assign","","",18,N],[11,"bitxor_assign","","",11,N],[11,"bitxor_assign","","",23,N],[11,"bitxor_assign","","",39,N],[11,"bitxor_assign","","",15,N],[11,"bitxor_assign","","",54,N],[11,"bitxor_assign","","",25,N],[11,"bitxor_assign","","",34,N],[11,"bitxor_assign","","",40,N],[11,"bitxor_assign","","",17,N],[11,"bitxor_assign","","",2,N],[11,"bitxor_assign","","",51,N],[11,"bitxor_assign","","",16,N],[11,"bitxor_assign","","",52,N],[11,"bitxor_assign","","",32,N],[11,"bitxor_assign","","",52,N],[11,"bitxor_assign","","",43,N],[11,"bitxor_assign","","",44,N],[11,"bitxor_assign","","",43,N],[11,"bitxor_assign","","",20,N],[11,"bitxor_assign","","",28,N],[11,"bitxor_assign","","",49,N],[11,"bitxor_assign","","",17,N],[11,"bitxor_assign","","",3,N],[11,"bitxor_assign","","",12,N],[11,"bitxor_assign","","",44,N],[11,"bitxor_assign","","",22,N],[11,"bitxor_assign","","",31,N],[11,"bitxor_assign","","",6,N],[11,"bitxor_assign","","",50,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",46,N],[11,"bitxor_assign","","",22,N],[11,"bitxor_assign","","",39,N],[11,"bitxor_assign","","",45,N],[11,"bitxor_assign","","",24,N],[11,"bitxor_assign","","",8,N],[11,"bitxor_assign","","",13,N],[11,"bitxor_assign","","",55,N],[11,"bitxor_assign","","",48,N],[11,"bitxor_assign","","",9,N],[11,"bitxor_assign","","",5,N],[11,"bitxor_assign","","",47,N],[11,"bitxor_assign","","",5,N],[11,"bitxor_assign","","",46,N],[11,"bitxor_assign","","",47,N],[11,"bitxor_assign","","",42,N],[11,"bitxor_assign","","",26,N],[11,"bitxor_assign","","",50,N],[11,"bitxor_assign","","",40,N],[11,"bitxor_assign","","",19,N],[11,"bitxor_assign","","",42,N],[11,"bitxor_assign","","",28,N],[11,"bitxor_assign","","",33,N],[11,"bitxor_assign","","",7,N],[11,"bitxor_assign","","",53,N],[11,"bitxor_assign","","",29,N],[11,"bitxor_assign","","",27,N],[11,"bitxor_assign","","",45,N],[11,"bitxor_assign","","",55,N],[11,"bitxor_assign","","",14,N],[11,"bitxor_assign","","",37,N],[11,"bitxor_assign","","",53,N],[11,"bitxor_assign","","",41,N],[11,"bitxor_assign","","",26,N],[11,"bitxor_assign","","",20,N],[11,"bitxor_assign","","",33,N],[11,"bitxor_assign","","",19,N],[11,"bitxor_assign","","",29,N],[11,"bitxor_assign","","",7,N],[11,"bitxor_assign","","",21,N],[11,"bitxor_assign","","",49,N],[11,"bitxor_assign","","",31,N],[11,"bitxor_assign","","",3,N],[11,"bitxor_assign","","",21,N],[11,"bitxor_assign","","",35,N],[11,"bitxor_assign","","",25,N],[11,"bitxor_assign","","",6,N],[11,"bitxor_assign","","",54,N],[11,"bitxor_assign","","",15,N],[11,"bitxor_assign","","",12,N],[11,"bitxor_assign","","",9,N],[11,"bitxor_assign","","",30,N],[11,"bitxor_assign","","",32,N],[11,"bitxor_assign","","",16,N],[11,"bitxor_assign","","",41,N],[11,"bitxor_assign","","",10,N],[11,"bitxor_assign","","",34,N],[11,"not","","",48,[[["self"]],["i8x32"]]],[11,"not","","",49,[[["self"]],["u8x2"]]],[11,"not","","",14,[[["self"]],["u16x2"]]],[11,"not","","",46,[[["self"]],["i64x8"]]],[11,"not","","",53,[[["self"]],["m64x2"]]],[11,"not","","",54,[[["self"]],["i8x4"]]],[11,"not","","",5,[[["self"]],["u32x8"]]],[11,"not","","",16,[[["self"]],["u64x2"]]],[11,"not","","",19,[[["self"]],["i8x8"]]],[11,"not","","",44,[[["self"]],["u8x8"]]],[11,"not","","",22,[[["self"]],["u16x4"]]],[11,"not","","",26,[[["self"]],["m64x4"]]],[11,"not","","",6,[[["self"]],["u64x8"]]],[11,"not","","",23,[[["self"]],["m32x2"]]],[11,"not","","",15,[[["self"]],["m8x32"]]],[11,"not","","",2,[[["self"]],["u64x4"]]],[11,"not","","",24,[[["self"]],["m1x64"]]],[11,"not","","",41,[[["self"]],["m8x16"]]],[11,"not","","",34,[[["self"]],["i16x2"]]],[11,"not","","",20,[[["self"]],["i64x4"]]],[11,"not","","",43,[[["self"]],["u8x16"]]],[11,"not","","",13,[[["self"]],["m1x8"]]],[11,"not","","",10,[[["self"]],["u16x16"]]],[11,"not","","",29,[[["self"]],["m32x4"]]],[11,"not","","",51,[[["self"]],["i32x4"]]],[11,"not","","",27,[[["self"]],["i16x32"]]],[11,"not","","",8,[[["self"]],["i16x16"]]],[11,"not","","",21,[[["self"]],["u8x32"]]],[11,"not","","",17,[[["self"]],["u32x4"]]],[11,"not","","",55,[[["self"]],["i16x8"]]],[11,"not","","",37,[[["self"]],["m1x16"]]],[11,"not","","",38,[[["self"]],["i32x8"]]],[11,"not","","",52,[[["self"]],["m16x2"]]],[11,"not","","",47,[[["self"]],["m1x32"]]],[11,"not","","",18,[[["self"]],["m8x8"]]],[11,"not","","",33,[[["self"]],["i8x16"]]],[11,"not","","",4,[[["self"]],["i8x2"]]],[11,"not","","",40,[[["self"]],["i32x16"]]],[11,"not","","",3,[[["self"]],["u8x64"]]],[11,"not","","",25,[[["self"]],["i16x4"]]],[11,"not","","",30,[[["self"]],["m32x8"]]],[11,"not","","",36,[[["self"]],["i8x64"]]],[11,"not","","",7,[[["self"]],["u32x2"]]],[11,"not","","",31,[[["self"]],["m16x16"]]],[11,"not","","",12,[[["self"]],["u16x8"]]],[11,"not","","",50,[[["self"]],["u8x4"]]],[11,"not","","",9,[[["self"]],["m8x2"]]],[11,"not","","",39,[[["self"]],["m16x8"]]],[11,"not","","",45,[[["self"]],["m8x4"]]],[11,"not","","",11,[[["self"]],["i32x2"]]],[11,"not","","",35,[[["self"]],["i64x2"]]],[11,"not","","",42,[[["self"]],["m16x4"]]],[11,"not","","",32,[[["self"]],["u16x32"]]],[11,"not","","",28,[[["self"]],["u32x16"]]],[11,"div","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"div","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"div","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"div","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"div","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"div","","",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"div","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"div","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"div","","",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"div","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"div","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"div","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"div","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"div","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"div","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"div","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"div","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"div","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"div","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"div","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"div","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"div","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"div","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"div","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"div","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"div","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"div","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"div","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"div","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"div","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"div","","",58,[[["self"],["f32"]],["f32x16"]]],[11,"div","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"div","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"div","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"div","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"div","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"div","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"div","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"div","","",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"div","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"div","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"div","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"div","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"div","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"div","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"div","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"div","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"div","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"div","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"div","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"div","","",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"div","","",56,[[["self"],["f32"]],["f32x4"]]],[11,"div","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"div","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"div","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"div","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"div","","",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"div","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"div","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"div","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"div","","",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"div","","",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"div","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"div","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"div","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"div","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"div","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"div","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"div","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"div","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"div","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"div","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"div","","",57,[[["self"],["f64"]],["f64x8"]]],[11,"div","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"div","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"div","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"div","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"div","","",61,[[["self"],["f64"]],["f64x4"]]],[11,"div","","",59,[[["self"],["f64"]],["f64x2"]]],[11,"div","","",60,[[["self"],["f32"]],["f32x2"]]],[11,"div","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"div","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"div","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"div","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"div","","",62,[[["self"],["f32"]],["f32x8"]]],[11,"div","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"shl_assign","","",11,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",55,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",8,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",7,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",19,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",35,N],[11,"shl_assign","","",25,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",10,N],[11,"shl_assign","","",46,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",40,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",21,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",14,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",36,N],[11,"shl_assign","","",32,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",51,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",20,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",54,N],[11,"shl_assign","","",6,N],[11,"shl_assign","","",49,N],[11,"shl_assign","","",44,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",28,N],[11,"shl_assign","","",33,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",38,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",16,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",2,N],[11,"shl_assign","","",50,N],[11,"shl_assign","","",34,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",17,N],[11,"shl_assign","","",5,N],[11,"shl_assign","","",43,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",12,N],[11,"shl_assign","","",27,N],[11,"shl_assign","","",3,N],[11,"shl_assign","","",11,N],[11,"shl_assign","","",48,N],[11,"shl_assign","","",22,N],[11,"shl_assign","","",16,N],[11,"clone","stdsimd::arch::powerpc","",63,[[["self"]],["vector_bool_short"]]],[11,"clone","stdsimd::simd","",19,[[["self"]],["i8x8"]]],[11,"clone","","",21,[[["self"]],["u8x32"]]],[11,"clone","","",13,[[["self"]],["m1x8"]]],[11,"clone","","",52,[[["self"]],["m16x2"]]],[11,"clone","","",55,[[["self"]],["i16x8"]]],[11,"clone","stdsimd::arch::powerpc","",64,[[["self"]],["vector_unsigned_char"]]],[11,"clone","stdsimd::simd","",25,[[["self"]],["i16x4"]]],[11,"clone","","",59,[[["self"]],["f64x2"]]],[11,"clone","","",60,[[["self"]],["f32x2"]]],[11,"clone","","",30,[[["self"]],["m32x8"]]],[11,"clone","","",51,[[["self"]],["i32x4"]]],[11,"clone","","",8,[[["self"]],["i16x16"]]],[11,"clone","","",61,[[["self"]],["f64x4"]]],[11,"clone","stdsimd::arch::powerpc","",65,[[["self"]],["vector_signed_char"]]],[11,"clone","stdsimd::simd","",34,[[["self"]],["i16x2"]]],[11,"clone","","",27,[[["self"]],["i16x32"]]],[11,"clone","stdsimd::arch::powerpc","",66,[[["self"]],["vector_signed_short"]]],[11,"clone","stdsimd::simd","",31,[[["self"]],["m16x16"]]],[11,"clone","","",22,[[["self"]],["u16x4"]]],[11,"clone","","",33,[[["self"]],["i8x16"]]],[11,"clone","","",50,[[["self"]],["u8x4"]]],[11,"clone","","",42,[[["self"]],["m16x4"]]],[11,"clone","","",18,[[["self"]],["m8x8"]]],[11,"clone","","",58,[[["self"]],["f32x16"]]],[11,"clone","stdsimd::arch::powerpc","",67,[[["self"]],["vector_float"]]],[11,"clone","stdsimd::simd","",54,[[["self"]],["i8x4"]]],[11,"clone","stdsimd::arch::powerpc","",68,[[["self"]],["vector_bool_int"]]],[11,"clone","stdsimd::simd","",9,[[["self"]],["m8x2"]]],[11,"clone","stdsimd::arch::powerpc","",69,[[["self"]],["vector_signed_int"]]],[11,"clone","stdsimd::simd","",47,[[["self"]],["m1x32"]]],[11,"clone","","",56,[[["self"]],["f32x4"]]],[11,"clone","","",23,[[["self"]],["m32x2"]]],[11,"clone","","",11,[[["self"]],["i32x2"]]],[11,"clone","","",17,[[["self"]],["u32x4"]]],[11,"clone","","",6,[[["self"]],["u64x8"]]],[11,"clone","","",3,[[["self"]],["u8x64"]]],[11,"clone","","",38,[[["self"]],["i32x8"]]],[11,"clone","","",7,[[["self"]],["u32x2"]]],[11,"clone","","",46,[[["self"]],["i64x8"]]],[11,"clone","","",20,[[["self"]],["i64x4"]]],[11,"clone","stdsimd::arch::powerpc","",70,[[["self"]],["vector_unsigned_short"]]],[11,"clone","stdsimd::simd","",48,[[["self"]],["i8x32"]]],[11,"clone","","",57,[[["self"]],["f64x8"]]],[11,"clone","","",4,[[["self"]],["i8x2"]]],[11,"clone","","",12,[[["self"]],["u16x8"]]],[11,"clone","","",14,[[["self"]],["u16x2"]]],[11,"clone","","",37,[[["self"]],["m1x16"]]],[11,"clone","","",39,[[["self"]],["m16x8"]]],[11,"clone","stdsimd::arch::powerpc","",71,[[["self"]],["vector_bool_char"]]],[11,"clone","stdsimd::simd","",44,[[["self"]],["u8x8"]]],[11,"clone","","",28,[[["self"]],["u32x16"]]],[11,"clone","","",53,[[["self"]],["m64x2"]]],[11,"clone","","",62,[[["self"]],["f32x8"]]],[11,"clone","stdsimd::arch::powerpc","",72,[[["self"]],["vector_unsigned_int"]]],[11,"clone","stdsimd::simd","",35,[[["self"]],["i64x2"]]],[11,"clone","","",29,[[["self"]],["m32x4"]]],[11,"clone","","",16,[[["self"]],["u64x2"]]],[11,"clone","","",45,[[["self"]],["m8x4"]]],[11,"clone","","",5,[[["self"]],["u32x8"]]],[11,"clone","","",15,[[["self"]],["m8x32"]]],[11,"clone","","",2,[[["self"]],["u64x4"]]],[11,"clone","","",32,[[["self"]],["u16x32"]]],[11,"clone","","",40,[[["self"]],["i32x16"]]],[11,"clone","","",41,[[["self"]],["m8x16"]]],[11,"clone","","",36,[[["self"]],["i8x64"]]],[11,"clone","","",24,[[["self"]],["m1x64"]]],[11,"clone","","",26,[[["self"]],["m64x4"]]],[11,"clone","","",10,[[["self"]],["u16x16"]]],[11,"clone","","",43,[[["self"]],["u8x16"]]],[11,"clone","","",49,[[["self"]],["u8x2"]]],[11,"shr","","",36,[[["self"],["i32"]],["i8x64"]]],[11,"shr","","",51,[[["self"],["isize"]],["i32x4"]]],[11,"shr","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"shr","","",6,[[["self"],["i8"]],["u64x8"]]],[11,"shr","","",51,[[["self"],["i8"]],["i32x4"]]],[11,"shr","","",19,[[["self"],["usize"]],["i8x8"]]],[11,"shr","","",22,[[["self"],["i32"]],["u16x4"]]],[11,"shr","","",35,[[["self"],["usize"]],["i64x2"]]],[11,"shr","","",25,[[["self"],["usize"]],["i16x4"]]],[11,"shr","","",16,[[["self"],["i16"]],["u64x2"]]],[11,"shr","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"shr","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"shr","","",19,[[["self"],["i16"]],["i8x8"]]],[11,"shr","","",40,[[["self"],["u64"]],["i32x16"]]],[11,"shr","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"shr","","",19,[[["self"],["u16"]],["i8x8"]]],[11,"shr","","",55,[[["self"],["u64"]],["i16x8"]]],[11,"shr","","",46,[[["self"],["i32"]],["i64x8"]]],[11,"shr","","",27,[[["self"],["u32"]],["i16x32"]]],[11,"shr","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"shr","","",22,[[["self"],["i64"]],["u16x4"]]],[11,"shr","","",25,[[["self"],["u32"]],["i16x4"]]],[11,"shr","","",11,[[["self"],["u8"]],["i32x2"]]],[11,"shr","","",46,[[["self"],["u16"]],["i64x8"]]],[11,"shr","","",43,[[["self"],["u64"]],["u8x16"]]],[11,"shr","","",46,[[["self"],["i16"]],["i64x8"]]],[11,"shr","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"shr","","",7,[[["self"],["usize"]],["u32x2"]]],[11,"shr","","",5,[[["self"],["i16"]],["u32x8"]]],[11,"shr","","",4,[[["self"],["i16"]],["i8x2"]]],[11,"shr","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"shr","","",44,[[["self"],["u32"]],["u8x8"]]],[11,"shr","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"shr","","",34,[[["self"],["u8"]],["i16x2"]]],[11,"shr","","",38,[[["self"],["usize"]],["i32x8"]]],[11,"shr","","",55,[[["self"],["i32"]],["i16x8"]]],[11,"shr","","",10,[[["self"],["u32"]],["u16x16"]]],[11,"shr","","",50,[[["self"],["i64"]],["u8x4"]]],[11,"shr","","",19,[[["self"],["u64"]],["i8x8"]]],[11,"shr","","",36,[[["self"],["u8"]],["i8x64"]]],[11,"shr","","",27,[[["self"],["usize"]],["i16x32"]]],[11,"shr","","",8,[[["self"],["u8"]],["i16x16"]]],[11,"shr","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"shr","","",4,[[["self"],["usize"]],["i8x2"]]],[11,"shr","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"shr","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"shr","","",35,[[["self"],["u32"]],["i64x2"]]],[11,"shr","","",22,[[["self"],["u64"]],["u16x4"]]],[11,"shr","","",27,[[["self"],["i32"]],["i16x32"]]],[11,"shr","","",36,[[["self"],["u32"]],["i8x64"]]],[11,"shr","","",11,[[["self"],["u64"]],["i32x2"]]],[11,"shr","","",33,[[["self"],["u64"]],["i8x16"]]],[11,"shr","","",3,[[["self"],["i8"]],["u8x64"]]],[11,"shr","","",12,[[["self"],["u64"]],["u16x8"]]],[11,"shr","","",51,[[["self"],["u16"]],["i32x4"]]],[11,"shr","","",46,[[["self"],["u64"]],["i64x8"]]],[11,"shr","","",14,[[["self"],["u8"]],["u16x2"]]],[11,"shr","","",20,[[["self"],["isize"]],["i64x4"]]],[11,"shr","","",7,[[["self"],["i32"]],["u32x2"]]],[11,"shr","","",17,[[["self"],["u64"]],["u32x4"]]],[11,"shr","","",16,[[["self"],["u32"]],["u64x2"]]],[11,"shr","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"shr","","",55,[[["self"],["i8"]],["i16x8"]]],[11,"shr","","",3,[[["self"],["u32"]],["u8x64"]]],[11,"shr","","",54,[[["self"],["i64"]],["i8x4"]]],[11,"shr","","",12,[[["self"],["usize"]],["u16x8"]]],[11,"shr","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"shr","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"shr","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"shr","","",33,[[["self"],["u16"]],["i8x16"]]],[11,"shr","","",3,[[["self"],["usize"]],["u8x64"]]],[11,"shr","","",27,[[["self"],["i8"]],["i16x32"]]],[11,"shr","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"shr","","",44,[[["self"],["isize"]],["u8x8"]]],[11,"shr","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"shr","","",49,[[["self"],["i8"]],["u8x2"]]],[11,"shr","","",36,[[["self"],["i64"]],["i8x64"]]],[11,"shr","","",50,[[["self"],["i8"]],["u8x4"]]],[11,"shr","","",2,[[["self"],["i16"]],["u64x4"]]],[11,"shr","","",27,[[["self"],["u64"]],["i16x32"]]],[11,"shr","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"shr","","",40,[[["self"],["i64"]],["i32x16"]]],[11,"shr","","",20,[[["self"],["i32"]],["i64x4"]]],[11,"shr","","",48,[[["self"],["u32"]],["i8x32"]]],[11,"shr","","",28,[[["self"],["u64"]],["u32x16"]]],[11,"shr","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"shr","","",10,[[["self"],["i64"]],["u16x16"]]],[11,"shr","","",20,[[["self"],["i16"]],["i64x4"]]],[11,"shr","","",49,[[["self"],["i16"]],["u8x2"]]],[11,"shr","","",20,[[["self"],["u16"]],["i64x4"]]],[11,"shr","","",22,[[["self"],["u32"]],["u16x4"]]],[11,"shr","","",8,[[["self"],["u16"]],["i16x16"]]],[11,"shr","","",34,[[["self"],["u64"]],["i16x2"]]],[11,"shr","","",17,[[["self"],["u16"]],["u32x4"]]],[11,"shr","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"shr","","",43,[[["self"],["i64"]],["u8x16"]]],[11,"shr","","",10,[[["self"],["isize"]],["u16x16"]]],[11,"shr","","",40,[[["self"],["u16"]],["i32x16"]]],[11,"shr","","",16,[[["self"],["i64"]],["u64x2"]]],[11,"shr","","",12,[[["self"],["i8"]],["u16x8"]]],[11,"shr","","",32,[[["self"],["isize"]],["u16x32"]]],[11,"shr","","",7,[[["self"],["i16"]],["u32x2"]]],[11,"shr","","",20,[[["self"],["usize"]],["i64x4"]]],[11,"shr","","",25,[[["self"],["i64"]],["i16x4"]]],[11,"shr","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"shr","","",8,[[["self"],["i64"]],["i16x16"]]],[11,"shr","","",43,[[["self"],["usize"]],["u8x16"]]],[11,"shr","","",54,[[["self"],["usize"]],["i8x4"]]],[11,"shr","","",35,[[["self"],["u8"]],["i64x2"]]],[11,"shr","","",3,[[["self"],["i16"]],["u8x64"]]],[11,"shr","","",44,[[["self"],["i32"]],["u8x8"]]],[11,"shr","","",32,[[["self"],["i32"]],["u16x32"]]],[11,"shr","","",51,[[["self"],["i16"]],["i32x4"]]],[11,"shr","","",35,[[["self"],["i16"]],["i64x2"]]],[11,"shr","","",40,[[["self"],["usize"]],["i32x16"]]],[11,"shr","","",2,[[["self"],["u16"]],["u64x4"]]],[11,"shr","","",17,[[["self"],["i64"]],["u32x4"]]],[11,"shr","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"shr","","",38,[[["self"],["i16"]],["i32x8"]]],[11,"shr","","",36,[[["self"],["u16"]],["i8x64"]]],[11,"shr","","",48,[[["self"],["isize"]],["i8x32"]]],[11,"shr","","",54,[[["self"],["u8"]],["i8x4"]]],[11,"shr","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"shr","","",16,[[["self"],["u8"]],["u64x2"]]],[11,"shr","","",21,[[["self"],["i32"]],["u8x32"]]],[11,"shr","","",16,[[["self"],["isize"]],["u64x2"]]],[11,"shr","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"shr","","",55,[[["self"],["u16"]],["i16x8"]]],[11,"shr","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"shr","","",21,[[["self"],["usize"]],["u8x32"]]],[11,"shr","","",4,[[["self"],["isize"]],["i8x2"]]],[11,"shr","","",28,[[["self"],["i32"]],["u32x16"]]],[11,"shr","","",50,[[["self"],["u32"]],["u8x4"]]],[11,"shr","","",19,[[["self"],["u8"]],["i8x8"]]],[11,"shr","","",32,[[["self"],["u64"]],["u16x32"]]],[11,"shr","","",28,[[["self"],["i16"]],["u32x16"]]],[11,"shr","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"shr","","",38,[[["self"],["u64"]],["i32x8"]]],[11,"shr","","",20,[[["self"],["u64"]],["i64x4"]]],[11,"shr","","",11,[[["self"],["isize"]],["i32x2"]]],[11,"shr","","",28,[[["self"],["usize"]],["u32x16"]]],[11,"shr","","",6,[[["self"],["u16"]],["u64x8"]]],[11,"shr","","",36,[[["self"],["i16"]],["i8x64"]]],[11,"shr","","",12,[[["self"],["u8"]],["u16x8"]]],[11,"shr","","",14,[[["self"],["i16"]],["u16x2"]]],[11,"shr","","",17,[[["self"],["isize"]],["u32x4"]]],[11,"shr","","",55,[[["self"],["isize"]],["i16x8"]]],[11,"shr","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"shr","","",2,[[["self"],["i64"]],["u64x4"]]],[11,"shr","","",46,[[["self"],["isize"]],["i64x8"]]],[11,"shr","","",51,[[["self"],["u64"]],["i32x4"]]],[11,"shr","","",43,[[["self"],["i16"]],["u8x16"]]],[11,"shr","","",44,[[["self"],["i16"]],["u8x8"]]],[11,"shr","","",6,[[["self"],["usize"]],["u64x8"]]],[11,"shr","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"shr","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"shr","","",44,[[["self"],["i8"]],["u8x8"]]],[11,"shr","","",54,[[["self"],["i32"]],["i8x4"]]],[11,"shr","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"shr","","",38,[[["self"],["u8"]],["i32x8"]]],[11,"shr","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"shr","","",2,[[["self"],["u8"]],["u64x4"]]],[11,"shr","","",35,[[["self"],["isize"]],["i64x2"]]],[11,"shr","","",38,[[["self"],["u32"]],["i32x8"]]],[11,"shr","","",10,[[["self"],["u8"]],["u16x16"]]],[11,"shr","","",49,[[["self"],["isize"]],["u8x2"]]],[11,"shr","","",28,[[["self"],["i8"]],["u32x16"]]],[11,"shr","","",5,[[["self"],["isize"]],["u32x8"]]],[11,"shr","","",33,[[["self"],["i64"]],["i8x16"]]],[11,"shr","","",48,[[["self"],["u64"]],["i8x32"]]],[11,"shr","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"shr","","",55,[[["self"],["usize"]],["i16x8"]]],[11,"shr","","",25,[[["self"],["u8"]],["i16x4"]]],[11,"shr","","",7,[[["self"],["u8"]],["u32x2"]]],[11,"shr","","",11,[[["self"],["i16"]],["i32x2"]]],[11,"shr","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"shr","","",20,[[["self"],["u8"]],["i64x4"]]],[11,"shr","","",14,[[["self"],["i64"]],["u16x2"]]],[11,"shr","","",21,[[["self"],["i16"]],["u8x32"]]],[11,"shr","","",32,[[["self"],["u32"]],["u16x32"]]],[11,"shr","","",40,[[["self"],["u8"]],["i32x16"]]],[11,"shr","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"shr","","",17,[[["self"],["usize"]],["u32x4"]]],[11,"shr","","",22,[[["self"],["usize"]],["u16x4"]]],[11,"shr","","",43,[[["self"],["u32"]],["u8x16"]]],[11,"shr","","",5,[[["self"],["u16"]],["u32x8"]]],[11,"shr","","",27,[[["self"],["i64"]],["i16x32"]]],[11,"shr","","",8,[[["self"],["i32"]],["i16x16"]]],[11,"shr","","",17,[[["self"],["i32"]],["u32x4"]]],[11,"shr","","",33,[[["self"],["u8"]],["i8x16"]]],[11,"shr","","",17,[[["self"],["i16"]],["u32x4"]]],[11,"shr","","",6,[[["self"],["u8"]],["u64x8"]]],[11,"shr","","",21,[[["self"],["u64"]],["u8x32"]]],[11,"shr","","",22,[[["self"],["u8"]],["u16x4"]]],[11,"shr","","",48,[[["self"],["i64"]],["i8x32"]]],[11,"shr","","",5,[[["self"],["u8"]],["u32x8"]]],[11,"shr","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"shr","","",44,[[["self"],["u16"]],["u8x8"]]],[11,"shr","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"shr","","",2,[[["self"],["isize"]],["u64x4"]]],[11,"shr","","",34,[[["self"],["u16"]],["i16x2"]]],[11,"shr","","",3,[[["self"],["i32"]],["u8x64"]]],[11,"shr","","",43,[[["self"],["i32"]],["u8x16"]]],[11,"shr","","",4,[[["self"],["u16"]],["i8x2"]]],[11,"shr","","",10,[[["self"],["u64"]],["u16x16"]]],[11,"shr","","",2,[[["self"],["i8"]],["u64x4"]]],[11,"shr","","",43,[[["self"],["i8"]],["u8x16"]]],[11,"shr","","",48,[[["self"],["i32"]],["i8x32"]]],[11,"shr","","",36,[[["self"],["u64"]],["i8x64"]]],[11,"shr","","",34,[[["self"],["i32"]],["i16x2"]]],[11,"shr","","",12,[[["self"],["isize"]],["u16x8"]]],[11,"shr","","",46,[[["self"],["u8"]],["i64x8"]]],[11,"shr","","",38,[[["self"],["i64"]],["i32x8"]]],[11,"shr","","",7,[[["self"],["i8"]],["u32x2"]]],[11,"shr","","",11,[[["self"],["u32"]],["i32x2"]]],[11,"shr","","",35,[[["self"],["u64"]],["i64x2"]]],[11,"shr","","",55,[[["self"],["u8"]],["i16x8"]]],[11,"shr","","",22,[[["self"],["isize"]],["u16x4"]]],[11,"shr","","",22,[[["self"],["i8"]],["u16x4"]]],[11,"shr","","",32,[[["self"],["i8"]],["u16x32"]]],[11,"shr","","",17,[[["self"],["i8"]],["u32x4"]]],[11,"shr","","",55,[[["self"],["i64"]],["i16x8"]]],[11,"shr","","",5,[[["self"],["i32"]],["u32x8"]]],[11,"shr","","",51,[[["self"],["i64"]],["i32x4"]]],[11,"shr","","",36,[[["self"],["isize"]],["i8x64"]]],[11,"shr","","",32,[[["self"],["usize"]],["u16x32"]]],[11,"shr","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"shr","","",27,[[["self"],["u8"]],["i16x32"]]],[11,"shr","","",54,[[["self"],["isize"]],["i8x4"]]],[11,"shr","","",46,[[["self"],["usize"]],["i64x8"]]],[11,"shr","","",12,[[["self"],["i16"]],["u16x8"]]],[11,"shr","","",50,[[["self"],["u64"]],["u8x4"]]],[11,"shr","","",4,[[["self"],["u64"]],["i8x2"]]],[11,"shr","","",14,[[["self"],["usize"]],["u16x2"]]],[11,"shr","","",11,[[["self"],["u16"]],["i32x2"]]],[11,"shr","","",51,[[["self"],["usize"]],["i32x4"]]],[11,"shr","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"shr","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"shr","","",44,[[["self"],["u64"]],["u8x8"]]],[11,"shr","","",10,[[["self"],["i16"]],["u16x16"]]],[11,"shr","","",27,[[["self"],["u16"]],["i16x32"]]],[11,"shr","","",40,[[["self"],["u32"]],["i32x16"]]],[11,"shr","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"shr","","",28,[[["self"],["isize"]],["u32x16"]]],[11,"shr","","",54,[[["self"],["u16"]],["i8x4"]]],[11,"shr","","",43,[[["self"],["u16"]],["u8x16"]]],[11,"shr","","",49,[[["self"],["u64"]],["u8x2"]]],[11,"shr","","",14,[[["self"],["u32"]],["u16x2"]]],[11,"shr","","",16,[[["self"],["i8"]],["u64x2"]]],[11,"shr","","",6,[[["self"],["i32"]],["u64x8"]]],[11,"shr","","",55,[[["self"],["u32"]],["i16x8"]]],[11,"shr","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"shr","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"shr","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"shr","","",16,[[["self"],["usize"]],["u64x2"]]],[11,"shr","","",16,[[["self"],["u16"]],["u64x2"]]],[11,"shr","","",3,[[["self"],["i64"]],["u8x64"]]],[11,"shr","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"shr","","",7,[[["self"],["u16"]],["u32x2"]]],[11,"shr","","",49,[[["self"],["i32"]],["u8x2"]]],[11,"shr","","",11,[[["self"],["i8"]],["i32x2"]]],[11,"shr","","",3,[[["self"],["isize"]],["u8x64"]]],[11,"shr","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"shr","","",7,[[["self"],["isize"]],["u32x2"]]],[11,"shr","","",6,[[["self"],["isize"]],["u64x8"]]],[11,"shr","","",51,[[["self"],["u8"]],["i32x4"]]],[11,"shr","","",6,[[["self"],["i64"]],["u64x8"]]],[11,"shr","","",44,[[["self"],["usize"]],["u8x8"]]],[11,"shr","","",3,[[["self"],["u16"]],["u8x64"]]],[11,"shr","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"shr","","",2,[[["self"],["usize"]],["u64x4"]]],[11,"shr","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"shr","","",51,[[["self"],["u32"]],["i32x4"]]],[11,"shr","","",8,[[["self"],["usize"]],["i16x16"]]],[11,"shr","","",25,[[["self"],["u64"]],["i16x4"]]],[11,"shr","","",50,[[["self"],["i16"]],["u8x4"]]],[11,"shr","","",43,[[["self"],["isize"]],["u8x16"]]],[11,"shr","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"shr","","",2,[[["self"],["u32"]],["u64x4"]]],[11,"shr","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"shr","","",28,[[["self"],["i64"]],["u32x16"]]],[11,"shr","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"shr","","",2,[[["self"],["i32"]],["u64x4"]]],[11,"shr","","",14,[[["self"],["i32"]],["u16x2"]]],[11,"shr","","",4,[[["self"],["i32"]],["i8x2"]]],[11,"shr","","",28,[[["self"],["u16"]],["u32x16"]]],[11,"shr","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"shr","","",54,[[["self"],["u64"]],["i8x4"]]],[11,"shr","","",6,[[["self"],["u32"]],["u64x8"]]],[11,"shr","","",8,[[["self"],["isize"]],["i16x16"]]],[11,"shr","","",3,[[["self"],["u64"]],["u8x64"]]],[11,"shr","","",48,[[["self"],["i16"]],["i8x32"]]],[11,"shr","","",28,[[["self"],["u8"]],["u32x16"]]],[11,"shr","","",14,[[["self"],["i8"]],["u16x2"]]],[11,"shr","","",14,[[["self"],["u64"]],["u16x2"]]],[11,"shr","","",21,[[["self"],["u32"]],["u8x32"]]],[11,"shr","","",21,[[["self"],["u16"]],["u8x32"]]],[11,"shr","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"shr","","",25,[[["self"],["u16"]],["i16x4"]]],[11,"shr","","",21,[[["self"],["isize"]],["u8x32"]]],[11,"shr","","",19,[[["self"],["isize"]],["i8x8"]]],[11,"shr","","",12,[[["self"],["i32"]],["u16x8"]]],[11,"shr","","",46,[[["self"],["i8"]],["i64x8"]]],[11,"shr","","",17,[[["self"],["u8"]],["u32x4"]]],[11,"shr","","",32,[[["self"],["i64"]],["u16x32"]]],[11,"shr","","",20,[[["self"],["u32"]],["i64x4"]]],[11,"shr","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"shr","","",5,[[["self"],["usize"]],["u32x8"]]],[11,"shr","","",35,[[["self"],["i8"]],["i64x2"]]],[11,"shr","","",54,[[["self"],["u32"]],["i8x4"]]],[11,"shr","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"shr","","",40,[[["self"],["isize"]],["i32x16"]]],[11,"shr","","",12,[[["self"],["u32"]],["u16x8"]]],[11,"shr","","",19,[[["self"],["u32"]],["i8x8"]]],[11,"shr","","",38,[[["self"],["isize"]],["i32x8"]]],[11,"shr","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"shr","","",49,[[["self"],["i64"]],["u8x2"]]],[11,"shr","","",34,[[["self"],["i8"]],["i16x2"]]],[11,"shr","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"shr","","",8,[[["self"],["u64"]],["i16x16"]]],[11,"shr","","",5,[[["self"],["i64"]],["u32x8"]]],[11,"shr","","",49,[[["self"],["usize"]],["u8x2"]]],[11,"shr","","",14,[[["self"],["isize"]],["u16x2"]]],[11,"shr","","",27,[[["self"],["isize"]],["i16x32"]]],[11,"shr","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"shr","","",40,[[["self"],["i16"]],["i32x16"]]],[11,"shr","","",34,[[["self"],["usize"]],["i16x2"]]],[11,"shr","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"shr","","",32,[[["self"],["u8"]],["u16x32"]]],[11,"shr","","",48,[[["self"],["u8"]],["i8x32"]]],[11,"shr","","",54,[[["self"],["i16"]],["i8x4"]]],[11,"shr","","",50,[[["self"],["i32"]],["u8x4"]]],[11,"shr","","",8,[[["self"],["u32"]],["i16x16"]]],[11,"shr","","",50,[[["self"],["isize"]],["u8x4"]]],[11,"shr","","",25,[[["self"],["i8"]],["i16x4"]]],[11,"shr","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"shr","","",38,[[["self"],["i8"]],["i32x8"]]],[11,"shr","","",8,[[["self"],["i8"]],["i16x16"]]],[11,"shr","","",21,[[["self"],["i8"]],["u8x32"]]],[11,"shr","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"shr","","",22,[[["self"],["i16"]],["u16x4"]]],[11,"shr","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"shr","","",4,[[["self"],["u32"]],["i8x2"]]],[11,"shr","","",11,[[["self"],["usize"]],["i32x2"]]],[11,"shr","","",11,[[["self"],["i64"]],["i32x2"]]],[11,"shr","","",10,[[["self"],["i32"]],["u16x16"]]],[11,"shr","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"shr","","",33,[[["self"],["usize"]],["i8x16"]]],[11,"shr","","",36,[[["self"],["usize"]],["i8x64"]]],[11,"shr","","",10,[[["self"],["i8"]],["u16x16"]]],[11,"shr","","",4,[[["self"],["i64"]],["i8x2"]]],[11,"shr","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"shr","","",25,[[["self"],["isize"]],["i16x4"]]],[11,"shr","","",33,[[["self"],["i32"]],["i8x16"]]],[11,"shr","","",49,[[["self"],["u16"]],["u8x2"]]],[11,"shr","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"shr","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"shr","","",35,[[["self"],["i32"]],["i64x2"]]],[11,"shr","","",50,[[["self"],["usize"]],["u8x4"]]],[11,"shr","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"shr","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"shr","","",12,[[["self"],["i64"]],["u16x8"]]],[11,"shr","","",21,[[["self"],["i64"]],["u8x32"]]],[11,"shr","","",33,[[["self"],["i16"]],["i8x16"]]],[11,"shr","","",4,[[["self"],["u8"]],["i8x2"]]],[11,"shr","","",48,[[["self"],["u16"]],["i8x32"]]],[11,"shr","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"shr","","",10,[[["self"],["usize"]],["u16x16"]]],[11,"shr","","",5,[[["self"],["i8"]],["u32x8"]]],[11,"shr","","",38,[[["self"],["u16"]],["i32x8"]]],[11,"shr","","",49,[[["self"],["u32"]],["u8x2"]]],[11,"shr","","",33,[[["self"],["u32"]],["i8x16"]]],[11,"shr","","",44,[[["self"],["i64"]],["u8x8"]]],[11,"shr","","",35,[[["self"],["u16"]],["i64x2"]]],[11,"shr","","",46,[[["self"],["u32"]],["i64x8"]]],[11,"shr","","",6,[[["self"],["i16"]],["u64x8"]]],[11,"shr","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"shr","","",40,[[["self"],["i8"]],["i32x16"]]],[11,"shr","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"shr","","",48,[[["self"],["usize"]],["i8x32"]]],[11,"shr","","",16,[[["self"],["i32"]],["u64x2"]]],[11,"shr","","",25,[[["self"],["i32"]],["i16x4"]]],[11,"shr","","",34,[[["self"],["i64"]],["i16x2"]]],[11,"shr","","",34,[[["self"],["isize"]],["i16x2"]]],[11,"shr","","",20,[[["self"],["i8"]],["i64x4"]]],[11,"shr","","",7,[[["self"],["u64"]],["u32x2"]]],[11,"shr","","",7,[[["self"],["i64"]],["u32x2"]]],[11,"shr","","",33,[[["self"],["isize"]],["i8x16"]]],[11,"shr","","",19,[[["self"],["i64"]],["i8x8"]]],[11,"shr","","",50,[[["self"],["u16"]],["u8x4"]]],[11,"shr","","",34,[[["self"],["u32"]],["i16x2"]]],[11,"shr","","",19,[[["self"],["i32"]],["i8x8"]]],[11,"shr","","",32,[[["self"],["i16"]],["u16x32"]]],[11,"shr","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"shr","","",5,[[["self"],["u64"]],["u32x8"]]],[11,"shr","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"mul","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"mul","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"mul","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"mul","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"mul","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"mul","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"mul","","",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"mul","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"mul","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"mul","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"mul","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"mul","","",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"mul","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"mul","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"mul","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"mul","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"mul","","",58,[[["self"],["f32"]],["f32x16"]]],[11,"mul","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"mul","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"mul","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"mul","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"mul","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"mul","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"mul","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"mul","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"mul","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"mul","","",61,[[["self"],["f64"]],["f64x4"]]],[11,"mul","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"mul","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"mul","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"mul","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"mul","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"mul","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"mul","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"mul","","",60,[[["self"],["f32"]],["f32x2"]]],[11,"mul","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"mul","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"mul","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"mul","","",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"mul","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"mul","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"mul","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"mul","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"mul","","",59,[[["self"],["f64"]],["f64x2"]]],[11,"mul","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"mul","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"mul","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"mul","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"mul","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"mul","","",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"mul","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"mul","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"mul","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"mul","","",57,[[["self"],["f64"]],["f64x8"]]],[11,"mul","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"mul","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"mul","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"mul","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"mul","","",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"mul","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"mul","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"mul","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"mul","","",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"mul","","",56,[[["self"],["f32"]],["f32x4"]]],[11,"mul","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"mul","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"mul","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"mul","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"mul","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"mul","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"mul","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"mul","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"mul","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"mul","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"mul","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"mul","","",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"mul","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"mul","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"mul","","",62,[[["self"],["f32"]],["f32x8"]]],[11,"mul","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"mul","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"mul","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"mul","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"mul","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"mul","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"mul","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"rem_assign","","",27,N],[11,"rem_assign","","",43,N],[11,"rem_assign","","",25,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",12,N],[11,"rem_assign","","",6,N],[11,"rem_assign","","",12,N],[11,"rem_assign","","",38,N],[11,"rem_assign","","",50,N],[11,"rem_assign","","",61,N],[11,"rem_assign","","",61,N],[11,"rem_assign","","",16,N],[11,"rem_assign","","",2,N],[11,"rem_assign","","",54,N],[11,"rem_assign","","",16,N],[11,"rem_assign","","",19,N],[11,"rem_assign","","",58,N],[11,"rem_assign","","",32,N],[11,"rem_assign","","",7,N],[11,"rem_assign","","",56,N],[11,"rem_assign","","",28,N],[11,"rem_assign","","",59,N],[11,"rem_assign","","",55,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",51,N],[11,"rem_assign","","",22,N],[11,"rem_assign","","",51,N],[11,"rem_assign","","",46,N],[11,"rem_assign","","",59,N],[11,"rem_assign","","",5,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",21,N],[11,"rem_assign","","",22,N],[11,"rem_assign","","",60,N],[11,"rem_assign","","",2,N],[11,"rem_assign","","",25,N],[11,"rem_assign","","",7,N],[11,"rem_assign","","",35,N],[11,"rem_assign","","",57,N],[11,"rem_assign","","",62,N],[11,"rem_assign","","",10,N],[11,"rem_assign","","",14,N],[11,"rem_assign","","",33,N],[11,"rem_assign","","",14,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",32,N],[11,"rem_assign","","",11,N],[11,"rem_assign","","",44,N],[11,"rem_assign","","",50,N],[11,"rem_assign","","",3,N],[11,"rem_assign","","",58,N],[11,"rem_assign","","",20,N],[11,"rem_assign","","",27,N],[11,"rem_assign","","",19,N],[11,"rem_assign","","",3,N],[11,"rem_assign","","",8,N],[11,"rem_assign","","",34,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",38,N],[11,"rem_assign","","",17,N],[11,"rem_assign","","",57,N],[11,"rem_assign","","",8,N],[11,"rem_assign","","",28,N],[11,"rem_assign","","",35,N],[11,"rem_assign","","",48,N],[11,"rem_assign","","",48,N],[11,"rem_assign","","",36,N],[11,"rem_assign","","",55,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",11,N],[11,"rem_assign","","",43,N],[11,"rem_assign","","",60,N],[11,"rem_assign","","",36,N],[11,"rem_assign","","",56,N],[11,"rem_assign","","",46,N],[11,"rem_assign","","",54,N],[11,"rem_assign","","",62,N],[11,"rem_assign","","",21,N],[11,"rem_assign","","",6,N],[11,"rem_assign","","",33,N],[11,"rem_assign","","",5,N],[11,"rem_assign","","",44,N],[11,"rem_assign","","",20,N],[11,"rem_assign","","",17,N],[11,"rem_assign","","",10,N],[11,"rem_assign","","",34,N],[11,"bitor","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"bitor","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"bitor","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"bitor","","",9,[[["self"],["bool"]],["m8x2"]]],[11,"bitor","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"bitor","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"bitor","","",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"bitor","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"bitor","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"bitor","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"bitor","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"bitor","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"bitor","","",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"bitor","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"bitor","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"bitor","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"bitor","","",42,[[["self"],["bool"]],["m16x4"]]],[11,"bitor","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"bitor","","",13,[[["self"],["bool"]],["m1x8"]]],[11,"bitor","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"bitor","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"bitor","","",29,[[["self"],["bool"]],["m32x4"]]],[11,"bitor","","",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"bitor","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"bitor","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"bitor","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"bitor","","",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"bitor","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"bitor","","",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"bitor","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"bitor","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"bitor","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"bitor","","",53,[[["self"],["bool"]],["m64x2"]]],[11,"bitor","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"bitor","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"bitor","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"bitor","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"bitor","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"bitor","","",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"bitor","","",31,[[["self"],["bool"]],["m16x16"]]],[11,"bitor","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"bitor","","",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"bitor","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"bitor","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"bitor","","",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"bitor","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"bitor","","",23,[[["self"],["bool"]],["m32x2"]]],[11,"bitor","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"bitor","","",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"bitor","","",41,[[["self"],["bool"]],["m8x16"]]],[11,"bitor","","",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"bitor","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"bitor","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"bitor","","",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"bitor","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"bitor","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"bitor","","",26,[[["self"],["bool"]],["m64x4"]]],[11,"bitor","","",37,[[["self"],["bool"]],["m1x16"]]],[11,"bitor","","",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"bitor","","",18,[[["self"],["bool"]],["m8x8"]]],[11,"bitor","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"bitor","","",15,[[["self"],["bool"]],["m8x32"]]],[11,"bitor","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"bitor","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"bitor","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"bitor","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"bitor","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"bitor","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"bitor","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"bitor","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"bitor","","",30,[[["self"],["bool"]],["m32x8"]]],[11,"bitor","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"bitor","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"bitor","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"bitor","","",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"bitor","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"bitor","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"bitor","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"bitor","","",45,[[["self"],["bool"]],["m8x4"]]],[11,"bitor","","",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"bitor","","",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"bitor","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"bitor","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"bitor","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"bitor","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"bitor","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"bitor","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"bitor","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"bitor","","",52,[[["self"],["bool"]],["m16x2"]]],[11,"bitor","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"bitor","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"bitor","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"bitor","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"bitor","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitor","","",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"bitor","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"bitor","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"bitor","","",39,[[["self"],["bool"]],["m16x8"]]],[11,"bitor","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"bitor","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"bitor","","",24,[[["self"],["bool"]],["m1x64"]]],[11,"bitor","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"bitor","","",47,[[["self"],["bool"]],["m1x32"]]],[11,"bitor","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"bitor","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"bitor","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"bitor","","",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"bitor","","",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"neg","","",35,[[["self"]],["i64x2"]]],[11,"neg","","",20,[[["self"]],["i64x4"]]],[11,"neg","","",56,[[["self"]],["f32x4"]]],[11,"neg","","",57,[[["self"]],["f64x8"]]],[11,"neg","","",62,[[["self"]],["f32x8"]]],[11,"neg","","",4,[[["self"]],["i8x2"]]],[11,"neg","","",60,[[["self"]],["f32x2"]]],[11,"neg","","",11,[[["self"]],["i32x2"]]],[11,"neg","","",36,[[["self"]],["i8x64"]]],[11,"neg","","",40,[[["self"]],["i32x16"]]],[11,"neg","","",19,[[["self"]],["i8x8"]]],[11,"neg","","",55,[[["self"]],["i16x8"]]],[11,"neg","","",38,[[["self"]],["i32x8"]]],[11,"neg","","",34,[[["self"]],["i16x2"]]],[11,"neg","","",25,[[["self"]],["i16x4"]]],[11,"neg","","",54,[[["self"]],["i8x4"]]],[11,"neg","","",33,[[["self"]],["i8x16"]]],[11,"neg","","",59,[[["self"]],["f64x2"]]],[11,"neg","","",58,[[["self"]],["f32x16"]]],[11,"neg","","",46,[[["self"]],["i64x8"]]],[11,"neg","","",8,[[["self"]],["i16x16"]]],[11,"neg","","",51,[[["self"]],["i32x4"]]],[11,"neg","","",27,[[["self"]],["i16x32"]]],[11,"neg","","",48,[[["self"]],["i8x32"]]],[11,"neg","","",61,[[["self"]],["f64x4"]]],[11,"bitor_assign","","",2,N],[11,"bitor_assign","","",44,N],[11,"bitor_assign","","",52,N],[11,"bitor_assign","","",33,N],[11,"bitor_assign","","",55,N],[11,"bitor_assign","","",33,N],[11,"bitor_assign","","",5,N],[11,"bitor_assign","","",48,N],[11,"bitor_assign","","",46,N],[11,"bitor_assign","","",30,N],[11,"bitor_assign","","",23,N],[11,"bitor_assign","","",34,N],[11,"bitor_assign","","",35,N],[11,"bitor_assign","","",51,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",25,N],[11,"bitor_assign","","",10,N],[11,"bitor_assign","","",36,N],[11,"bitor_assign","","",9,N],[11,"bitor_assign","","",21,N],[11,"bitor_assign","","",18,N],[11,"bitor_assign","","",31,N],[11,"bitor_assign","","",37,N],[11,"bitor_assign","","",49,N],[11,"bitor_assign","","",28,N],[11,"bitor_assign","","",17,N],[11,"bitor_assign","","",14,N],[11,"bitor_assign","","",26,N],[11,"bitor_assign","","",22,N],[11,"bitor_assign","","",23,N],[11,"bitor_assign","","",32,N],[11,"bitor_assign","","",45,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",27,N],[11,"bitor_assign","","",10,N],[11,"bitor_assign","","",15,N],[11,"bitor_assign","","",13,N],[11,"bitor_assign","","",11,N],[11,"bitor_assign","","",39,N],[11,"bitor_assign","","",40,N],[11,"bitor_assign","","",14,N],[11,"bitor_assign","","",15,N],[11,"bitor_assign","","",50,N],[11,"bitor_assign","","",20,N],[11,"bitor_assign","","",5,N],[11,"bitor_assign","","",48,N],[11,"bitor_assign","","",17,N],[11,"bitor_assign","","",42,N],[11,"bitor_assign","","",43,N],[11,"bitor_assign","","",40,N],[11,"bitor_assign","","",37,N],[11,"bitor_assign","","",34,N],[11,"bitor_assign","","",6,N],[11,"bitor_assign","","",53,N],[11,"bitor_assign","","",12,N],[11,"bitor_assign","","",35,N],[11,"bitor_assign","","",29,N],[11,"bitor_assign","","",30,N],[11,"bitor_assign","","",54,N],[11,"bitor_assign","","",39,N],[11,"bitor_assign","","",12,N],[11,"bitor_assign","","",44,N],[11,"bitor_assign","","",32,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",49,N],[11,"bitor_assign","","",25,N],[11,"bitor_assign","","",3,N],[11,"bitor_assign","","",41,N],[11,"bitor_assign","","",47,N],[11,"bitor_assign","","",28,N],[11,"bitor_assign","","",22,N],[11,"bitor_assign","","",52,N],[11,"bitor_assign","","",8,N],[11,"bitor_assign","","",21,N],[11,"bitor_assign","","",26,N],[11,"bitor_assign","","",24,N],[11,"bitor_assign","","",24,N],[11,"bitor_assign","","",46,N],[11,"bitor_assign","","",7,N],[11,"bitor_assign","","",11,N],[11,"bitor_assign","","",13,N],[11,"bitor_assign","","",20,N],[11,"bitor_assign","","",43,N],[11,"bitor_assign","","",3,N],[11,"bitor_assign","","",16,N],[11,"bitor_assign","","",55,N],[11,"bitor_assign","","",53,N],[11,"bitor_assign","","",36,N],[11,"bitor_assign","","",8,N],[11,"bitor_assign","","",54,N],[11,"bitor_assign","","",7,N],[11,"bitor_assign","","",38,N],[11,"bitor_assign","","",19,N],[11,"bitor_assign","","",38,N],[11,"bitor_assign","","",47,N],[11,"bitor_assign","","",45,N],[11,"bitor_assign","","",27,N],[11,"bitor_assign","","",50,N],[11,"bitor_assign","","",41,N],[11,"bitor_assign","","",51,N],[11,"bitor_assign","","",42,N],[11,"bitor_assign","","",9,N],[11,"bitor_assign","","",31,N],[11,"bitor_assign","","",29,N],[11,"bitor_assign","","",19,N],[11,"bitor_assign","","",6,N],[11,"bitor_assign","","",16,N],[11,"bitor_assign","","",2,N],[11,"bitand","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"bitand","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitand","","",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"bitand","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"bitand","","",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"bitand","","",9,[[["self"],["bool"]],["m8x2"]]],[11,"bitand","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"bitand","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"bitand","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"bitand","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"bitand","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"bitand","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"bitand","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"bitand","","",23,[[["self"],["bool"]],["m32x2"]]],[11,"bitand","","",45,[[["self"],["bool"]],["m8x4"]]],[11,"bitand","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"bitand","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"bitand","","",47,[[["self"],["bool"]],["m1x32"]]],[11,"bitand","","",29,[[["self"],["bool"]],["m32x4"]]],[11,"bitand","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"bitand","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"bitand","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"bitand","","",24,[[["self"],["bool"]],["m1x64"]]],[11,"bitand","","",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"bitand","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"bitand","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"bitand","","",30,[[["self"],["bool"]],["m32x8"]]],[11,"bitand","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"bitand","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"bitand","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"bitand","","",41,[[["self"],["bool"]],["m8x16"]]],[11,"bitand","","",18,[[["self"],["bool"]],["m8x8"]]],[11,"bitand","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"bitand","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"bitand","","",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"bitand","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"bitand","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"bitand","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"bitand","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"bitand","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"bitand","","",42,[[["self"],["bool"]],["m16x4"]]],[11,"bitand","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"bitand","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"bitand","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"bitand","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"bitand","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"bitand","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"bitand","","",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"bitand","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"bitand","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"bitand","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"bitand","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"bitand","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"bitand","","",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"bitand","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"bitand","","",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"bitand","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"bitand","","",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"bitand","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"bitand","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"bitand","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"bitand","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"bitand","","",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"bitand","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"bitand","","",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"bitand","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"bitand","","",31,[[["self"],["bool"]],["m16x16"]]],[11,"bitand","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"bitand","","",39,[[["self"],["bool"]],["m16x8"]]],[11,"bitand","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"bitand","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"bitand","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"bitand","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"bitand","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"bitand","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"bitand","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"bitand","","",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"bitand","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"bitand","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"bitand","","",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"bitand","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"bitand","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"bitand","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"bitand","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"bitand","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"bitand","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"bitand","","",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"bitand","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"bitand","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"bitand","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"bitand","","",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"bitand","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"bitand","","",52,[[["self"],["bool"]],["m16x2"]]],[11,"bitand","","",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"bitand","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"bitand","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"bitand","","",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"bitand","","",26,[[["self"],["bool"]],["m64x4"]]],[11,"bitand","","",37,[[["self"],["bool"]],["m1x16"]]],[11,"bitand","","",53,[[["self"],["bool"]],["m64x2"]]],[11,"bitand","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"bitand","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"bitand","","",15,[[["self"],["bool"]],["m8x32"]]],[11,"bitand","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"bitand","","",13,[[["self"],["bool"]],["m1x8"]]],[11,"bitand","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"bitand","","",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"bitand","","",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"eq","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"ne","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"eq","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"ne","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"eq","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"ne","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"eq","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"ne","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"eq","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"ne","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"eq","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"ne","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"eq","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"ne","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"eq","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"ne","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"eq","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"ne","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"eq","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"ne","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"eq","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"ne","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"eq","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"ne","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"eq","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"ne","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"eq","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"ne","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"eq","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"ne","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"eq","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"ne","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"eq","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"ne","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"eq","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"ne","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"eq","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"ne","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"eq","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"ne","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"eq","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"ne","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"eq","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"ne","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"eq","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"ne","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"eq","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"ne","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"eq","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"ne","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"eq","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"ne","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"eq","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"ne","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"eq","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"ne","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"eq","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"ne","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"eq","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"ne","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"eq","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"ne","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"eq","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"ne","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"eq","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"ne","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"eq","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"ne","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"eq","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"ne","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"eq","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"ne","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"eq","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"ne","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"eq","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"ne","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"eq","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"ne","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"eq","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"ne","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"eq","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"ne","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"eq","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"ne","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"eq","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"ne","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"eq","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"ne","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"eq","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"ne","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"eq","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"ne","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"eq","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"ne","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"eq","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"ne","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"eq","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"ne","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"eq","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"ne","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"eq","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"ne","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"eq","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"ne","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"eq","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"ne","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"eq","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"ne","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"eq","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"ne","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"eq","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"ne","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"eq","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"ne","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"eq","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"ne","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"eq","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"ne","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"eq","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"ne","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"eq","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"ne","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"mul_assign","","",32,N],[11,"mul_assign","","",36,N],[11,"mul_assign","","",50,N],[11,"mul_assign","","",54,N],[11,"mul_assign","","",44,N],[11,"mul_assign","","",60,N],[11,"mul_assign","","",33,N],[11,"mul_assign","","",58,N],[11,"mul_assign","","",62,N],[11,"mul_assign","","",48,N],[11,"mul_assign","","",34,N],[11,"mul_assign","","",46,N],[11,"mul_assign","","",12,N],[11,"mul_assign","","",36,N],[11,"mul_assign","","",8,N],[11,"mul_assign","","",59,N],[11,"mul_assign","","",16,N],[11,"mul_assign","","",46,N],[11,"mul_assign","","",59,N],[11,"mul_assign","","",58,N],[11,"mul_assign","","",6,N],[11,"mul_assign","","",17,N],[11,"mul_assign","","",3,N],[11,"mul_assign","","",20,N],[11,"mul_assign","","",7,N],[11,"mul_assign","","",51,N],[11,"mul_assign","","",43,N],[11,"mul_assign","","",56,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",8,N],[11,"mul_assign","","",27,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",35,N],[11,"mul_assign","","",60,N],[11,"mul_assign","","",14,N],[11,"mul_assign","","",14,N],[11,"mul_assign","","",7,N],[11,"mul_assign","","",54,N],[11,"mul_assign","","",10,N],[11,"mul_assign","","",28,N],[11,"mul_assign","","",57,N],[11,"mul_assign","","",17,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",25,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",22,N],[11,"mul_assign","","",28,N],[11,"mul_assign","","",55,N],[11,"mul_assign","","",35,N],[11,"mul_assign","","",33,N],[11,"mul_assign","","",38,N],[11,"mul_assign","","",27,N],[11,"mul_assign","","",62,N],[11,"mul_assign","","",55,N],[11,"mul_assign","","",5,N],[11,"mul_assign","","",22,N],[11,"mul_assign","","",11,N],[11,"mul_assign","","",19,N],[11,"mul_assign","","",32,N],[11,"mul_assign","","",34,N],[11,"mul_assign","","",2,N],[11,"mul_assign","","",3,N],[11,"mul_assign","","",19,N],[11,"mul_assign","","",21,N],[11,"mul_assign","","",12,N],[11,"mul_assign","","",48,N],[11,"mul_assign","","",44,N],[11,"mul_assign","","",56,N],[11,"mul_assign","","",25,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",21,N],[11,"mul_assign","","",2,N],[11,"mul_assign","","",10,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",38,N],[11,"mul_assign","","",51,N],[11,"mul_assign","","",20,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",50,N],[11,"mul_assign","","",43,N],[11,"mul_assign","","",16,N],[11,"mul_assign","","",61,N],[11,"mul_assign","","",57,N],[11,"mul_assign","","",11,N],[11,"mul_assign","","",61,N],[11,"mul_assign","","",6,N],[11,"hash","","",51,N],[11,"hash","","",34,N],[11,"hash","","",6,N],[11,"hash","","",19,N],[11,"hash","","",55,N],[11,"hash","","",46,N],[11,"hash","","",4,N],[11,"hash","","",14,N],[11,"hash","","",2,N],[11,"hash","","",17,N],[11,"hash","","",8,N],[11,"hash","","",38,N],[11,"hash","","",32,N],[11,"hash","","",22,N],[11,"hash","","",21,N],[11,"hash","","",3,N],[11,"hash","","",5,N],[11,"hash","","",12,N],[11,"hash","","",16,N],[11,"hash","","",10,N],[11,"hash","","",43,N],[11,"hash","","",35,N],[11,"hash","","",54,N],[11,"hash","","",20,N],[11,"hash","","",40,N],[11,"hash","","",28,N],[11,"hash","","",36,N],[11,"hash","","",44,N],[11,"hash","","",7,N],[11,"hash","","",11,N],[11,"hash","","",27,N],[11,"hash","","",49,N],[11,"hash","","",48,N],[11,"hash","","",33,N],[11,"hash","","",25,N],[11,"hash","","",50,N],[11,"div_assign","","",34,N],[11,"div_assign","","",43,N],[11,"div_assign","","",10,N],[11,"div_assign","","",59,N],[11,"div_assign","","",11,N],[11,"div_assign","","",60,N],[11,"div_assign","","",55,N],[11,"div_assign","","",32,N],[11,"div_assign","","",58,N],[11,"div_assign","","",60,N],[11,"div_assign","","",22,N],[11,"div_assign","","",56,N],[11,"div_assign","","",19,N],[11,"div_assign","","",19,N],[11,"div_assign","","",16,N],[11,"div_assign","","",48,N],[11,"div_assign","","",2,N],[11,"div_assign","","",35,N],[11,"div_assign","","",25,N],[11,"div_assign","","",28,N],[11,"div_assign","","",10,N],[11,"div_assign","","",4,N],[11,"div_assign","","",33,N],[11,"div_assign","","",7,N],[11,"div_assign","","",14,N],[11,"div_assign","","",12,N],[11,"div_assign","","",2,N],[11,"div_assign","","",61,N],[11,"div_assign","","",16,N],[11,"div_assign","","",5,N],[11,"div_assign","","",25,N],[11,"div_assign","","",40,N],[11,"div_assign","","",12,N],[11,"div_assign","","",38,N],[11,"div_assign","","",3,N],[11,"div_assign","","",46,N],[11,"div_assign","","",50,N],[11,"div_assign","","",5,N],[11,"div_assign","","",34,N],[11,"div_assign","","",20,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",54,N],[11,"div_assign","","",32,N],[11,"div_assign","","",54,N],[11,"div_assign","","",62,N],[11,"div_assign","","",17,N],[11,"div_assign","","",46,N],[11,"div_assign","","",50,N],[11,"div_assign","","",20,N],[11,"div_assign","","",57,N],[11,"div_assign","","",6,N],[11,"div_assign","","",21,N],[11,"div_assign","","",27,N],[11,"div_assign","","",7,N],[11,"div_assign","","",36,N],[11,"div_assign","","",38,N],[11,"div_assign","","",11,N],[11,"div_assign","","",55,N],[11,"div_assign","","",27,N],[11,"div_assign","","",21,N],[11,"div_assign","","",56,N],[11,"div_assign","","",57,N],[11,"div_assign","","",28,N],[11,"div_assign","","",62,N],[11,"div_assign","","",35,N],[11,"div_assign","","",51,N],[11,"div_assign","","",61,N],[11,"div_assign","","",48,N],[11,"div_assign","","",14,N],[11,"div_assign","","",6,N],[11,"div_assign","","",51,N],[11,"div_assign","","",8,N],[11,"div_assign","","",8,N],[11,"div_assign","","",58,N],[11,"div_assign","","",4,N],[11,"div_assign","","",43,N],[11,"div_assign","","",22,N],[11,"div_assign","","",36,N],[11,"div_assign","","",33,N],[11,"div_assign","","",40,N],[11,"div_assign","","",44,N],[11,"div_assign","","",44,N],[11,"div_assign","","",59,N],[11,"div_assign","","",3,N],[11,"div_assign","","",17,N],[11,"shl","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"shl","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"shl","","",22,[[["self"],["i32"]],["u16x4"]]],[11,"shl","","",16,[[["self"],["usize"]],["u64x2"]]],[11,"shl","","",20,[[["self"],["u16"]],["i64x4"]]],[11,"shl","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"shl","","",34,[[["self"],["u16"]],["i16x2"]]],[11,"shl","","",2,[[["self"],["i32"]],["u64x4"]]],[11,"shl","","",5,[[["self"],["i64"]],["u32x8"]]],[11,"shl","","",49,[[["self"],["i8"]],["u8x2"]]],[11,"shl","","",28,[[["self"],["i8"]],["u32x16"]]],[11,"shl","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"shl","","",54,[[["self"],["i32"]],["i8x4"]]],[11,"shl","","",35,[[["self"],["u32"]],["i64x2"]]],[11,"shl","","",54,[[["self"],["usize"]],["i8x4"]]],[11,"shl","","",25,[[["self"],["u8"]],["i16x4"]]],[11,"shl","","",10,[[["self"],["u32"]],["u16x16"]]],[11,"shl","","",49,[[["self"],["usize"]],["u8x2"]]],[11,"shl","","",27,[[["self"],["u8"]],["i16x32"]]],[11,"shl","","",50,[[["self"],["u32"]],["u8x4"]]],[11,"shl","","",4,[[["self"],["i64"]],["i8x2"]]],[11,"shl","","",54,[[["self"],["u64"]],["i8x4"]]],[11,"shl","","",20,[[["self"],["i16"]],["i64x4"]]],[11,"shl","","",10,[[["self"],["i64"]],["u16x16"]]],[11,"shl","","",28,[[["self"],["u64"]],["u32x16"]]],[11,"shl","","",16,[[["self"],["i16"]],["u64x2"]]],[11,"shl","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"shl","","",7,[[["self"],["i8"]],["u32x2"]]],[11,"shl","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"shl","","",48,[[["self"],["u16"]],["i8x32"]]],[11,"shl","","",32,[[["self"],["u64"]],["u16x32"]]],[11,"shl","","",20,[[["self"],["u32"]],["i64x4"]]],[11,"shl","","",6,[[["self"],["i8"]],["u64x8"]]],[11,"shl","","",51,[[["self"],["i64"]],["i32x4"]]],[11,"shl","","",19,[[["self"],["i32"]],["i8x8"]]],[11,"shl","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"shl","","",8,[[["self"],["i8"]],["i16x16"]]],[11,"shl","","",55,[[["self"],["i64"]],["i16x8"]]],[11,"shl","","",36,[[["self"],["u32"]],["i8x64"]]],[11,"shl","","",17,[[["self"],["u16"]],["u32x4"]]],[11,"shl","","",14,[[["self"],["u64"]],["u16x2"]]],[11,"shl","","",4,[[["self"],["u16"]],["i8x2"]]],[11,"shl","","",5,[[["self"],["i16"]],["u32x8"]]],[11,"shl","","",27,[[["self"],["usize"]],["i16x32"]]],[11,"shl","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"shl","","",8,[[["self"],["i64"]],["i16x16"]]],[11,"shl","","",6,[[["self"],["u16"]],["u64x8"]]],[11,"shl","","",35,[[["self"],["i16"]],["i64x2"]]],[11,"shl","","",54,[[["self"],["u32"]],["i8x4"]]],[11,"shl","","",17,[[["self"],["usize"]],["u32x4"]]],[11,"shl","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"shl","","",51,[[["self"],["i16"]],["i32x4"]]],[11,"shl","","",28,[[["self"],["u8"]],["u32x16"]]],[11,"shl","","",50,[[["self"],["i32"]],["u8x4"]]],[11,"shl","","",14,[[["self"],["i32"]],["u16x2"]]],[11,"shl","","",44,[[["self"],["isize"]],["u8x8"]]],[11,"shl","","",51,[[["self"],["i8"]],["i32x4"]]],[11,"shl","","",7,[[["self"],["i32"]],["u32x2"]]],[11,"shl","","",27,[[["self"],["u64"]],["i16x32"]]],[11,"shl","","",12,[[["self"],["i8"]],["u16x8"]]],[11,"shl","","",51,[[["self"],["u64"]],["i32x4"]]],[11,"shl","","",28,[[["self"],["i32"]],["u32x16"]]],[11,"shl","","",3,[[["self"],["isize"]],["u8x64"]]],[11,"shl","","",19,[[["self"],["isize"]],["i8x8"]]],[11,"shl","","",21,[[["self"],["usize"]],["u8x32"]]],[11,"shl","","",46,[[["self"],["u8"]],["i64x8"]]],[11,"shl","","",38,[[["self"],["i16"]],["i32x8"]]],[11,"shl","","",2,[[["self"],["i16"]],["u64x4"]]],[11,"shl","","",50,[[["self"],["i16"]],["u8x4"]]],[11,"shl","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"shl","","",36,[[["self"],["usize"]],["i8x64"]]],[11,"shl","","",4,[[["self"],["u8"]],["i8x2"]]],[11,"shl","","",34,[[["self"],["u8"]],["i16x2"]]],[11,"shl","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"shl","","",2,[[["self"],["u8"]],["u64x4"]]],[11,"shl","","",20,[[["self"],["usize"]],["i64x4"]]],[11,"shl","","",46,[[["self"],["i16"]],["i64x8"]]],[11,"shl","","",3,[[["self"],["u32"]],["u8x64"]]],[11,"shl","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"shl","","",27,[[["self"],["i64"]],["i16x32"]]],[11,"shl","","",49,[[["self"],["isize"]],["u8x2"]]],[11,"shl","","",35,[[["self"],["u8"]],["i64x2"]]],[11,"shl","","",48,[[["self"],["i16"]],["i8x32"]]],[11,"shl","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"shl","","",11,[[["self"],["i8"]],["i32x2"]]],[11,"shl","","",11,[[["self"],["u16"]],["i32x2"]]],[11,"shl","","",43,[[["self"],["u32"]],["u8x16"]]],[11,"shl","","",4,[[["self"],["i32"]],["i8x2"]]],[11,"shl","","",14,[[["self"],["usize"]],["u16x2"]]],[11,"shl","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"shl","","",51,[[["self"],["usize"]],["i32x4"]]],[11,"shl","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"shl","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"shl","","",46,[[["self"],["u64"]],["i64x8"]]],[11,"shl","","",21,[[["self"],["u64"]],["u8x32"]]],[11,"shl","","",38,[[["self"],["u8"]],["i32x8"]]],[11,"shl","","",28,[[["self"],["usize"]],["u32x16"]]],[11,"shl","","",35,[[["self"],["isize"]],["i64x2"]]],[11,"shl","","",36,[[["self"],["u16"]],["i8x64"]]],[11,"shl","","",8,[[["self"],["isize"]],["i16x16"]]],[11,"shl","","",12,[[["self"],["isize"]],["u16x8"]]],[11,"shl","","",20,[[["self"],["i32"]],["i64x4"]]],[11,"shl","","",34,[[["self"],["i8"]],["i16x2"]]],[11,"shl","","",35,[[["self"],["i8"]],["i64x2"]]],[11,"shl","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"shl","","",22,[[["self"],["u32"]],["u16x4"]]],[11,"shl","","",11,[[["self"],["isize"]],["i32x2"]]],[11,"shl","","",17,[[["self"],["i32"]],["u32x4"]]],[11,"shl","","",19,[[["self"],["usize"]],["i8x8"]]],[11,"shl","","",3,[[["self"],["i8"]],["u8x64"]]],[11,"shl","","",19,[[["self"],["u16"]],["i8x8"]]],[11,"shl","","",16,[[["self"],["u32"]],["u64x2"]]],[11,"shl","","",50,[[["self"],["i8"]],["u8x4"]]],[11,"shl","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"shl","","",14,[[["self"],["u32"]],["u16x2"]]],[11,"shl","","",11,[[["self"],["u8"]],["i32x2"]]],[11,"shl","","",14,[[["self"],["i8"]],["u16x2"]]],[11,"shl","","",7,[[["self"],["i16"]],["u32x2"]]],[11,"shl","","",55,[[["self"],["u32"]],["i16x8"]]],[11,"shl","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"shl","","",22,[[["self"],["i8"]],["u16x4"]]],[11,"shl","","",20,[[["self"],["isize"]],["i64x4"]]],[11,"shl","","",33,[[["self"],["i64"]],["i8x16"]]],[11,"shl","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"shl","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"shl","","",48,[[["self"],["isize"]],["i8x32"]]],[11,"shl","","",25,[[["self"],["u16"]],["i16x4"]]],[11,"shl","","",44,[[["self"],["i32"]],["u8x8"]]],[11,"shl","","",35,[[["self"],["usize"]],["i64x2"]]],[11,"shl","","",3,[[["self"],["u64"]],["u8x64"]]],[11,"shl","","",49,[[["self"],["i16"]],["u8x2"]]],[11,"shl","","",17,[[["self"],["isize"]],["u32x4"]]],[11,"shl","","",5,[[["self"],["u8"]],["u32x8"]]],[11,"shl","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"shl","","",8,[[["self"],["usize"]],["i16x16"]]],[11,"shl","","",22,[[["self"],["i16"]],["u16x4"]]],[11,"shl","","",3,[[["self"],["i64"]],["u8x64"]]],[11,"shl","","",5,[[["self"],["isize"]],["u32x8"]]],[11,"shl","","",21,[[["self"],["u16"]],["u8x32"]]],[11,"shl","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"shl","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"shl","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"shl","","",25,[[["self"],["i8"]],["i16x4"]]],[11,"shl","","",36,[[["self"],["isize"]],["i8x64"]]],[11,"shl","","",19,[[["self"],["i64"]],["i8x8"]]],[11,"shl","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"shl","","",51,[[["self"],["u32"]],["i32x4"]]],[11,"shl","","",4,[[["self"],["usize"]],["i8x2"]]],[11,"shl","","",32,[[["self"],["isize"]],["u16x32"]]],[11,"shl","","",55,[[["self"],["u8"]],["i16x8"]]],[11,"shl","","",21,[[["self"],["u32"]],["u8x32"]]],[11,"shl","","",33,[[["self"],["i32"]],["i8x16"]]],[11,"shl","","",22,[[["self"],["i64"]],["u16x4"]]],[11,"shl","","",33,[[["self"],["usize"]],["i8x16"]]],[11,"shl","","",6,[[["self"],["u8"]],["u64x8"]]],[11,"shl","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"shl","","",10,[[["self"],["i32"]],["u16x16"]]],[11,"shl","","",19,[[["self"],["u8"]],["i8x8"]]],[11,"shl","","",50,[[["self"],["u16"]],["u8x4"]]],[11,"shl","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"shl","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"shl","","",5,[[["self"],["i8"]],["u32x8"]]],[11,"shl","","",46,[[["self"],["i8"]],["i64x8"]]],[11,"shl","","",38,[[["self"],["u32"]],["i32x8"]]],[11,"shl","","",40,[[["self"],["i64"]],["i32x16"]]],[11,"shl","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"shl","","",11,[[["self"],["u64"]],["i32x2"]]],[11,"shl","","",55,[[["self"],["isize"]],["i16x8"]]],[11,"shl","","",22,[[["self"],["u8"]],["u16x4"]]],[11,"shl","","",46,[[["self"],["isize"]],["i64x8"]]],[11,"shl","","",43,[[["self"],["i8"]],["u8x16"]]],[11,"shl","","",44,[[["self"],["i64"]],["u8x8"]]],[11,"shl","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"shl","","",27,[[["self"],["u16"]],["i16x32"]]],[11,"shl","","",2,[[["self"],["usize"]],["u64x4"]]],[11,"shl","","",36,[[["self"],["u8"]],["i8x64"]]],[11,"shl","","",55,[[["self"],["i32"]],["i16x8"]]],[11,"shl","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"shl","","",10,[[["self"],["isize"]],["u16x16"]]],[11,"shl","","",40,[[["self"],["i8"]],["i32x16"]]],[11,"shl","","",3,[[["self"],["i32"]],["u8x64"]]],[11,"shl","","",17,[[["self"],["i16"]],["u32x4"]]],[11,"shl","","",12,[[["self"],["usize"]],["u16x8"]]],[11,"shl","","",28,[[["self"],["u16"]],["u32x16"]]],[11,"shl","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"shl","","",6,[[["self"],["i16"]],["u64x8"]]],[11,"shl","","",27,[[["self"],["i8"]],["i16x32"]]],[11,"shl","","",33,[[["self"],["u16"]],["i8x16"]]],[11,"shl","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"shl","","",43,[[["self"],["usize"]],["u8x16"]]],[11,"shl","","",21,[[["self"],["i64"]],["u8x32"]]],[11,"shl","","",14,[[["self"],["i64"]],["u16x2"]]],[11,"shl","","",22,[[["self"],["isize"]],["u16x4"]]],[11,"shl","","",32,[[["self"],["i32"]],["u16x32"]]],[11,"shl","","",3,[[["self"],["usize"]],["u8x64"]]],[11,"shl","","",38,[[["self"],["i64"]],["i32x8"]]],[11,"shl","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"shl","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"shl","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"shl","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"shl","","",22,[[["self"],["u64"]],["u16x4"]]],[11,"shl","","",16,[[["self"],["u8"]],["u64x2"]]],[11,"shl","","",21,[[["self"],["i16"]],["u8x32"]]],[11,"shl","","",5,[[["self"],["usize"]],["u32x8"]]],[11,"shl","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"shl","","",8,[[["self"],["u32"]],["i16x16"]]],[11,"shl","","",7,[[["self"],["i64"]],["u32x2"]]],[11,"shl","","",32,[[["self"],["u32"]],["u16x32"]]],[11,"shl","","",12,[[["self"],["u32"]],["u16x8"]]],[11,"shl","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"shl","","",21,[[["self"],["isize"]],["u8x32"]]],[11,"shl","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"shl","","",35,[[["self"],["u16"]],["i64x2"]]],[11,"shl","","",16,[[["self"],["i8"]],["u64x2"]]],[11,"shl","","",21,[[["self"],["i8"]],["u8x32"]]],[11,"shl","","",19,[[["self"],["u64"]],["i8x8"]]],[11,"shl","","",50,[[["self"],["u64"]],["u8x4"]]],[11,"shl","","",49,[[["self"],["u16"]],["u8x2"]]],[11,"shl","","",43,[[["self"],["u64"]],["u8x16"]]],[11,"shl","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"shl","","",46,[[["self"],["u32"]],["i64x8"]]],[11,"shl","","",43,[[["self"],["u16"]],["u8x16"]]],[11,"shl","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"shl","","",16,[[["self"],["i32"]],["u64x2"]]],[11,"shl","","",40,[[["self"],["isize"]],["i32x16"]]],[11,"shl","","",3,[[["self"],["u16"]],["u8x64"]]],[11,"shl","","",8,[[["self"],["u8"]],["i16x16"]]],[11,"shl","","",34,[[["self"],["u64"]],["i16x2"]]],[11,"shl","","",11,[[["self"],["i16"]],["i32x2"]]],[11,"shl","","",2,[[["self"],["i8"]],["u64x4"]]],[11,"shl","","",7,[[["self"],["u64"]],["u32x2"]]],[11,"shl","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"shl","","",10,[[["self"],["u8"]],["u16x16"]]],[11,"shl","","",46,[[["self"],["u16"]],["i64x8"]]],[11,"shl","","",44,[[["self"],["i8"]],["u8x8"]]],[11,"shl","","",22,[[["self"],["usize"]],["u16x4"]]],[11,"shl","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"shl","","",44,[[["self"],["i16"]],["u8x8"]]],[11,"shl","","",51,[[["self"],["isize"]],["i32x4"]]],[11,"shl","","",6,[[["self"],["u32"]],["u64x8"]]],[11,"shl","","",25,[[["self"],["u64"]],["i16x4"]]],[11,"shl","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"shl","","",54,[[["self"],["u16"]],["i8x4"]]],[11,"shl","","",46,[[["self"],["i32"]],["i64x8"]]],[11,"shl","","",38,[[["self"],["u64"]],["i32x8"]]],[11,"shl","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"shl","","",8,[[["self"],["u64"]],["i16x16"]]],[11,"shl","","",50,[[["self"],["isize"]],["u8x4"]]],[11,"shl","","",36,[[["self"],["i16"]],["i8x64"]]],[11,"shl","","",40,[[["self"],["u64"]],["i32x16"]]],[11,"shl","","",17,[[["self"],["u64"]],["u32x4"]]],[11,"shl","","",40,[[["self"],["usize"]],["i32x16"]]],[11,"shl","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"shl","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"shl","","",43,[[["self"],["i64"]],["u8x16"]]],[11,"shl","","",36,[[["self"],["i32"]],["i8x64"]]],[11,"shl","","",33,[[["self"],["i16"]],["i8x16"]]],[11,"shl","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"shl","","",12,[[["self"],["i16"]],["u16x8"]]],[11,"shl","","",36,[[["self"],["i64"]],["i8x64"]]],[11,"shl","","",11,[[["self"],["usize"]],["i32x2"]]],[11,"shl","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"shl","","",55,[[["self"],["u16"]],["i16x8"]]],[11,"shl","","",6,[[["self"],["isize"]],["u64x8"]]],[11,"shl","","",2,[[["self"],["isize"]],["u64x4"]]],[11,"shl","","",38,[[["self"],["i8"]],["i32x8"]]],[11,"shl","","",16,[[["self"],["i64"]],["u64x2"]]],[11,"shl","","",43,[[["self"],["i32"]],["u8x16"]]],[11,"shl","","",6,[[["self"],["i32"]],["u64x8"]]],[11,"shl","","",12,[[["self"],["i32"]],["u16x8"]]],[11,"shl","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"shl","","",35,[[["self"],["i32"]],["i64x2"]]],[11,"shl","","",3,[[["self"],["i16"]],["u8x64"]]],[11,"shl","","",12,[[["self"],["u64"]],["u16x8"]]],[11,"shl","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"shl","","",11,[[["self"],["i64"]],["i32x2"]]],[11,"shl","","",20,[[["self"],["u8"]],["i64x4"]]],[11,"shl","","",50,[[["self"],["i64"]],["u8x4"]]],[11,"shl","","",35,[[["self"],["u64"]],["i64x2"]]],[11,"shl","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"shl","","",32,[[["self"],["u8"]],["u16x32"]]],[11,"shl","","",25,[[["self"],["i64"]],["i16x4"]]],[11,"shl","","",17,[[["self"],["u8"]],["u32x4"]]],[11,"shl","","",49,[[["self"],["i64"]],["u8x2"]]],[11,"shl","","",16,[[["self"],["u16"]],["u64x2"]]],[11,"shl","","",33,[[["self"],["isize"]],["i8x16"]]],[11,"shl","","",25,[[["self"],["u32"]],["i16x4"]]],[11,"shl","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"shl","","",17,[[["self"],["i8"]],["u32x4"]]],[11,"shl","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"shl","","",38,[[["self"],["u16"]],["i32x8"]]],[11,"shl","","",6,[[["self"],["i64"]],["u64x8"]]],[11,"shl","","",48,[[["self"],["u64"]],["i8x32"]]],[11,"shl","","",28,[[["self"],["i16"]],["u32x16"]]],[11,"shl","","",34,[[["self"],["i64"]],["i16x2"]]],[11,"shl","","",44,[[["self"],["u32"]],["u8x8"]]],[11,"shl","","",4,[[["self"],["isize"]],["i8x2"]]],[11,"shl","","",49,[[["self"],["i32"]],["u8x2"]]],[11,"shl","","",7,[[["self"],["isize"]],["u32x2"]]],[11,"shl","","",8,[[["self"],["i32"]],["i16x16"]]],[11,"shl","","",17,[[["self"],["i64"]],["u32x4"]]],[11,"shl","","",38,[[["self"],["isize"]],["i32x8"]]],[11,"shl","","",14,[[["self"],["isize"]],["u16x2"]]],[11,"shl","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"shl","","",48,[[["self"],["i64"]],["i8x32"]]],[11,"shl","","",4,[[["self"],["u64"]],["i8x2"]]],[11,"shl","","",10,[[["self"],["i8"]],["u16x16"]]],[11,"shl","","",48,[[["self"],["i32"]],["i8x32"]]],[11,"shl","","",49,[[["self"],["u64"]],["u8x2"]]],[11,"shl","","",54,[[["self"],["u8"]],["i8x4"]]],[11,"shl","","",54,[[["self"],["i64"]],["i8x4"]]],[11,"shl","","",10,[[["self"],["u64"]],["u16x16"]]],[11,"shl","","",32,[[["self"],["i64"]],["u16x32"]]],[11,"shl","","",32,[[["self"],["i8"]],["u16x32"]]],[11,"shl","","",44,[[["self"],["u64"]],["u8x8"]]],[11,"shl","","",33,[[["self"],["u8"]],["i8x16"]]],[11,"shl","","",11,[[["self"],["u32"]],["i32x2"]]],[11,"shl","","",5,[[["self"],["u16"]],["u32x8"]]],[11,"shl","","",27,[[["self"],["isize"]],["i16x32"]]],[11,"shl","","",34,[[["self"],["isize"]],["i16x2"]]],[11,"shl","","",40,[[["self"],["u32"]],["i32x16"]]],[11,"shl","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"shl","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"shl","","",20,[[["self"],["u64"]],["i64x4"]]],[11,"shl","","",44,[[["self"],["usize"]],["u8x8"]]],[11,"shl","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"shl","","",44,[[["self"],["u16"]],["u8x8"]]],[11,"shl","","",54,[[["self"],["i16"]],["i8x4"]]],[11,"shl","","",55,[[["self"],["usize"]],["i16x8"]]],[11,"shl","","",25,[[["self"],["isize"]],["i16x4"]]],[11,"shl","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"shl","","",43,[[["self"],["isize"]],["u8x16"]]],[11,"shl","","",51,[[["self"],["u16"]],["i32x4"]]],[11,"shl","","",28,[[["self"],["i64"]],["u32x16"]]],[11,"shl","","",2,[[["self"],["u16"]],["u64x4"]]],[11,"shl","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"shl","","",54,[[["self"],["isize"]],["i8x4"]]],[11,"shl","","",19,[[["self"],["u32"]],["i8x8"]]],[11,"shl","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"shl","","",7,[[["self"],["u16"]],["u32x2"]]],[11,"shl","","",19,[[["self"],["i16"]],["i8x8"]]],[11,"shl","","",20,[[["self"],["i8"]],["i64x4"]]],[11,"shl","","",7,[[["self"],["u8"]],["u32x2"]]],[11,"shl","","",14,[[["self"],["i16"]],["u16x2"]]],[11,"shl","","",8,[[["self"],["u16"]],["i16x16"]]],[11,"shl","","",16,[[["self"],["isize"]],["u64x2"]]],[11,"shl","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"shl","","",48,[[["self"],["u32"]],["i8x32"]]],[11,"shl","","",5,[[["self"],["i32"]],["u32x8"]]],[11,"shl","","",7,[[["self"],["usize"]],["u32x2"]]],[11,"shl","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"shl","","",34,[[["self"],["u32"]],["i16x2"]]],[11,"shl","","",40,[[["self"],["i16"]],["i32x16"]]],[11,"shl","","",55,[[["self"],["u64"]],["i16x8"]]],[11,"shl","","",46,[[["self"],["usize"]],["i64x8"]]],[11,"shl","","",34,[[["self"],["i32"]],["i16x2"]]],[11,"shl","","",33,[[["self"],["u32"]],["i8x16"]]],[11,"shl","","",40,[[["self"],["u8"]],["i32x16"]]],[11,"shl","","",36,[[["self"],["u64"]],["i8x64"]]],[11,"shl","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"shl","","",28,[[["self"],["isize"]],["u32x16"]]],[11,"shl","","",5,[[["self"],["u64"]],["u32x8"]]],[11,"shl","","",4,[[["self"],["u32"]],["i8x2"]]],[11,"shl","","",27,[[["self"],["u32"]],["i16x32"]]],[11,"shl","","",48,[[["self"],["u8"]],["i8x32"]]],[11,"shl","","",2,[[["self"],["u32"]],["u64x4"]]],[11,"shl","","",10,[[["self"],["usize"]],["u16x16"]]],[11,"shl","","",51,[[["self"],["u8"]],["i32x4"]]],[11,"shl","","",43,[[["self"],["i16"]],["u8x16"]]],[11,"shl","","",25,[[["self"],["i32"]],["i16x4"]]],[11,"shl","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"shl","","",12,[[["self"],["u8"]],["u16x8"]]],[11,"shl","","",14,[[["self"],["u8"]],["u16x2"]]],[11,"shl","","",32,[[["self"],["i16"]],["u16x32"]]],[11,"shl","","",25,[[["self"],["usize"]],["i16x4"]]],[11,"shl","","",27,[[["self"],["i32"]],["i16x32"]]],[11,"shl","","",38,[[["self"],["usize"]],["i32x8"]]],[11,"shl","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"shl","","",48,[[["self"],["usize"]],["i8x32"]]],[11,"shl","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"shl","","",50,[[["self"],["usize"]],["u8x4"]]],[11,"shl","","",32,[[["self"],["usize"]],["u16x32"]]],[11,"shl","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"shl","","",2,[[["self"],["i64"]],["u64x4"]]],[11,"shl","","",10,[[["self"],["i16"]],["u16x16"]]],[11,"shl","","",34,[[["self"],["usize"]],["i16x2"]]],[11,"shl","","",12,[[["self"],["i64"]],["u16x8"]]],[11,"shl","","",40,[[["self"],["u16"]],["i32x16"]]],[11,"shl","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"shl","","",6,[[["self"],["usize"]],["u64x8"]]],[11,"shl","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"shl","","",21,[[["self"],["i32"]],["u8x32"]]],[11,"shl","","",55,[[["self"],["i8"]],["i16x8"]]],[11,"shl","","",33,[[["self"],["u64"]],["i8x16"]]],[11,"shl","","",49,[[["self"],["u32"]],["u8x2"]]],[11,"shl","","",4,[[["self"],["i16"]],["i8x2"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"add_assign","","",38,N],[11,"add_assign","","",16,N],[11,"add_assign","","",35,N],[11,"add_assign","","",43,N],[11,"add_assign","","",4,N],[11,"add_assign","","",60,N],[11,"add_assign","","",33,N],[11,"add_assign","","",62,N],[11,"add_assign","","",51,N],[11,"add_assign","","",34,N],[11,"add_assign","","",43,N],[11,"add_assign","","",27,N],[11,"add_assign","","",17,N],[11,"add_assign","","",48,N],[11,"add_assign","","",36,N],[11,"add_assign","","",58,N],[11,"add_assign","","",10,N],[11,"add_assign","","",8,N],[11,"add_assign","","",17,N],[11,"add_assign","","",5,N],[11,"add_assign","","",7,N],[11,"add_assign","","",59,N],[11,"add_assign","","",20,N],[11,"add_assign","","",14,N],[11,"add_assign","","",14,N],[11,"add_assign","","",40,N],[11,"add_assign","","",44,N],[11,"add_assign","","",49,N],[11,"add_assign","","",36,N],[11,"add_assign","","",61,N],[11,"add_assign","","",50,N],[11,"add_assign","","",49,N],[11,"add_assign","","",28,N],[11,"add_assign","","",2,N],[11,"add_assign","","",59,N],[11,"add_assign","","",11,N],[11,"add_assign","","",8,N],[11,"add_assign","","",50,N],[11,"add_assign","","",56,N],[11,"add_assign","","",25,N],[11,"add_assign","","",4,N],[11,"add_assign","","",33,N],[11,"add_assign","","",21,N],[11,"add_assign","","",54,N],[11,"add_assign","","",12,N],[11,"add_assign","","",57,N],[11,"add_assign","","",28,N],[11,"add_assign","","",6,N],[11,"add_assign","","",32,N],[11,"add_assign","","",22,N],[11,"add_assign","","",35,N],[11,"add_assign","","",57,N],[11,"add_assign","","",55,N],[11,"add_assign","","",46,N],[11,"add_assign","","",5,N],[11,"add_assign","","",21,N],[11,"add_assign","","",3,N],[11,"add_assign","","",60,N],[11,"add_assign","","",34,N],[11,"add_assign","","",46,N],[11,"add_assign","","",6,N],[11,"add_assign","","",11,N],[11,"add_assign","","",2,N],[11,"add_assign","","",7,N],[11,"add_assign","","",22,N],[11,"add_assign","","",61,N],[11,"add_assign","","",54,N],[11,"add_assign","","",56,N],[11,"add_assign","","",27,N],[11,"add_assign","","",19,N],[11,"add_assign","","",44,N],[11,"add_assign","","",40,N],[11,"add_assign","","",3,N],[11,"add_assign","","",51,N],[11,"add_assign","","",32,N],[11,"add_assign","","",58,N],[11,"add_assign","","",12,N],[11,"add_assign","","",19,N],[11,"add_assign","","",62,N],[11,"add_assign","","",20,N],[11,"add_assign","","",55,N],[11,"add_assign","","",16,N],[11,"add_assign","","",10,N],[11,"add_assign","","",48,N],[11,"add_assign","","",38,N],[11,"add_assign","","",25,N],[11,"from","","",50,[[["m16x4"]],["u8x4"]]],[11,"from","","",54,[[["m32x4"]],["i8x4"]]],[11,"from","","",57,[[["u8x8"]],["f64x8"]]],[11,"from","","",51,[[["f64x4"]],["i32x4"]]],[11,"from","","",62,[[["m1x8"]],["f32x8"]]],[11,"from","","",22,[[["m64x4"]],["u16x4"]]],[11,"from","","",56,[[["i32x4"]],["f32x4"]]],[11,"from","","",19,[[["u32x8"]],["i8x8"]]],[11,"from","","",2,[[["u8x4"]],["u64x4"]]],[11,"from","","",11,[[["m16x2"]],["i32x2"]]],[11,"from","","",17,[[["m16x4"]],["u32x4"]]],[11,"from","","",5,[[["u16x8"]],["u32x8"]]],[11,"from","","",60,[[["i64x2"]],["f32x2"]]],[11,"from","","",59,[[["u8x2"]],["f64x2"]]],[11,"from","","",62,[[["m16x8"]],["f32x8"]]],[11,"from","","",49,[[["m8x2"]],["u8x2"]]],[11,"from","","",55,[[["f32x8"]],["i16x8"]]],[11,"from","","",5,[[["i16x8"]],["u32x8"]]],[11,"from","","",7,[[["m8x2"]],["u32x2"]]],[11,"from","","",12,[[["i16x8"]],["u16x8"]]],[11,"from","","",28,[[["m1x16"]],["u32x16"]]],[11,"from","","",4,[[["i64x2"]],["i8x2"]]],[11,"from","","",54,[[["u64x4"]],["i8x4"]]],[11,"from","","",49,[[["i8x2"]],["u8x2"]]],[11,"from","","",25,[[["u8x4"]],["i16x4"]]],[11,"from","","",20,[[["f64x4"]],["i64x4"]]],[11,"from","","",61,[[["u8x4"]],["f64x4"]]],[11,"from","","",14,[[["m64x2"]],["u16x2"]]],[11,"from","","",56,[[["u8x4"]],["f32x4"]]],[11,"from","","",57,[[["i32x8"]],["f64x8"]]],[11,"from","","",19,[[["m32x8"]],["i8x8"]]],[11,"from","","",43,[[["m8x16"]],["u8x16"]]],[11,"from","","",42,[[["m32x4"]],["m16x4"]]],[11,"from","","",25,[[["i8x4"]],["i16x4"]]],[11,"from","","",46,[[["i8x8"]],["i64x8"]]],[11,"from","","",25,[[["m32x4"]],["i16x4"]]],[11,"from","","",20,[[["u32x4"]],["i64x4"]]],[11,"from","","",25,[[["u16x4"]],["i16x4"]]],[11,"from","","",50,[[["m32x4"]],["u8x4"]]],[11,"from","","",58,[[["m16x16"]],["f32x16"]]],[11,"from","","",49,[[["m32x2"]],["u8x2"]]],[11,"from","","",44,[[["m1x8"]],["u8x8"]]],[11,"from","","",13,[[["m32x8"]],["m1x8"]]],[11,"from","","",53,[[["m32x2"]],["m64x2"]]],[11,"from","","",2,[[["m64x4"]],["u64x4"]]],[11,"from","","",40,[[["m8x16"]],["i32x16"]]],[11,"from","","",29,[[["m16x4"]],["m32x4"]]],[11,"from","","",52,[[["m8x2"]],["m16x2"]]],[11,"from","","",25,[[["m64x4"]],["i16x4"]]],[11,"from","","",10,[[["i8x16"]],["u16x16"]]],[11,"from","","",22,[[["u32x4"]],["u16x4"]]],[11,"from","","",12,[[["m32x8"]],["u16x8"]]],[11,"from","","",50,[[["f32x4"]],["u8x4"]]],[11,"from","","",61,[[["i8x4"]],["f64x4"]]],[11,"from","","",44,[[["i8x8"]],["u8x8"]]],[11,"from","","",44,[[["u16x8"]],["u8x8"]]],[11,"from","","",16,[[["m32x2"]],["u64x2"]]],[11,"from","","",60,[[["m64x2"]],["f32x2"]]],[11,"from","","",54,[[["m8x4"]],["i8x4"]]],[11,"from","","",28,[[["f32x16"]],["u32x16"]]],[11,"from","","",56,[[["i64x4"]],["f32x4"]]],[11,"from","","",2,[[["m16x4"]],["u64x4"]]],[11,"from","","",50,[[["u64x4"]],["u8x4"]]],[11,"from","","",55,[[["m1x8"]],["i16x8"]]],[11,"from","","",16,[[["m16x2"]],["u64x2"]]],[11,"from","","",9,[[["m64x2"]],["m8x2"]]],[11,"from","","",60,[[["i32x2"]],["f32x2"]]],[11,"from","","",40,[[["u16x16"]],["i32x16"]]],[11,"from","","",60,[[["u16x2"]],["f32x2"]]],[11,"from","","",33,[[["f32x16"]],["i8x16"]]],[11,"from","","",17,[[["i16x4"]],["u32x4"]]],[11,"from","","",32,[[["m1x32"]],["u16x32"]]],[11,"from","","",50,[[["u16x4"]],["u8x4"]]],[11,"from","","",59,[[["f32x2"]],["f64x2"]]],[11,"from","","",50,[[["u32x4"]],["u8x4"]]],[11,"from","","",51,[[["i16x4"]],["i32x4"]]],[11,"from","","",10,[[["m16x16"]],["u16x16"]]],[11,"from","","",27,[[["i8x32"]],["i16x32"]]],[11,"from","","",62,[[["f64x8"]],["f32x8"]]],[11,"from","","",21,[[["i8x32"]],["u8x32"]]],[11,"from","","",19,[[["u64x8"]],["i8x8"]]],[11,"from","","",34,[[["m32x2"]],["i16x2"]]],[11,"from","","",8,[[["u16x16"]],["i16x16"]]],[11,"from","","",42,[[["m64x4"]],["m16x4"]]],[11,"from","","",43,[[["i8x16"]],["u8x16"]]],[11,"from","","",20,[[["u16x4"]],["i64x4"]]],[11,"from","","",19,[[["i16x8"]],["i8x8"]]],[11,"from","","",38,[[["u32x8"]],["i32x8"]]],[11,"from","","",6,[[["m8x8"]],["u64x8"]]],[11,"from","","",55,[[["u16x8"]],["i16x8"]]],[11,"from","","",59,[[["i16x2"]],["f64x2"]]],[11,"from","","",19,[[["m1x8"]],["i8x8"]]],[11,"from","","",38,[[["u8x8"]],["i32x8"]]],[11,"from","","",34,[[["u8x2"]],["i16x2"]]],[11,"from","","",2,[[["m8x4"]],["u64x4"]]],[11,"from","","",49,[[["i64x2"]],["u8x2"]]],[11,"from","","",20,[[["i8x4"]],["i64x4"]]],[11,"from","","",33,[[["m8x16"]],["i8x16"]]],[11,"from","","",13,[[["m8x8"]],["m1x8"]]],[11,"from","","",23,[[["m64x2"]],["m32x2"]]],[11,"from","","",15,[[["m1x32"]],["m8x32"]]],[11,"from","","",37,[[["m8x16"]],["m1x16"]]],[11,"from","","",46,[[["m32x8"]],["i64x8"]]],[11,"from","","",55,[[["i32x8"]],["i16x8"]]],[11,"from","","",62,[[["i16x8"]],["f32x8"]]],[11,"from","","",28,[[["i16x16"]],["u32x16"]]],[11,"from","","",48,[[["u8x32"]],["i8x32"]]],[11,"from","","",23,[[["m16x2"]],["m32x2"]]],[11,"from","","",6,[[["f64x8"]],["u64x8"]]],[11,"from","","",50,[[["f64x4"]],["u8x4"]]],[11,"from","","",17,[[["i8x4"]],["u32x4"]]],[11,"from","","",34,[[["m8x2"]],["i16x2"]]],[11,"from","","",5,[[["u64x8"]],["u32x8"]]],[11,"from","","",34,[[["f64x2"]],["i16x2"]]],[11,"from","","",22,[[["f32x4"]],["u16x4"]]],[11,"from","","",17,[[["m64x4"]],["u32x4"]]],[11,"from","","",39,[[["m1x8"]],["m16x8"]]],[11,"from","","",56,[[["u16x4"]],["f32x4"]]],[11,"from","","",9,[[["m16x2"]],["m8x2"]]],[11,"from","","",7,[[["m32x2"]],["u32x2"]]],[11,"from","","",49,[[["u64x2"]],["u8x2"]]],[11,"from","","",58,[[["i8x16"]],["f32x16"]]],[11,"from","","",11,[[["m8x2"]],["i32x2"]]],[11,"from","","",5,[[["i8x8"]],["u32x8"]]],[11,"from","","",53,[[["m16x2"]],["m64x2"]]],[11,"from","","",14,[[["i32x2"]],["u16x2"]]],[11,"from","","",8,[[["i8x16"]],["i16x16"]]],[11,"from","","",5,[[["m16x8"]],["u32x8"]]],[11,"from","","",16,[[["i8x2"]],["u64x2"]]],[11,"from","","",14,[[["i8x2"]],["u16x2"]]],[11,"from","","",38,[[["u16x8"]],["i32x8"]]],[11,"from","","",44,[[["i32x8"]],["u8x8"]]],[11,"from","","",5,[[["i64x8"]],["u32x8"]]],[11,"from","","",54,[[["i32x4"]],["i8x4"]]],[11,"from","","",35,[[["f64x2"]],["i64x2"]]],[11,"from","","",59,[[["i64x2"]],["f64x2"]]],[11,"from","","",2,[[["u32x4"]],["u64x4"]]],[11,"from","","",39,[[["m32x8"]],["m16x8"]]],[11,"from","","",2,[[["u16x4"]],["u64x4"]]],[11,"from","","",57,[[["i16x8"]],["f64x8"]]],[11,"from","","",25,[[["u32x4"]],["i16x4"]]],[11,"from","","",38,[[["m16x8"]],["i32x8"]]],[11,"from","","",41,[[["m16x16"]],["m8x16"]]],[11,"from","","",20,[[["m8x4"]],["i64x4"]]],[11,"from","","",54,[[["f32x4"]],["i8x4"]]],[11,"from","","",50,[[["m8x4"]],["u8x4"]]],[11,"from","","",58,[[["u32x16"]],["f32x16"]]],[11,"from","","",55,[[["u64x8"]],["i16x8"]]],[11,"from","","",42,[[["m8x4"]],["m16x4"]]],[11,"from","","",54,[[["i64x4"]],["i8x4"]]],[11,"from","","",50,[[["m64x4"]],["u8x4"]]],[11,"from","","",6,[[["u8x8"]],["u64x8"]]],[11,"from","","",57,[[["i64x8"]],["f64x8"]]],[11,"from","","",27,[[["m1x32"]],["i16x32"]]],[11,"from","","",2,[[["i16x4"]],["u64x4"]]],[11,"from","","",38,[[["m1x8"]],["i32x8"]]],[11,"from","","",58,[[["u16x16"]],["f32x16"]]],[11,"from","","",35,[[["u16x2"]],["i64x2"]]],[11,"from","","",4,[[["m32x2"]],["i8x2"]]],[11,"from","","",56,[[["u32x4"]],["f32x4"]]],[11,"from","","",25,[[["f32x4"]],["i16x4"]]],[11,"from","","",7,[[["m16x2"]],["u32x2"]]],[11,"from","","",40,[[["m16x16"]],["i32x16"]]],[11,"from","","",61,[[["i16x4"]],["f64x4"]]],[11,"from","","",48,[[["m8x32"]],["i8x32"]]],[11,"from","","",4,[[["u32x2"]],["i8x2"]]],[11,"from","","",56,[[["m64x4"]],["f32x4"]]],[11,"from","","",56,[[["m16x4"]],["f32x4"]]],[11,"from","","",44,[[["m8x8"]],["u8x8"]]],[11,"from","","",22,[[["m8x4"]],["u16x4"]]],[11,"from","","",11,[[["u64x2"]],["i32x2"]]],[11,"from","","",60,[[["m8x2"]],["f32x2"]]],[11,"from","","",37,[[["m16x16"]],["m1x16"]]],[11,"from","","",61,[[["m32x4"]],["f64x4"]]],[11,"from","","",17,[[["u16x4"]],["u32x4"]]],[11,"from","","",12,[[["i8x8"]],["u16x8"]]],[11,"from","","",57,[[["i8x8"]],["f64x8"]]],[11,"from","","",22,[[["i16x4"]],["u16x4"]]],[11,"from","","",14,[[["m32x2"]],["u16x2"]]],[11,"from","","",35,[[["i16x2"]],["i64x2"]]],[11,"from","","",46,[[["f64x8"]],["i64x8"]]],[11,"from","","",61,[[["f32x4"]],["f64x4"]]],[11,"from","","",4,[[["m8x2"]],["i8x2"]]],[11,"from","","",11,[[["m32x2"]],["i32x2"]]],[11,"from","","",17,[[["m8x4"]],["u32x4"]]],[11,"from","","",19,[[["u8x8"]],["i8x8"]]],[11,"from","","",31,[[["m1x16"]],["m16x16"]]],[11,"from","","",29,[[["m8x4"]],["m32x4"]]],[11,"from","","",33,[[["m16x16"]],["i8x16"]]],[11,"from","","",11,[[["u16x2"]],["i32x2"]]],[11,"from","","",61,[[["m8x4"]],["f64x4"]]],[11,"from","","",20,[[["f32x4"]],["i64x4"]]],[11,"from","","",60,[[["m32x2"]],["f32x2"]]],[11,"from","","",7,[[["f32x2"]],["u32x2"]]],[11,"from","","",8,[[["u8x16"]],["i16x16"]]],[11,"from","","",20,[[["m64x4"]],["i64x4"]]],[11,"from","","",20,[[["i16x4"]],["i64x4"]]],[11,"from","","",57,[[["f32x8"]],["f64x8"]]],[11,"from","","",55,[[["f64x8"]],["i16x8"]]],[11,"from","","",49,[[["m64x2"]],["u8x2"]]],[11,"from","","",16,[[["u32x2"]],["u64x2"]]],[11,"from","","",19,[[["m16x8"]],["i8x8"]]],[11,"from","","",12,[[["u64x8"]],["u16x8"]]],[11,"from","","",17,[[["f64x4"]],["u32x4"]]],[11,"from","","",53,[[["m8x2"]],["m64x2"]]],[11,"from","","",12,[[["u8x8"]],["u16x8"]]],[11,"from","","",18,[[["m16x8"]],["m8x8"]]],[11,"from","","",11,[[["f64x2"]],["i32x2"]]],[11,"from","","",57,[[["m16x8"]],["f64x8"]]],[11,"from","","",6,[[["f32x8"]],["u64x8"]]],[11,"from","","",43,[[["m1x16"]],["u8x16"]]],[11,"from","","",6,[[["i32x8"]],["u64x8"]]],[11,"from","","",55,[[["u32x8"]],["i16x8"]]],[11,"from","","",54,[[["m16x4"]],["i8x4"]]],[11,"from","","",28,[[["m8x16"]],["u32x16"]]],[11,"from","","",12,[[["u32x8"]],["u16x8"]]],[11,"from","","",54,[[["i16x4"]],["i8x4"]]],[11,"from","","",57,[[["u64x8"]],["f64x8"]]],[11,"from","","",38,[[["i16x8"]],["i32x8"]]],[11,"from","","",62,[[["u64x8"]],["f32x8"]]],[11,"from","","",61,[[["i64x4"]],["f64x4"]]],[11,"from","","",35,[[["i8x2"]],["i64x2"]]],[11,"from","","",14,[[["f32x2"]],["u16x2"]]],[11,"from","","",2,[[["i32x4"]],["u64x4"]]],[11,"from","","",50,[[["i32x4"]],["u8x4"]]],[11,"from","","",6,[[["i8x8"]],["u64x8"]]],[11,"from","","",35,[[["u8x2"]],["i64x2"]]],[11,"from","","",2,[[["f64x4"]],["u64x4"]]],[11,"from","","",19,[[["u16x8"]],["i8x8"]]],[11,"from","","",49,[[["i32x2"]],["u8x2"]]],[11,"from","","",11,[[["u32x2"]],["i32x2"]]],[11,"from","","",57,[[["u32x8"]],["f64x8"]]],[11,"from","","",31,[[["m8x16"]],["m16x16"]]],[11,"from","","",14,[[["f64x2"]],["u16x2"]]],[11,"from","","",51,[[["i8x4"]],["i32x4"]]],[11,"from","","",7,[[["i8x2"]],["u32x2"]]],[11,"from","","",62,[[["i64x8"]],["f32x8"]]],[11,"from","","",34,[[["u16x2"]],["i16x2"]]],[11,"from","","",10,[[["u8x16"]],["u16x16"]]],[11,"from","","",61,[[["u64x4"]],["f64x4"]]],[11,"from","","",50,[[["i64x4"]],["u8x4"]]],[11,"from","","",28,[[["i8x16"]],["u32x16"]]],[11,"from","","",25,[[["u64x4"]],["i16x4"]]],[11,"from","","",12,[[["m1x8"]],["u16x8"]]],[11,"from","","",2,[[["m32x4"]],["u64x4"]]],[11,"from","","",35,[[["m32x2"]],["i64x2"]]],[11,"from","","",44,[[["u64x8"]],["u8x8"]]],[11,"from","","",30,[[["m1x8"]],["m32x8"]]],[11,"from","","",61,[[["i32x4"]],["f64x4"]]],[11,"from","","",40,[[["u8x16"]],["i32x16"]]],[11,"from","","",27,[[["u16x32"]],["i16x32"]]],[11,"from","","",22,[[["i8x4"]],["u16x4"]]],[11,"from","","",49,[[["f64x2"]],["u8x2"]]],[11,"from","","",35,[[["u64x2"]],["i64x2"]]],[11,"from","","",5,[[["f64x8"]],["u32x8"]]],[11,"from","","",43,[[["f32x16"]],["u8x16"]]],[11,"from","","",16,[[["f64x2"]],["u64x2"]]],[11,"from","","",16,[[["i64x2"]],["u64x2"]]],[11,"from","","",14,[[["i64x2"]],["u16x2"]]],[11,"from","","",20,[[["m16x4"]],["i64x4"]]],[11,"from","","",60,[[["u8x2"]],["f32x2"]]],[11,"from","","",55,[[["u8x8"]],["i16x8"]]],[11,"from","","",19,[[["i32x8"]],["i8x8"]]],[11,"from","","",13,[[["m16x8"]],["m1x8"]]],[11,"from","","",61,[[["u16x4"]],["f64x4"]]],[11,"from","","",55,[[["i64x8"]],["i16x8"]]],[11,"from","","",46,[[["u64x8"]],["i64x8"]]],[11,"from","","",7,[[["u8x2"]],["u32x2"]]],[11,"from","","",60,[[["i8x2"]],["f32x2"]]],[11,"from","","",6,[[["m1x8"]],["u64x8"]]],[11,"from","","",16,[[["u8x2"]],["u64x2"]]],[11,"from","","",4,[[["m64x2"]],["i8x2"]]],[11,"from","","",30,[[["m16x8"]],["m32x8"]]],[11,"from","","",33,[[["i16x16"]],["i8x16"]]],[11,"from","","",61,[[["m64x4"]],["f64x4"]]],[11,"from","","",34,[[["i64x2"]],["i16x2"]]],[11,"from","","",40,[[["u32x16"]],["i32x16"]]],[11,"from","","",52,[[["m32x2"]],["m16x2"]]],[11,"from","","",22,[[["i64x4"]],["u16x4"]]],[11,"from","","",60,[[["m16x2"]],["f32x2"]]],[11,"from","","",58,[[["i16x16"]],["f32x16"]]],[11,"from","","",57,[[["m32x8"]],["f64x8"]]],[11,"from","","",17,[[["m32x4"]],["u32x4"]]],[11,"from","","",59,[[["u32x2"]],["f64x2"]]],[11,"from","","",52,[[["m64x2"]],["m16x2"]]],[11,"from","","",60,[[["u32x2"]],["f32x2"]]],[11,"from","","",48,[[["i16x32"]],["i8x32"]]],[11,"from","","",7,[[["f64x2"]],["u32x2"]]],[11,"from","","",41,[[["m1x16"]],["m8x16"]]],[11,"from","","",51,[[["f32x4"]],["i32x4"]]],[11,"from","","",56,[[["i16x4"]],["f32x4"]]],[11,"from","","",12,[[["i64x8"]],["u16x8"]]],[11,"from","","",58,[[["m8x16"]],["f32x16"]]],[11,"from","","",22,[[["u8x4"]],["u16x4"]]],[11,"from","","",58,[[["u8x16"]],["f32x16"]]],[11,"from","","",51,[[["u16x4"]],["i32x4"]]],[11,"from","","",34,[[["u32x2"]],["i16x2"]]],[11,"from","","",28,[[["u8x16"]],["u32x16"]]],[11,"from","","",44,[[["i64x8"]],["u8x8"]]],[11,"from","","",8,[[["m1x16"]],["i16x16"]]],[11,"from","","",39,[[["m8x8"]],["m16x8"]]],[11,"from","","",25,[[["f64x4"]],["i16x4"]]],[11,"from","","",46,[[["u8x8"]],["i64x8"]]],[11,"from","","",22,[[["m16x4"]],["u16x4"]]],[11,"from","","",55,[[["m16x8"]],["i16x8"]]],[11,"from","","",43,[[["i16x16"]],["u8x16"]]],[11,"from","","",12,[[["m16x8"]],["u16x8"]]],[11,"from","","",25,[[["m16x4"]],["i16x4"]]],[11,"from","","",12,[[["f64x8"]],["u16x8"]]],[11,"from","","",9,[[["m32x2"]],["m8x2"]]],[11,"from","","",11,[[["i8x2"]],["i32x2"]]],[11,"from","","",5,[[["i32x8"]],["u32x8"]]],[11,"from","","",44,[[["f32x8"]],["u8x8"]]],[11,"from","","",61,[[["u32x4"]],["f64x4"]]],[11,"from","","",34,[[["m64x2"]],["i16x2"]]],[11,"from","","",21,[[["u16x32"]],["u8x32"]]],[11,"from","","",2,[[["i8x4"]],["u64x4"]]],[11,"from","","",2,[[["f32x4"]],["u64x4"]]],[11,"from","","",14,[[["u64x2"]],["u16x2"]]],[11,"from","","",20,[[["u64x4"]],["i64x4"]]],[11,"from","","",17,[[["u8x4"]],["u32x4"]]],[11,"from","","",51,[[["m64x4"]],["i32x4"]]],[11,"from","","",28,[[["i32x16"]],["u32x16"]]],[11,"from","","",51,[[["u8x4"]],["i32x4"]]],[11,"from","","",55,[[["m32x8"]],["i16x8"]]],[11,"from","","",46,[[["f32x8"]],["i64x8"]]],[11,"from","","",59,[[["m8x2"]],["f64x2"]]],[11,"from","","",23,[[["m8x2"]],["m32x2"]]],[11,"from","","",28,[[["m16x16"]],["u32x16"]]],[11,"from","","",35,[[["m64x2"]],["i64x2"]]],[11,"from","","",45,[[["m32x4"]],["m8x4"]]],[11,"from","","",16,[[["i16x2"]],["u64x2"]]],[11,"from","","",62,[[["u32x8"]],["f32x8"]]],[11,"from","","",6,[[["m16x8"]],["u64x8"]]],[11,"from","","",62,[[["i8x8"]],["f32x8"]]],[11,"from","","",38,[[["m8x8"]],["i32x8"]]],[11,"from","","",46,[[["m8x8"]],["i64x8"]]],[11,"from","","",51,[[["m16x4"]],["i32x4"]]],[11,"from","","",49,[[["f32x2"]],["u8x2"]]],[11,"from","","",6,[[["i16x8"]],["u64x8"]]],[11,"from","","",34,[[["u64x2"]],["i16x2"]]],[11,"from","","",58,[[["m1x16"]],["f32x16"]]],[11,"from","","",49,[[["u16x2"]],["u8x2"]]],[11,"from","","",49,[[["m16x2"]],["u8x2"]]],[11,"from","","",43,[[["m16x16"]],["u8x16"]]],[11,"from","","",38,[[["u64x8"]],["i32x8"]]],[11,"from","","",21,[[["m8x32"]],["u8x32"]]],[11,"from","","",43,[[["u32x16"]],["u8x16"]]],[11,"from","","",35,[[["u32x2"]],["i64x2"]]],[11,"from","","",60,[[["i16x2"]],["f32x2"]]],[11,"from","","",56,[[["u64x4"]],["f32x4"]]],[11,"from","","",59,[[["m32x2"]],["f64x2"]]],[11,"from","","",26,[[["m16x4"]],["m64x4"]]],[11,"from","","",12,[[["f32x8"]],["u16x8"]]],[11,"from","","",54,[[["u32x4"]],["i8x4"]]],[11,"from","","",27,[[["m8x32"]],["i16x32"]]],[11,"from","","",62,[[["m32x8"]],["f32x8"]]],[11,"from","","",59,[[["i32x2"]],["f64x2"]]],[11,"from","","",38,[[["m32x8"]],["i32x8"]]],[11,"from","","",33,[[["i32x16"]],["i8x16"]]],[11,"from","","",46,[[["i16x8"]],["i64x8"]]],[11,"from","","",7,[[["u64x2"]],["u32x2"]]],[11,"from","","",4,[[["i32x2"]],["i8x2"]]],[11,"from","","",11,[[["i64x2"]],["i32x2"]]],[11,"from","","",17,[[["u64x4"]],["u32x4"]]],[11,"from","","",10,[[["i32x16"]],["u16x16"]]],[11,"from","","",19,[[["f64x8"]],["i8x8"]]],[11,"from","","",34,[[["i8x2"]],["i16x2"]]],[11,"from","","",49,[[["u32x2"]],["u8x2"]]],[11,"from","","",16,[[["f32x2"]],["u64x2"]]],[11,"from","","",54,[[["u16x4"]],["i8x4"]]],[11,"from","","",44,[[["f64x8"]],["u8x8"]]],[11,"from","","",59,[[["m64x2"]],["f64x2"]]],[11,"from","","",12,[[["m8x8"]],["u16x8"]]],[11,"from","","",51,[[["m32x4"]],["i32x4"]]],[11,"from","","",46,[[["i32x8"]],["i64x8"]]],[11,"from","","",19,[[["f32x8"]],["i8x8"]]],[11,"from","","",7,[[["i32x2"]],["u32x2"]]],[11,"from","","",46,[[["u16x8"]],["i64x8"]]],[11,"from","","",3,[[["m1x64"]],["u8x64"]]],[11,"from","","",26,[[["m32x4"]],["m64x4"]]],[11,"from","","",32,[[["m8x32"]],["u16x32"]]],[11,"from","","",56,[[["i8x4"]],["f32x4"]]],[11,"from","","",16,[[["m8x2"]],["u64x2"]]],[11,"from","","",35,[[["f32x2"]],["i64x2"]]],[11,"from","","",56,[[["f64x4"]],["f32x4"]]],[11,"from","","",5,[[["m8x8"]],["u32x8"]]],[11,"from","","",38,[[["i8x8"]],["i32x8"]]],[11,"from","","",33,[[["m1x16"]],["i8x16"]]],[11,"from","","",10,[[["m8x16"]],["u16x16"]]],[11,"from","","",59,[[["u16x2"]],["f64x2"]]],[11,"from","","",4,[[["u16x2"]],["i8x2"]]],[11,"from","","",11,[[["f32x2"]],["i32x2"]]],[11,"from","","",20,[[["i32x4"]],["i64x4"]]],[11,"from","","",62,[[["m8x8"]],["f32x8"]]],[11,"from","","",38,[[["f32x8"]],["i32x8"]]],[11,"from","","",5,[[["m1x8"]],["u32x8"]]],[11,"from","","",55,[[["m8x8"]],["i16x8"]]],[11,"from","","",4,[[["m16x2"]],["i8x2"]]],[11,"from","","",46,[[["u32x8"]],["i64x8"]]],[11,"from","","",18,[[["m1x8"]],["m8x8"]]],[11,"from","","",10,[[["u32x16"]],["u16x16"]]],[11,"from","","",27,[[["u8x32"]],["i16x32"]]],[11,"from","","",18,[[["m32x8"]],["m8x8"]]],[11,"from","","",11,[[["u8x2"]],["i32x2"]]],[11,"from","","",25,[[["i32x4"]],["i16x4"]]],[11,"from","","",5,[[["f32x8"]],["u32x8"]]],[11,"from","","",8,[[["m16x16"]],["i16x16"]]],[11,"from","","",51,[[["u32x4"]],["i32x4"]]],[11,"from","","",35,[[["m8x2"]],["i64x2"]]],[11,"from","","",7,[[["m64x2"]],["u32x2"]]],[11,"from","","",47,[[["m8x32"]],["m1x32"]]],[11,"from","","",17,[[["f32x4"]],["u32x4"]]],[11,"from","","",25,[[["m8x4"]],["i16x4"]]],[11,"from","","",12,[[["i32x8"]],["u16x8"]]],[11,"from","","",16,[[["m64x2"]],["u64x2"]]],[11,"from","","",40,[[["i16x16"]],["i32x16"]]],[11,"from","","",32,[[["i8x32"]],["u16x32"]]],[11,"from","","",34,[[["f32x2"]],["i16x2"]]],[11,"from","","",21,[[["i16x32"]],["u8x32"]]],[11,"from","","",38,[[["i64x8"]],["i32x8"]]],[11,"from","","",11,[[["i16x2"]],["i32x2"]]],[11,"from","","",28,[[["u16x16"]],["u32x16"]]],[11,"from","","",59,[[["u64x2"]],["f64x2"]]],[11,"from","","",32,[[["u8x32"]],["u16x32"]]],[11,"from","","",7,[[["u16x2"]],["u32x2"]]],[11,"from","","",6,[[["i64x8"]],["u64x8"]]],[11,"from","","",10,[[["f32x16"]],["u16x16"]]],[11,"from","","",5,[[["m32x8"]],["u32x8"]]],[11,"from","","",44,[[["m16x8"]],["u8x8"]]],[11,"from","","",34,[[["m16x2"]],["i16x2"]]],[11,"from","","",4,[[["u64x2"]],["i8x2"]]],[11,"from","","",20,[[["m32x4"]],["i64x4"]]],[11,"from","","",2,[[["i64x4"]],["u64x4"]]],[11,"from","","",14,[[["u8x2"]],["u16x2"]]],[11,"from","","",60,[[["u64x2"]],["f32x2"]]],[11,"from","","",33,[[["u32x16"]],["i8x16"]]],[11,"from","","",19,[[["i64x8"]],["i8x8"]]],[11,"from","","",59,[[["m16x2"]],["f64x2"]]],[11,"from","","",46,[[["m16x8"]],["i64x8"]]],[11,"from","","",8,[[["i32x16"]],["i16x16"]]],[11,"from","","",22,[[["f64x4"]],["u16x4"]]],[11,"from","","",17,[[["i64x4"]],["u32x4"]]],[11,"from","","",26,[[["m8x4"]],["m64x4"]]],[11,"from","","",5,[[["u8x8"]],["u32x8"]]],[11,"from","","",14,[[["m8x2"]],["u16x2"]]],[11,"from","","",6,[[["u16x8"]],["u64x8"]]],[11,"from","","",58,[[["i32x16"]],["f32x16"]]],[11,"from","","",16,[[["i32x2"]],["u64x2"]]],[11,"from","","",8,[[["m8x16"]],["i16x16"]]],[11,"from","","",54,[[["u8x4"]],["i8x4"]]],[11,"from","","",43,[[["u16x16"]],["u8x16"]]],[11,"from","","",16,[[["u16x2"]],["u64x2"]]],[11,"from","","",6,[[["m32x8"]],["u64x8"]]],[11,"from","","",36,[[["u8x64"]],["i8x64"]]],[11,"from","","",14,[[["i16x2"]],["u16x2"]]],[11,"from","","",14,[[["u32x2"]],["u16x2"]]],[11,"from","","",35,[[["i32x2"]],["i64x2"]]],[11,"from","","",51,[[["m8x4"]],["i32x4"]]],[11,"from","","",44,[[["m32x8"]],["u8x8"]]],[11,"from","","",60,[[["f64x2"]],["f32x2"]]],[11,"from","","",22,[[["m32x4"]],["u16x4"]]],[11,"from","","",32,[[["i16x32"]],["u16x32"]]],[11,"from","","",7,[[["i64x2"]],["u32x2"]]],[11,"from","","",30,[[["m8x8"]],["m32x8"]]],[11,"from","","",61,[[["m16x4"]],["f64x4"]]],[11,"from","","",51,[[["u64x4"]],["i32x4"]]],[11,"from","","",22,[[["i32x4"]],["u16x4"]]],[11,"from","","",19,[[["m8x8"]],["i8x8"]]],[11,"from","","",25,[[["i64x4"]],["i16x4"]]],[11,"from","","",4,[[["u8x2"]],["i8x2"]]],[11,"from","","",45,[[["m64x4"]],["m8x4"]]],[11,"from","","",6,[[["u32x8"]],["u64x8"]]],[11,"from","","",35,[[["m16x2"]],["i64x2"]]],[11,"from","","",14,[[["m16x2"]],["u16x2"]]],[11,"from","","",10,[[["i16x16"]],["u16x16"]]],[11,"from","","",57,[[["m8x8"]],["f64x8"]]],[11,"from","","",43,[[["i32x16"]],["u8x16"]]],[11,"from","","",51,[[["i64x4"]],["i32x4"]]],[11,"from","","",11,[[["m64x2"]],["i32x2"]]],[11,"from","","",8,[[["f32x16"]],["i16x16"]]],[11,"from","","",62,[[["u16x8"]],["f32x8"]]],[11,"from","","",45,[[["m16x4"]],["m8x4"]]],[11,"from","","",10,[[["m1x16"]],["u16x16"]]],[11,"from","","",3,[[["i8x64"]],["u8x64"]]],[11,"from","","",4,[[["f32x2"]],["i8x2"]]],[11,"from","","",56,[[["m8x4"]],["f32x4"]]],[11,"from","","",22,[[["u64x4"]],["u16x4"]]],[11,"from","","",38,[[["f64x8"]],["i32x8"]]],[11,"from","","",57,[[["m1x8"]],["f64x8"]]],[11,"from","","",46,[[["m1x8"]],["i64x8"]]],[11,"from","","",8,[[["u32x16"]],["i16x16"]]],[11,"from","","",48,[[["u16x32"]],["i8x32"]]],[11,"from","","",40,[[["i8x16"]],["i32x16"]]],[11,"from","","",57,[[["u16x8"]],["f64x8"]]],[11,"from","","",40,[[["m1x16"]],["i32x16"]]],[11,"from","","",20,[[["u8x4"]],["i64x4"]]],[11,"from","","",56,[[["m32x4"]],["f32x4"]]],[11,"from","","",62,[[["u8x8"]],["f32x8"]]],[11,"from","","",40,[[["f32x16"]],["i32x16"]]],[11,"from","","",17,[[["i32x4"]],["u32x4"]]],[11,"from","","",29,[[["m64x4"]],["m32x4"]]],[11,"from","","",50,[[["i16x4"]],["u8x4"]]],[11,"from","","",50,[[["i8x4"]],["u8x4"]]],[11,"from","","",4,[[["f64x2"]],["i8x2"]]],[11,"from","","",44,[[["i16x8"]],["u8x8"]]],[11,"from","","",33,[[["u16x16"]],["i8x16"]]],[11,"from","","",55,[[["i8x8"]],["i16x8"]]],[11,"from","","",7,[[["i16x2"]],["u32x2"]]],[11,"from","","",54,[[["m64x4"]],["i8x4"]]],[11,"from","","",36,[[["m1x64"]],["i8x64"]]],[11,"from","","",62,[[["i32x8"]],["f32x8"]]],[11,"from","","",33,[[["u8x16"]],["i8x16"]]],[11,"from","","",34,[[["i32x2"]],["i16x2"]]],[11,"from","","",59,[[["i8x2"]],["f64x2"]]],[11,"from","","",44,[[["u32x8"]],["u8x8"]]],[11,"from","","",54,[[["f64x4"]],["i8x4"]]],[11,"sub_assign","","",7,N],[11,"sub_assign","","",8,N],[11,"sub_assign","","",17,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",28,N],[11,"sub_assign","","",61,N],[11,"sub_assign","","",6,N],[11,"sub_assign","","",38,N],[11,"sub_assign","","",46,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",5,N],[11,"sub_assign","","",35,N],[11,"sub_assign","","",44,N],[11,"sub_assign","","",3,N],[11,"sub_assign","","",20,N],[11,"sub_assign","","",43,N],[11,"sub_assign","","",2,N],[11,"sub_assign","","",57,N],[11,"sub_assign","","",32,N],[11,"sub_assign","","",50,N],[11,"sub_assign","","",36,N],[11,"sub_assign","","",48,N],[11,"sub_assign","","",22,N],[11,"sub_assign","","",7,N],[11,"sub_assign","","",58,N],[11,"sub_assign","","",20,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",50,N],[11,"sub_assign","","",54,N],[11,"sub_assign","","",61,N],[11,"sub_assign","","",46,N],[11,"sub_assign","","",60,N],[11,"sub_assign","","",19,N],[11,"sub_assign","","",33,N],[11,"sub_assign","","",36,N],[11,"sub_assign","","",33,N],[11,"sub_assign","","",22,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",10,N],[11,"sub_assign","","",62,N],[11,"sub_assign","","",10,N],[11,"sub_assign","","",28,N],[11,"sub_assign","","",56,N],[11,"sub_assign","","",51,N],[11,"sub_assign","","",35,N],[11,"sub_assign","","",44,N],[11,"sub_assign","","",2,N],[11,"sub_assign","","",54,N],[11,"sub_assign","","",43,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",14,N],[11,"sub_assign","","",32,N],[11,"sub_assign","","",27,N],[11,"sub_assign","","",17,N],[11,"sub_assign","","",6,N],[11,"sub_assign","","",34,N],[11,"sub_assign","","",60,N],[11,"sub_assign","","",34,N],[11,"sub_assign","","",48,N],[11,"sub_assign","","",59,N],[11,"sub_assign","","",5,N],[11,"sub_assign","","",38,N],[11,"sub_assign","","",21,N],[11,"sub_assign","","",62,N],[11,"sub_assign","","",16,N],[11,"sub_assign","","",11,N],[11,"sub_assign","","",51,N],[11,"sub_assign","","",59,N],[11,"sub_assign","","",16,N],[11,"sub_assign","","",57,N],[11,"sub_assign","","",11,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",56,N],[11,"sub_assign","","",55,N],[11,"sub_assign","","",55,N],[11,"sub_assign","","",8,N],[11,"sub_assign","","",27,N],[11,"sub_assign","","",3,N],[11,"sub_assign","","",12,N],[11,"sub_assign","","",21,N],[11,"sub_assign","","",19,N],[11,"sub_assign","","",12,N],[11,"sub_assign","","",25,N],[11,"sub_assign","","",25,N],[11,"sub_assign","","",58,N],[11,"sub_assign","","",14,N],[11,"partial_cmp","","",56,[[["self"],["f32x4"]],["option",["ordering"]]]],[11,"lt","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"le","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"gt","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"ge","","",56,[[["self"],["f32x4"]],["bool"]]],[11,"partial_cmp","","",50,[[["self"],["u8x4"]],["option",["ordering"]]]],[11,"lt","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"le","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"gt","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"ge","","",50,[[["self"],["u8x4"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["u16x8"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"le","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"gt","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"ge","","",12,[[["self"],["u16x8"]],["bool"]]],[11,"partial_cmp","","",60,[[["self"],["f32x2"]],["option",["ordering"]]]],[11,"lt","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"le","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"gt","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"ge","","",60,[[["self"],["f32x2"]],["bool"]]],[11,"partial_cmp","","",52,[[["self"],["m16x2"]],["option",["ordering"]]]],[11,"lt","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"le","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"gt","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"ge","","",52,[[["self"],["m16x2"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["f64x2"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"le","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"gt","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"ge","","",59,[[["self"],["f64x2"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["m1x8"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"le","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"gt","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"ge","","",13,[[["self"],["m1x8"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["u8x64"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"le","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"gt","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"ge","","",3,[[["self"],["u8x64"]],["bool"]]],[11,"partial_cmp","","",41,[[["self"],["m8x16"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"le","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"gt","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"ge","","",41,[[["self"],["m8x16"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["u32x2"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"le","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"gt","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"ge","","",7,[[["self"],["u32x2"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["u16x32"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"le","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"gt","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"ge","","",32,[[["self"],["u16x32"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["i16x16"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"le","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"gt","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"ge","","",8,[[["self"],["i16x16"]],["bool"]]],[11,"partial_cmp","","",62,[[["self"],["f32x8"]],["option",["ordering"]]]],[11,"lt","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"le","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"gt","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"ge","","",62,[[["self"],["f32x8"]],["bool"]]],[11,"partial_cmp","","",25,[[["self"],["i16x4"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"le","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"gt","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"ge","","",25,[[["self"],["i16x4"]],["bool"]]],[11,"partial_cmp","","",42,[[["self"],["m16x4"]],["option",["ordering"]]]],[11,"lt","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"le","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"gt","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"ge","","",42,[[["self"],["m16x4"]],["bool"]]],[11,"partial_cmp","","",36,[[["self"],["i8x64"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"le","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"gt","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"ge","","",36,[[["self"],["i8x64"]],["bool"]]],[11,"partial_cmp","","",29,[[["self"],["m32x4"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"le","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"gt","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"ge","","",29,[[["self"],["m32x4"]],["bool"]]],[11,"partial_cmp","","",54,[[["self"],["i8x4"]],["option",["ordering"]]]],[11,"lt","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"le","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"gt","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"ge","","",54,[[["self"],["i8x4"]],["bool"]]],[11,"partial_cmp","","",49,[[["self"],["u8x2"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"le","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"gt","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"ge","","",49,[[["self"],["u8x2"]],["bool"]]],[11,"partial_cmp","","",43,[[["self"],["u8x16"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"le","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"gt","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"ge","","",43,[[["self"],["u8x16"]],["bool"]]],[11,"partial_cmp","","",27,[[["self"],["i16x32"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"le","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"gt","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"ge","","",27,[[["self"],["i16x32"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["u32x8"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"le","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"gt","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"ge","","",5,[[["self"],["u32x8"]],["bool"]]],[11,"partial_cmp","","",55,[[["self"],["i16x8"]],["option",["ordering"]]]],[11,"lt","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"le","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"gt","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"ge","","",55,[[["self"],["i16x8"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["u64x2"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"le","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"gt","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"ge","","",16,[[["self"],["u64x2"]],["bool"]]],[11,"partial_cmp","","",61,[[["self"],["f64x4"]],["option",["ordering"]]]],[11,"lt","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"le","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"gt","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"ge","","",61,[[["self"],["f64x4"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["u16x2"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"le","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"gt","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"ge","","",14,[[["self"],["u16x2"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["m8x8"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"le","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"gt","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"ge","","",18,[[["self"],["m8x8"]],["bool"]]],[11,"partial_cmp","","",40,[[["self"],["i32x16"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"le","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"gt","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"ge","","",40,[[["self"],["i32x16"]],["bool"]]],[11,"partial_cmp","","",37,[[["self"],["m1x16"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"le","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"gt","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"ge","","",37,[[["self"],["m1x16"]],["bool"]]],[11,"partial_cmp","","",33,[[["self"],["i8x16"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"le","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"gt","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"ge","","",33,[[["self"],["i8x16"]],["bool"]]],[11,"partial_cmp","","",26,[[["self"],["m64x4"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"le","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"gt","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"ge","","",26,[[["self"],["m64x4"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"],["m32x2"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"le","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"gt","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"ge","","",23,[[["self"],["m32x2"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["i8x8"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"le","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"gt","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"ge","","",19,[[["self"],["i8x8"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["i64x4"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"le","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"gt","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"ge","","",20,[[["self"],["i64x4"]],["bool"]]],[11,"partial_cmp","","",39,[[["self"],["m16x8"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"le","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"gt","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"ge","","",39,[[["self"],["m16x8"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["u16x16"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"le","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"gt","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"ge","","",10,[[["self"],["u16x16"]],["bool"]]],[11,"partial_cmp","","",44,[[["self"],["u8x8"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"le","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"gt","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"ge","","",44,[[["self"],["u8x8"]],["bool"]]],[11,"partial_cmp","","",48,[[["self"],["i8x32"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"le","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"gt","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"ge","","",48,[[["self"],["i8x32"]],["bool"]]],[11,"partial_cmp","","",30,[[["self"],["m32x8"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"le","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"gt","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"ge","","",30,[[["self"],["m32x8"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["u16x4"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"le","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"gt","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"ge","","",22,[[["self"],["u16x4"]],["bool"]]],[11,"partial_cmp","","",47,[[["self"],["m1x32"]],["option",["ordering"]]]],[11,"lt","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"le","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"gt","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"ge","","",47,[[["self"],["m1x32"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["i32x2"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"le","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"gt","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"ge","","",11,[[["self"],["i32x2"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["u64x8"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"le","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"gt","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"ge","","",6,[[["self"],["u64x8"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["u64x4"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"le","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"gt","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"ge","","",2,[[["self"],["u64x4"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["i8x2"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"le","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"gt","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"ge","","",4,[[["self"],["i8x2"]],["bool"]]],[11,"partial_cmp","","",57,[[["self"],["f64x8"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"le","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"gt","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"ge","","",57,[[["self"],["f64x8"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["u32x4"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"le","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"gt","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"ge","","",17,[[["self"],["u32x4"]],["bool"]]],[11,"partial_cmp","","",34,[[["self"],["i16x2"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"le","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"gt","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"ge","","",34,[[["self"],["i16x2"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["m8x2"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"le","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"gt","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"ge","","",9,[[["self"],["m8x2"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["i64x8"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"le","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"gt","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"ge","","",46,[[["self"],["i64x8"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["u32x16"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"le","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"gt","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"ge","","",28,[[["self"],["u32x16"]],["bool"]]],[11,"partial_cmp","","",38,[[["self"],["i32x8"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"le","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"gt","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"ge","","",38,[[["self"],["i32x8"]],["bool"]]],[11,"partial_cmp","","",24,[[["self"],["m1x64"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"le","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"gt","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"ge","","",24,[[["self"],["m1x64"]],["bool"]]],[11,"partial_cmp","","",51,[[["self"],["i32x4"]],["option",["ordering"]]]],[11,"lt","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"le","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"gt","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"ge","","",51,[[["self"],["i32x4"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["m8x32"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"le","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"gt","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"ge","","",15,[[["self"],["m8x32"]],["bool"]]],[11,"partial_cmp","","",35,[[["self"],["i64x2"]],["option",["ordering"]]]],[11,"lt","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"le","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"gt","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"ge","","",35,[[["self"],["i64x2"]],["bool"]]],[11,"partial_cmp","","",53,[[["self"],["m64x2"]],["option",["ordering"]]]],[11,"lt","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"le","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"gt","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"ge","","",53,[[["self"],["m64x2"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["u8x32"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"le","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"gt","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"ge","","",21,[[["self"],["u8x32"]],["bool"]]],[11,"partial_cmp","","",45,[[["self"],["m8x4"]],["option",["ordering"]]]],[11,"lt","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"le","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"gt","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"ge","","",45,[[["self"],["m8x4"]],["bool"]]],[11,"partial_cmp","","",58,[[["self"],["f32x16"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"le","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"gt","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"ge","","",58,[[["self"],["f32x16"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["m16x16"]],["option",["ordering"]]]],[11,"lt","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"le","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"gt","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"ge","","",31,[[["self"],["m16x16"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"rem","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"rem","","",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"rem","","",60,[[["self"],["f32"]],["f32x2"]]],[11,"rem","","",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"rem","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"rem","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"rem","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"rem","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"rem","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"rem","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"rem","","",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"rem","","",61,[[["self"],["f64"]],["f64x4"]]],[11,"rem","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"rem","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"rem","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"rem","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"rem","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"rem","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"rem","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"rem","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"rem","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"rem","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"rem","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"rem","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"rem","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"rem","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"rem","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"rem","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"rem","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"rem","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"rem","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"rem","","",56,[[["self"],["f32"]],["f32x4"]]],[11,"rem","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"rem","","",57,[[["self"],["f64"]],["f64x8"]]],[11,"rem","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"rem","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"rem","","",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"rem","","",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"rem","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"rem","","",62,[[["self"],["f32"]],["f32x8"]]],[11,"rem","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"rem","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"rem","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"rem","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"rem","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"rem","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"rem","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"rem","","",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"rem","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"rem","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"rem","","",58,[[["self"],["f32"]],["f32x16"]]],[11,"rem","","",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"rem","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"rem","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"rem","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"rem","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"rem","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"rem","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"rem","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"rem","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"rem","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"rem","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"rem","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"rem","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"rem","","",59,[[["self"],["f64"]],["f64x2"]]],[11,"rem","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"rem","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"rem","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"rem","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"rem","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"rem","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"rem","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"rem","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"rem","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"rem","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"rem","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"rem","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"rem","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"rem","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"rem","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"rem","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"rem","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"rem","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"rem","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"rem","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"fmt","stdsimd::arch::powerpc","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::arch::powerpc","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","stdsimd::simd","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitxor","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"bitxor","","",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"bitxor","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"bitxor","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"bitxor","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"bitxor","","",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"bitxor","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"bitxor","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"bitxor","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"bitxor","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"bitxor","","",15,[[["self"],["bool"]],["m8x32"]]],[11,"bitxor","","",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"bitxor","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"bitxor","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"bitxor","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"bitxor","","",26,[[["self"],["bool"]],["m64x4"]]],[11,"bitxor","","",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"bitxor","","",37,[[["self"],["bool"]],["m1x16"]]],[11,"bitxor","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"bitxor","","",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"bitxor","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"bitxor","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"bitxor","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"bitxor","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"bitxor","","",9,[[["self"],["bool"]],["m8x2"]]],[11,"bitxor","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"bitxor","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"bitxor","","",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"bitxor","","",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"bitxor","","",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"bitxor","","",52,[[["self"],["bool"]],["m16x2"]]],[11,"bitxor","","",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"bitxor","","",53,[[["self"],["bool"]],["m64x2"]]],[11,"bitxor","","",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"bitxor","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"bitxor","","",47,[[["self"],["bool"]],["m1x32"]]],[11,"bitxor","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"bitxor","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"bitxor","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"bitxor","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"bitxor","","",29,[[["self"],["bool"]],["m32x4"]]],[11,"bitxor","","",24,[[["self"],["bool"]],["m1x64"]]],[11,"bitxor","","",18,[[["self"],["bool"]],["m8x8"]]],[11,"bitxor","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"bitxor","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"bitxor","","",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"bitxor","","",39,[[["self"],["bool"]],["m16x8"]]],[11,"bitxor","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"bitxor","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"bitxor","","",13,[[["self"],["bool"]],["m1x8"]]],[11,"bitxor","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"bitxor","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"bitxor","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"bitxor","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"bitxor","","",42,[[["self"],["bool"]],["m16x4"]]],[11,"bitxor","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"bitxor","","",45,[[["self"],["bool"]],["m8x4"]]],[11,"bitxor","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"bitxor","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"bitxor","","",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"bitxor","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"bitxor","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"bitxor","","",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"bitxor","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"bitxor","","",31,[[["self"],["bool"]],["m16x16"]]],[11,"bitxor","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"bitxor","","",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"bitxor","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"bitxor","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"bitxor","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"bitxor","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"bitxor","","",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"bitxor","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"bitxor","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"bitxor","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"bitxor","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"bitxor","","",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"bitxor","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"bitxor","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"bitxor","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"bitxor","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"bitxor","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"bitxor","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"bitxor","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"bitxor","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"bitxor","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"bitxor","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"bitxor","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"bitxor","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"bitxor","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"bitxor","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"bitxor","","",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"bitxor","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"bitxor","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"bitxor","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"bitxor","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"bitxor","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"bitxor","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"bitxor","","",23,[[["self"],["bool"]],["m32x2"]]],[11,"bitxor","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"bitxor","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"bitxor","","",30,[[["self"],["bool"]],["m32x8"]]],[11,"bitxor","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"bitxor","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"bitxor","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"bitxor","","",41,[[["self"],["bool"]],["m8x16"]]],[11,"bitxor","","",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"bitxor","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"sub","","",6,[[["self"],["u64"]],["u64x8"]]],[11,"sub","","",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"sub","","",36,[[["self"],["i8"]],["i8x64"]]],[11,"sub","","",5,[[["self"],["u32"]],["u32x8"]]],[11,"sub","","",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"sub","","",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"sub","","",60,[[["self"],["f32"]],["f32x2"]]],[11,"sub","","",51,[[["self"],["i32"]],["i32x4"]]],[11,"sub","","",49,[[["self"],["u8"]],["u8x2"]]],[11,"sub","","",11,[[["self"],["i32"]],["i32x2"]]],[11,"sub","","",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"sub","","",7,[[["self"],["u32"]],["u32x2"]]],[11,"sub","","",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"sub","","",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"sub","","",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"sub","","",2,[[["self"],["u64x4"]],["u64x4"]]],[11,"sub","","",55,[[["self"],["i16"]],["i16x8"]]],[11,"sub","","",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"sub","","",2,[[["self"],["u64"]],["u64x4"]]],[11,"sub","","",28,[[["self"],["u32"]],["u32x16"]]],[11,"sub","","",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"sub","","",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"sub","","",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"sub","","",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"sub","","",61,[[["self"],["f64"]],["f64x4"]]],[11,"sub","","",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"sub","","",50,[[["self"],["u8"]],["u8x4"]]],[11,"sub","","",59,[[["self"],["f64"]],["f64x2"]]],[11,"sub","","",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"sub","","",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"sub","","",43,[[["self"],["u8"]],["u8x16"]]],[11,"sub","","",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"sub","","",20,[[["self"],["i64"]],["i64x4"]]],[11,"sub","","",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"sub","","",40,[[["self"],["i32"]],["i32x16"]]],[11,"sub","","",25,[[["self"],["i16"]],["i16x4"]]],[11,"sub","","",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"sub","","",38,[[["self"],["i32"]],["i32x8"]]],[11,"sub","","",10,[[["self"],["u16"]],["u16x16"]]],[11,"sub","","",46,[[["self"],["i64"]],["i64x8"]]],[11,"sub","","",44,[[["self"],["u8"]],["u8x8"]]],[11,"sub","","",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"sub","","",17,[[["self"],["u32"]],["u32x4"]]],[11,"sub","","",56,[[["self"],["f32"]],["f32x4"]]],[11,"sub","","",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"sub","","",32,[[["self"],["u16"]],["u16x32"]]],[11,"sub","","",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"sub","","",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"sub","","",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"sub","","",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"sub","","",34,[[["self"],["i16"]],["i16x2"]]],[11,"sub","","",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"sub","","",14,[[["self"],["u16"]],["u16x2"]]],[11,"sub","","",57,[[["self"],["f64"]],["f64x8"]]],[11,"sub","","",62,[[["self"],["f32"]],["f32x8"]]],[11,"sub","","",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"sub","","",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"sub","","",3,[[["self"],["u8"]],["u8x64"]]],[11,"sub","","",12,[[["self"],["u16"]],["u16x8"]]],[11,"sub","","",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"sub","","",27,[[["self"],["i16"]],["i16x32"]]],[11,"sub","","",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"sub","","",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"sub","","",4,[[["self"],["i8"]],["i8x2"]]],[11,"sub","","",35,[[["self"],["i64"]],["i64x2"]]],[11,"sub","","",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"sub","","",8,[[["self"],["i16"]],["i16x16"]]],[11,"sub","","",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"sub","","",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"sub","","",19,[[["self"],["i8"]],["i8x8"]]],[11,"sub","","",22,[[["self"],["u16"]],["u16x4"]]],[11,"sub","","",54,[[["self"],["i8"]],["i8x4"]]],[11,"sub","","",58,[[["self"],["f32"]],["f32x16"]]],[11,"sub","","",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"sub","","",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"sub","","",48,[[["self"],["i8"]],["i8x32"]]],[11,"sub","","",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"sub","","",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"sub","","",33,[[["self"],["i8"]],["i8x16"]]],[11,"sub","","",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"sub","","",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"sub","","",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"sub","","",16,[[["self"],["u64"]],["u64x2"]]],[11,"sub","","",21,[[["self"],["u8"]],["u8x32"]]],[11,"sub","","",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"sub","","",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"from_bits","","",17,[[["i16x8"]],["u32x4"]]],[11,"from_bits","","",43,[[["vector_unsigned_int"]],["u8x16"]]],[11,"from_bits","","",6,[[["u8x64"]],["u64x8"]]],[11,"from_bits","","",11,[[["u8x8"]],["i32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_float"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",44,[[["i32x2"]],["u8x8"]]],[11,"from_bits","","",56,[[["m32x4"]],["f32x4"]]],[11,"from_bits","","",46,[[["i16x32"]],["i64x8"]]],[11,"from_bits","","",7,[[["m32x2"]],["u32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_bool_short"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",19,[[["m16x4"]],["i8x8"]]],[11,"from_bits","","",25,[[["u16x4"]],["i16x4"]]],[11,"from_bits","","",49,[[["m8x2"]],["u8x2"]]],[11,"from_bits","","",58,[[["i64x8"]],["f32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_float"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",58,[[["m1x32"]],["f32x16"]]],[11,"from_bits","","",35,[[["u16x8"]],["i64x2"]]],[11,"from_bits","","",32,[[["u64x8"]],["u16x32"]]],[11,"from_bits","","",43,[[["i32x4"]],["u8x16"]]],[11,"from_bits","","",46,[[["m1x16"]],["i64x8"]]],[11,"from_bits","","",27,[[["u64x8"]],["i16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["f64x2"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",6,[[["i16x32"]],["u64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_signed_char"]],["vector_unsigned_char"]]],[11,"from_bits","","",69,[[["vector_unsigned_short"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",61,[[["f32x8"]],["f64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["m8x16"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",62,[[["m16x16"]],["f32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["i8x16"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",3,[[["m1x64"]],["u8x64"]]],[11,"from_bits","","",5,[[["m16x16"]],["u32x8"]]],[11,"from_bits","","",16,[[["m16x8"]],["u64x2"]]],[11,"from_bits","","",55,[[["m64x2"]],["i16x8"]]],[11,"from_bits","","",12,[[["m8x16"]],["u16x8"]]],[11,"from_bits","","",62,[[["m32x8"]],["f32x8"]]],[11,"from_bits","","",55,[[["m16x8"]],["i16x8"]]],[11,"from_bits","","",58,[[["m1x8"]],["f32x16"]]],[11,"from_bits","","",55,[[["vector_bool_int"]],["i16x8"]]],[11,"from_bits","","",55,[[["vector_signed_int"]],["i16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["f64x2"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",19,[[["m32x2"]],["i8x8"]]],[11,"from_bits","","",7,[[["u8x8"]],["u32x2"]]],[11,"from_bits","","",61,[[["i8x32"]],["f64x4"]]],[11,"from_bits","","",11,[[["u32x2"]],["i32x2"]]],[11,"from_bits","","",25,[[["i32x2"]],["i16x4"]]],[11,"from_bits","","",3,[[["m1x16"]],["u8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["vector_float"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_unsigned_int"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["vector_unsigned_short"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",21,[[["m64x4"]],["u8x32"]]],[11,"from_bits","","",46,[[["u16x32"]],["i64x8"]]],[11,"from_bits","","",33,[[["vector_bool_short"]],["i8x16"]]],[11,"from_bits","","",17,[[["vector_bool_int"]],["u32x4"]]],[11,"from_bits","","",22,[[["i8x8"]],["u16x4"]]],[11,"from_bits","","",40,[[["i16x32"]],["i32x16"]]],[11,"from_bits","","",56,[[["i16x8"]],["f32x4"]]],[11,"from_bits","","",16,[[["i32x4"]],["u64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["m16x8"]],["vector_signed_int"]]],[11,"from_bits","","",72,[[["vector_signed_short"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",27,[[["m1x16"]],["i16x32"]]],[11,"from_bits","","",51,[[["i64x2"]],["i32x4"]]],[11,"from_bits","","",28,[[["m1x32"]],["u32x16"]]],[11,"from_bits","","",8,[[["i32x8"]],["i16x16"]]],[11,"from_bits","","",28,[[["i8x64"]],["u32x16"]]],[11,"from_bits","","",38,[[["f64x4"]],["i32x8"]]],[11,"from_bits","","",55,[[["f32x4"]],["i16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_bool_int"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",56,[[["vector_unsigned_short"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["m32x4"]],["vector_signed_int"]]],[11,"from_bits","","",69,[[["u64x2"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",44,[[["u32x2"]],["u8x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["u64x2"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",21,[[["m16x16"]],["u8x32"]]],[11,"from_bits","","",58,[[["i8x64"]],["f32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_unsigned_char"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",46,[[["i32x16"]],["i64x8"]]],[11,"from_bits","","",39,[[["vector_bool_short"]],["m16x8"]]],[11,"from_bits","","",6,[[["u32x16"]],["u64x8"]]],[11,"from_bits","","",2,[[["m16x16"]],["u64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["i16x8"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",17,[[["u8x16"]],["u32x4"]]],[11,"from_bits","","",17,[[["vector_unsigned_char"]],["u32x4"]]],[11,"from_bits","","",17,[[["u16x8"]],["u32x4"]]],[11,"from_bits","","",48,[[["f32x8"]],["i8x32"]]],[11,"from_bits","","",33,[[["vector_unsigned_short"]],["i8x16"]]],[11,"from_bits","","",19,[[["i16x4"]],["i8x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["m32x4"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",38,[[["u8x32"]],["i32x8"]]],[11,"from_bits","","",57,[[["f32x16"]],["f64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["u32x4"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",40,[[["f64x8"]],["i32x16"]]],[11,"from_bits","","",40,[[["m1x16"]],["i32x16"]]],[11,"from_bits","","",40,[[["m1x64"]],["i32x16"]]],[11,"from_bits","","",43,[[["m8x16"]],["u8x16"]]],[11,"from_bits","","",60,[[["i8x8"]],["f32x2"]]],[11,"from_bits","","",10,[[["f32x8"]],["u16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["i8x16"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["i64x2"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",61,[[["m64x4"]],["f64x4"]]],[11,"from_bits","","",33,[[["vector_unsigned_int"]],["i8x16"]]],[11,"from_bits","","",28,[[["i64x8"]],["u32x16"]]],[11,"from_bits","","",17,[[["vector_bool_char"]],["u32x4"]]],[11,"from_bits","","",57,[[["m1x8"]],["f64x8"]]],[11,"from_bits","","",43,[[["f64x2"]],["u8x16"]]],[11,"from_bits","","",7,[[["f32x2"]],["u32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["vector_unsigned_int"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",17,[[["f32x4"]],["u32x4"]]],[11,"from_bits","","",20,[[["i32x8"]],["i64x4"]]],[11,"from_bits","","",59,[[["i64x2"]],["f64x2"]]],[11,"from_bits","","",51,[[["vector_bool_short"]],["i32x4"]]],[11,"from_bits","","",34,[[["m16x2"]],["i16x2"]]],[11,"from_bits","","",33,[[["u32x4"]],["i8x16"]]],[11,"from_bits","","",6,[[["f64x8"]],["u64x8"]]],[11,"from_bits","","",36,[[["m1x8"]],["i8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["u8x16"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",33,[[["vector_signed_int"]],["i8x16"]]],[11,"from_bits","","",7,[[["i8x8"]],["u32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_unsigned_int"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",17,[[["m16x8"]],["u32x4"]]],[11,"from_bits","","",5,[[["m64x4"]],["u32x8"]]],[11,"from_bits","","",36,[[["f64x8"]],["i8x64"]]],[11,"from_bits","","",28,[[["m1x16"]],["u32x16"]]],[11,"from_bits","","",59,[[["m16x8"]],["f64x2"]]],[11,"from_bits","","",36,[[["m1x16"]],["i8x64"]]],[11,"from_bits","","",6,[[["m1x32"]],["u64x8"]]],[11,"from_bits","","",57,[[["u32x16"]],["f64x8"]]],[11,"from_bits","","",20,[[["u64x4"]],["i64x4"]]],[11,"from_bits","","",57,[[["u8x64"]],["f64x8"]]],[11,"from_bits","","",34,[[["i8x4"]],["i16x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_unsigned_short"]],["vector_unsigned_char"]]],[11,"from_bits","","",68,[[["f32x4"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",62,[[["i32x8"]],["f32x8"]]],[11,"from_bits","","",20,[[["m16x16"]],["i64x4"]]],[11,"from_bits","","",8,[[["m8x32"]],["i16x16"]]],[11,"from_bits","","",58,[[["i16x32"]],["f32x16"]]],[11,"from_bits","","",60,[[["i16x4"]],["f32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_bool_int"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",38,[[["m16x16"]],["i32x8"]]],[11,"from_bits","","",3,[[["i64x8"]],["u8x64"]]],[11,"from_bits","","",36,[[["i16x32"]],["i8x64"]]],[11,"from_bits","","",51,[[["u32x4"]],["i32x4"]]],[11,"from_bits","","",43,[[["m64x2"]],["u8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["i32x4"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",17,[[["i32x4"]],["u32x4"]]],[11,"from_bits","","",58,[[["m1x16"]],["f32x16"]]],[11,"from_bits","","",62,[[["m64x4"]],["f32x8"]]],[11,"from_bits","","",40,[[["u16x32"]],["i32x16"]]],[11,"from_bits","","",43,[[["vector_signed_char"]],["u8x16"]]],[11,"from_bits","","",56,[[["u64x2"]],["f32x4"]]],[11,"from_bits","","",12,[[["vector_unsigned_char"]],["u16x8"]]],[11,"from_bits","","",8,[[["m64x4"]],["i16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["f64x2"]],["vector_unsigned_short"]]],[11,"from_bits","","",63,[[["m8x16"]],["vector_bool_short"]]],[11,"from_bits","","",65,[[["i32x4"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",43,[[["vector_float"]],["u8x16"]]],[11,"from_bits","","",55,[[["u16x8"]],["i16x8"]]],[11,"from_bits","","",40,[[["m1x8"]],["i32x16"]]],[11,"from_bits","","",20,[[["u16x16"]],["i64x4"]]],[11,"from_bits","","",12,[[["m32x4"]],["u16x8"]]],[11,"from_bits","","",35,[[["f32x4"]],["i64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_signed_char"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",12,[[["vector_signed_char"]],["u16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["i32x4"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",56,[[["m64x2"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["m32x4"]],["vector_unsigned_char"]]],[11,"from_bits","","",70,[[["m32x4"]],["vector_unsigned_short"]]],[11,"from_bits","","",67,[[["u8x16"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",51,[[["m16x8"]],["i32x4"]]],[11,"from_bits","","",7,[[["u16x4"]],["u32x2"]]],[11,"from_bits","","",48,[[["f64x4"]],["i8x32"]]],[11,"from_bits","","",8,[[["u32x8"]],["i16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["u64x2"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["vector_signed_short"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",2,[[["i8x32"]],["u64x4"]]],[11,"from_bits","","",32,[[["m1x8"]],["u16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["u64x2"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",5,[[["i8x32"]],["u32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["vector_bool_short"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",48,[[["m16x16"]],["i8x32"]]],[11,"from_bits","","",44,[[["m16x4"]],["u8x8"]]],[11,"from_bits","","",10,[[["i64x4"]],["u16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["f64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",66,[[["vector_signed_char"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",44,[[["i16x4"]],["u8x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_signed_short"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",62,[[["i8x32"]],["f32x8"]]],[11,"from_bits","","",28,[[["m1x64"]],["u32x16"]]],[11,"from_bits","","",5,[[["u8x32"]],["u32x8"]]],[11,"from_bits","","",59,[[["m32x4"]],["f64x2"]]],[11,"from_bits","","",6,[[["u16x32"]],["u64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["m64x2"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",48,[[["m64x4"]],["i8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["u16x8"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",34,[[["u8x4"]],["i16x2"]]],[11,"from_bits","","",6,[[["i8x64"]],["u64x8"]]],[11,"from_bits","","",17,[[["vector_signed_char"]],["u32x4"]]],[11,"from_bits","","",4,[[["u8x2"]],["i8x2"]]],[11,"from_bits","","",56,[[["vector_unsigned_char"]],["f32x4"]]],[11,"from_bits","","",27,[[["m1x32"]],["i16x32"]]],[11,"from_bits","","",48,[[["m32x8"]],["i8x32"]]],[11,"from_bits","","",32,[[["u8x64"]],["u16x32"]]],[11,"from_bits","","",35,[[["u32x4"]],["i64x2"]]],[11,"from_bits","","",46,[[["u64x8"]],["i64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["i64x2"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",12,[[["vector_bool_short"]],["u16x8"]]],[11,"from_bits","","",46,[[["i8x64"]],["i64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["u32x4"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",48,[[["u16x16"]],["i8x32"]]],[11,"from_bits","","",19,[[["i32x2"]],["i8x8"]]],[11,"from_bits","","",20,[[["m32x8"]],["i64x4"]]],[11,"from_bits","","",51,[[["f32x4"]],["i32x4"]]],[11,"from_bits","","",33,[[["m16x8"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["m8x16"]],["vector_signed_char"]]],[11,"from_bits","","",63,[[["m32x4"]],["vector_bool_short"]]],[11,"from_bits","stdsimd::simd","",5,[[["i64x4"]],["u32x8"]]],[11,"from_bits","","",43,[[["u64x2"]],["u8x16"]]],[11,"from_bits","","",35,[[["m8x16"]],["i64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_signed_char"]],["vector_unsigned_int"]]],[11,"from_bits","","",64,[[["vector_bool_char"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",10,[[["i32x8"]],["u16x16"]]],[11,"from_bits","","",8,[[["u16x16"]],["i16x16"]]],[11,"from_bits","","",33,[[["u64x2"]],["i8x16"]]],[11,"from_bits","","",62,[[["m8x32"]],["f32x8"]]],[11,"from_bits","","",35,[[["m16x8"]],["i64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_bool_short"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",56,[[["f64x2"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_signed_int"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",59,[[["m64x2"]],["f64x2"]]],[11,"from_bits","","",46,[[["m1x64"]],["i64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_bool_char"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",20,[[["i16x16"]],["i64x4"]]],[11,"from_bits","","",21,[[["i32x8"]],["u8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["u32x4"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",28,[[["u8x64"]],["u32x16"]]],[11,"from_bits","","",25,[[["m8x8"]],["i16x4"]]],[11,"from_bits","","",54,[[["m16x2"]],["i8x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["i8x16"]],["vector_signed_short"]]],[11,"from_bits","","",70,[[["i64x2"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",51,[[["vector_float"]],["i32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",71,[[["vector_bool_int"]],["vector_bool_char"]]],[11,"from_bits","","",67,[[["vector_bool_int"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",22,[[["m32x2"]],["u16x4"]]],[11,"from_bits","","",8,[[["u8x32"]],["i16x16"]]],[11,"from_bits","","",55,[[["m32x4"]],["i16x8"]]],[11,"from_bits","","",44,[[["m8x8"]],["u8x8"]]],[11,"from_bits","","",41,[[["vector_bool_short"]],["m8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["m32x4"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",2,[[["m64x4"]],["u64x4"]]],[11,"from_bits","","",35,[[["m64x2"]],["i64x2"]]],[11,"from_bits","","",11,[[["m32x2"]],["i32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["u16x8"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",36,[[["f32x16"]],["i8x64"]]],[11,"from_bits","","",40,[[["f32x16"]],["i32x16"]]],[11,"from_bits","","",58,[[["u16x32"]],["f32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["i8x16"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",3,[[["m1x8"]],["u8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["f32x4"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",51,[[["u8x16"]],["i32x4"]]],[11,"from_bits","","",48,[[["i16x16"]],["i8x32"]]],[11,"from_bits","","",36,[[["u64x8"]],["i8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_bool_char"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",12,[[["m16x8"]],["u16x8"]]],[11,"from_bits","","",3,[[["i8x64"]],["u8x64"]]],[11,"from_bits","","",62,[[["u32x8"]],["f32x8"]]],[11,"from_bits","","",62,[[["u64x4"]],["f32x8"]]],[11,"from_bits","","",5,[[["u16x16"]],["u32x8"]]],[11,"from_bits","","",5,[[["m8x32"]],["u32x8"]]],[11,"from_bits","","",43,[[["i16x8"]],["u8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["f64x2"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",5,[[["i16x16"]],["u32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_unsigned_int"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",50,[[["u16x2"]],["u8x4"]]],[11,"from_bits","","",43,[[["m16x8"]],["u8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["i8x16"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",50,[[["i8x4"]],["u8x4"]]],[11,"from_bits","","",32,[[["i64x8"]],["u16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["u8x16"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",22,[[["m8x8"]],["u16x4"]]],[11,"from_bits","","",38,[[["f32x8"]],["i32x8"]]],[11,"from_bits","","",56,[[["vector_unsigned_int"]],["f32x4"]]],[11,"from_bits","","",19,[[["u32x2"]],["i8x8"]]],[11,"from_bits","","",35,[[["i8x16"]],["i64x2"]]],[11,"from_bits","","",43,[[["vector_signed_short"]],["u8x16"]]],[11,"from_bits","","",33,[[["i64x2"]],["i8x16"]]],[11,"from_bits","","",35,[[["i32x4"]],["i64x2"]]],[11,"from_bits","","",61,[[["m32x8"]],["f64x4"]]],[11,"from_bits","","",48,[[["u64x4"]],["i8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["m8x16"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",55,[[["vector_unsigned_char"]],["i16x8"]]],[11,"from_bits","","",61,[[["i16x16"]],["f64x4"]]],[11,"from_bits","","",36,[[["u32x16"]],["i8x64"]]],[11,"from_bits","","",12,[[["vector_signed_int"]],["u16x8"]]],[11,"from_bits","","",56,[[["vector_signed_char"]],["f32x4"]]],[11,"from_bits","","",55,[[["vector_signed_short"]],["i16x8"]]],[11,"from_bits","","",34,[[["m8x4"]],["i16x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["m16x8"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",2,[[["f64x4"]],["u64x4"]]],[11,"from_bits","","",21,[[["u64x4"]],["u8x32"]]],[11,"from_bits","","",55,[[["i64x2"]],["i16x8"]]],[11,"from_bits","","",55,[[["m8x16"]],["i16x8"]]],[11,"from_bits","","",11,[[["i8x8"]],["i32x2"]]],[11,"from_bits","","",51,[[["vector_signed_char"]],["i32x4"]]],[11,"from_bits","","",7,[[["m16x4"]],["u32x2"]]],[11,"from_bits","","",51,[[["u16x8"]],["i32x4"]]],[11,"from_bits","","",17,[[["vector_signed_short"]],["u32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_unsigned_short"]],["vector_signed_char"]]],[11,"from_bits","","",72,[[["m32x4"]],["vector_unsigned_int"]]],[11,"from_bits","","",71,[[["m64x2"]],["vector_bool_char"]]],[11,"from_bits","","",72,[[["i64x2"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",8,[[["u64x4"]],["i16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["i8x16"]],["vector_unsigned_char"]]],[11,"from_bits","","",64,[[["m64x2"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",60,[[["m8x8"]],["f32x2"]]],[11,"from_bits","","",32,[[["m1x32"]],["u16x32"]]],[11,"from_bits","","",58,[[["u64x8"]],["f32x16"]]],[11,"from_bits","","",38,[[["i64x4"]],["i32x8"]]],[11,"from_bits","","",62,[[["f64x4"]],["f32x8"]]],[11,"from_bits","","",21,[[["i8x32"]],["u8x32"]]],[11,"from_bits","","",40,[[["i64x8"]],["i32x16"]]],[11,"from_bits","","",60,[[["m16x4"]],["f32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["i32x4"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",33,[[["vector_bool_int"]],["i8x16"]]],[11,"from_bits","","",12,[[["u64x2"]],["u16x8"]]],[11,"from_bits","","",10,[[["u64x4"]],["u16x16"]]],[11,"from_bits","","",39,[[["vector_bool_int"]],["m16x8"]]],[11,"from_bits","","",32,[[["i32x16"]],["u16x32"]]],[11,"from_bits","","",16,[[["u32x4"]],["u64x2"]]],[11,"from_bits","","",44,[[["i8x8"]],["u8x8"]]],[11,"from_bits","","",11,[[["m8x8"]],["i32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["i16x8"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",46,[[["u32x16"]],["i64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_signed_int"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",44,[[["m32x2"]],["u8x8"]]],[11,"from_bits","","",27,[[["i64x8"]],["i16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["i64x2"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",7,[[["i16x4"]],["u32x2"]]],[11,"from_bits","","",61,[[["i32x8"]],["f64x4"]]],[11,"from_bits","","",3,[[["u64x8"]],["u8x64"]]],[11,"from_bits","","",44,[[["u16x4"]],["u8x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",63,[[["m64x2"]],["vector_bool_short"]]],[11,"from_bits","","",65,[[["i16x8"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",12,[[["u32x4"]],["u16x8"]]],[11,"from_bits","","",16,[[["m64x2"]],["u64x2"]]],[11,"from_bits","","",51,[[["vector_signed_int"]],["i32x4"]]],[11,"from_bits","","",2,[[["f32x8"]],["u64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_unsigned_int"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",56,[[["i32x4"]],["f32x4"]]],[11,"from_bits","","",20,[[["f32x8"]],["i64x4"]]],[11,"from_bits","","",5,[[["f64x4"]],["u32x8"]]],[11,"from_bits","","",55,[[["i32x4"]],["i16x8"]]],[11,"from_bits","","",16,[[["m8x16"]],["u64x2"]]],[11,"from_bits","","",34,[[["u16x2"]],["i16x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["vector_bool_short"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",46,[[["u8x64"]],["i64x8"]]],[11,"from_bits","","",36,[[["m1x64"]],["i8x64"]]],[11,"from_bits","","",51,[[["vector_unsigned_short"]],["i32x4"]]],[11,"from_bits","","",2,[[["m32x8"]],["u64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["m8x16"]],["vector_unsigned_int"]]],[11,"from_bits","","",72,[[["u16x8"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",56,[[["u8x16"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["m16x8"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",38,[[["i16x16"]],["i32x8"]]],[11,"from_bits","","",25,[[["m32x2"]],["i16x4"]]],[11,"from_bits","","",55,[[["vector_unsigned_short"]],["i16x8"]]],[11,"from_bits","","",11,[[["m16x4"]],["i32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["m16x8"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",25,[[["u8x8"]],["i16x4"]]],[11,"from_bits","","",51,[[["m64x2"]],["i32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["m8x16"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",22,[[["u8x8"]],["u16x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_signed_int"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",22,[[["u32x2"]],["u16x4"]]],[11,"from_bits","","",32,[[["u32x16"]],["u16x32"]]],[11,"from_bits","","",4,[[["m8x2"]],["i8x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["vector_float"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",28,[[["u64x8"]],["u32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["u16x8"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",38,[[["u64x4"]],["i32x8"]]],[11,"from_bits","","",56,[[["vector_signed_int"]],["f32x4"]]],[11,"from_bits","","",55,[[["u32x4"]],["i16x8"]]],[11,"from_bits","","",50,[[["m16x2"]],["u8x4"]]],[11,"from_bits","","",16,[[["i8x16"]],["u64x2"]]],[11,"from_bits","","",38,[[["m32x8"]],["i32x8"]]],[11,"from_bits","","",16,[[["i64x2"]],["u64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["i8x16"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",60,[[["u16x4"]],["f32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["i8x16"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",46,[[["f64x8"]],["i64x8"]]],[11,"from_bits","","",8,[[["i64x4"]],["i16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["vector_bool_int"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",12,[[["i8x16"]],["u16x8"]]],[11,"from_bits","","",59,[[["i16x8"]],["f64x2"]]],[11,"from_bits","","",27,[[["u8x64"]],["i16x32"]]],[11,"from_bits","","",46,[[["m1x8"]],["i64x8"]]],[11,"from_bits","","",28,[[["i16x32"]],["u32x16"]]],[11,"from_bits","","",43,[[["i8x16"]],["u8x16"]]],[11,"from_bits","","",27,[[["m1x64"]],["i16x32"]]],[11,"from_bits","","",6,[[["m1x64"]],["u64x8"]]],[11,"from_bits","","",57,[[["i32x16"]],["f64x8"]]],[11,"from_bits","","",6,[[["m1x8"]],["u64x8"]]],[11,"from_bits","","",32,[[["i8x64"]],["u16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["f32x4"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",27,[[["f64x8"]],["i16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["vector_signed_int"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",11,[[["i16x4"]],["i32x2"]]],[11,"from_bits","","",57,[[["i16x32"]],["f64x8"]]],[11,"from_bits","","",54,[[["u16x2"]],["i8x4"]]],[11,"from_bits","","",12,[[["vector_unsigned_int"]],["u16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["m64x2"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",33,[[["vector_signed_char"]],["i8x16"]]],[11,"from_bits","","",51,[[["m32x4"]],["i32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_float"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",40,[[["m1x32"]],["i32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["m32x4"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",56,[[["vector_bool_short"]],["f32x4"]]],[11,"from_bits","","",2,[[["i32x8"]],["u64x4"]]],[11,"from_bits","","",57,[[["i64x8"]],["f64x8"]]],[11,"from_bits","","",32,[[["f64x8"]],["u16x32"]]],[11,"from_bits","","",55,[[["vector_unsigned_int"]],["i16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["m64x2"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",49,[[["i8x2"]],["u8x2"]]],[11,"from_bits","","",17,[[["i64x2"]],["u32x4"]]],[11,"from_bits","","",17,[[["m64x2"]],["u32x4"]]],[11,"from_bits","","",27,[[["i8x64"]],["i16x32"]]],[11,"from_bits","","",58,[[["f64x8"]],["f32x16"]]],[11,"from_bits","","",27,[[["u32x16"]],["i16x32"]]],[11,"from_bits","","",61,[[["u64x4"]],["f64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["u64x2"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",3,[[["i32x16"]],["u8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["f64x2"]],["vector_float"]]],[11,"from_bits","","",68,[[["i32x4"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",35,[[["u64x2"]],["i64x2"]]],[11,"from_bits","","",6,[[["f32x16"]],["u64x8"]]],[11,"from_bits","","",38,[[["i8x32"]],["i32x8"]]],[11,"from_bits","","",21,[[["i16x16"]],["u8x32"]]],[11,"from_bits","","",22,[[["m16x4"]],["u16x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_bool_char"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",43,[[["f32x4"]],["u8x16"]]],[11,"from_bits","","",43,[[["vector_bool_short"]],["u8x16"]]],[11,"from_bits","","",57,[[["m1x16"]],["f64x8"]]],[11,"from_bits","","",46,[[["f32x16"]],["i64x8"]]],[11,"from_bits","","",43,[[["vector_unsigned_short"]],["u8x16"]]],[11,"from_bits","","",10,[[["m32x8"]],["u16x16"]]],[11,"from_bits","","",59,[[["f32x4"]],["f64x2"]]],[11,"from_bits","","",60,[[["u32x2"]],["f32x2"]]],[11,"from_bits","","",40,[[["i8x64"]],["i32x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["m64x2"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",2,[[["m8x32"]],["u64x4"]]],[11,"from_bits","","",20,[[["m64x4"]],["i64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["i32x4"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",56,[[["m8x16"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["i16x8"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",50,[[["i16x2"]],["u8x4"]]],[11,"from_bits","","",40,[[["u8x64"]],["i32x16"]]],[11,"from_bits","","",58,[[["i32x16"]],["f32x16"]]],[11,"from_bits","","",35,[[["u8x16"]],["i64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["u8x16"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",2,[[["i64x4"]],["u64x4"]]],[11,"from_bits","","",43,[[["m32x4"]],["u8x16"]]],[11,"from_bits","","",33,[[["m32x4"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_signed_int"]],["vector_unsigned_short"]]],[11,"from_bits","","",70,[[["m16x8"]],["vector_unsigned_short"]]],[11,"from_bits","","",72,[[["u8x16"]],["vector_unsigned_int"]]],[11,"from_bits","","",67,[[["vector_signed_char"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",19,[[["u8x8"]],["i8x8"]]],[11,"from_bits","","",11,[[["u16x4"]],["i32x2"]]],[11,"from_bits","","",21,[[["m32x8"]],["u8x32"]]],[11,"from_bits","","",28,[[["m1x8"]],["u32x16"]]],[11,"from_bits","","",61,[[["m16x16"]],["f64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",63,[[["m16x8"]],["vector_bool_short"]]],[11,"from_bits","stdsimd::simd","",17,[[["vector_float"]],["u32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["f64x2"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",33,[[["vector_float"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["vector_unsigned_int"]],["vector_signed_char"]]],[11,"from_bits","","",67,[[["vector_unsigned_short"]],["vector_float"]]],[11,"from_bits","","",68,[[["i64x2"]],["vector_bool_int"]]],[11,"from_bits","","",67,[[["u16x8"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",27,[[["i32x16"]],["i16x32"]]],[11,"from_bits","","",48,[[["u8x32"]],["i8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["f32x4"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",51,[[["m8x16"]],["i32x4"]]],[11,"from_bits","","",12,[[["i64x2"]],["u16x8"]]],[11,"from_bits","","",61,[[["i64x4"]],["f64x4"]]],[11,"from_bits","","",32,[[["m1x16"]],["u16x32"]]],[11,"from_bits","","",3,[[["i16x32"]],["u8x64"]]],[11,"from_bits","","",55,[[["i8x16"]],["i16x8"]]],[11,"from_bits","","",61,[[["u32x8"]],["f64x4"]]],[11,"from_bits","","",33,[[["m8x16"]],["i8x16"]]],[11,"from_bits","","",55,[[["u8x16"]],["i16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_bool_short"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",38,[[["m64x4"]],["i32x8"]]],[11,"from_bits","","",8,[[["m16x16"]],["i16x16"]]],[11,"from_bits","","",33,[[["m64x2"]],["i8x16"]]],[11,"from_bits","","",36,[[["m1x32"]],["i8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["i64x2"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",7,[[["i32x2"]],["u32x2"]]],[11,"from_bits","","",59,[[["i8x16"]],["f64x2"]]],[11,"from_bits","","",8,[[["f64x4"]],["i16x16"]]],[11,"from_bits","","",59,[[["u64x2"]],["f64x2"]]],[11,"from_bits","","",2,[[["u32x8"]],["u64x4"]]],[11,"from_bits","","",11,[[["f32x2"]],["i32x2"]]],[11,"from_bits","","",21,[[["f32x8"]],["u8x32"]]],[11,"from_bits","","",51,[[["i16x8"]],["i32x4"]]],[11,"from_bits","","",10,[[["i8x32"]],["u16x16"]]],[11,"from_bits","","",51,[[["u64x2"]],["i32x4"]]],[11,"from_bits","","",58,[[["u32x16"]],["f32x16"]]],[11,"from_bits","","",56,[[["vector_bool_int"]],["f32x4"]]],[11,"from_bits","","",35,[[["f64x2"]],["i64x2"]]],[11,"from_bits","","",56,[[["u16x8"]],["f32x4"]]],[11,"from_bits","","",60,[[["m32x2"]],["f32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_unsigned_short"]],["vector_unsigned_int"]]],[11,"from_bits","","",64,[[["f32x4"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",14,[[["m8x4"]],["u16x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["i64x2"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",61,[[["m8x32"]],["f64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["i16x8"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",14,[[["i8x4"]],["u16x2"]]],[11,"from_bits","","",10,[[["f64x4"]],["u16x16"]]],[11,"from_bits","","",17,[[["i8x16"]],["u32x4"]]],[11,"from_bits","","",27,[[["m1x8"]],["i16x32"]]],[11,"from_bits","","",12,[[["f64x2"]],["u16x8"]]],[11,"from_bits","","",3,[[["u16x32"]],["u8x64"]]],[11,"from_bits","","",32,[[["i16x32"]],["u16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_bool_int"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",38,[[["u32x8"]],["i32x8"]]],[11,"from_bits","","",16,[[["u16x8"]],["u64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["u8x16"]],["vector_unsigned_char"]]],[11,"from_bits","","",66,[[["m16x8"]],["vector_signed_short"]]],[11,"from_bits","","",66,[[["m64x2"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",59,[[["u32x4"]],["f64x2"]]],[11,"from_bits","","",19,[[["u16x4"]],["i8x8"]]],[11,"from_bits","","",28,[[["f64x8"]],["u32x16"]]],[11,"from_bits","","",14,[[["i16x2"]],["u16x2"]]],[11,"from_bits","","",33,[[["u16x8"]],["i8x16"]]],[11,"from_bits","","",32,[[["m1x64"]],["u16x32"]]],[11,"from_bits","","",12,[[["f32x4"]],["u16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["f32x4"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",12,[[["i16x8"]],["u16x8"]]],[11,"from_bits","","",32,[[["f32x16"]],["u16x32"]]],[11,"from_bits","","",62,[[["u8x32"]],["f32x8"]]],[11,"from_bits","","",25,[[["i8x8"]],["i16x4"]]],[11,"from_bits","","",55,[[["vector_float"]],["i16x8"]]],[11,"from_bits","","",16,[[["f32x4"]],["u64x2"]]],[11,"from_bits","","",3,[[["m1x32"]],["u8x64"]]],[11,"from_bits","","",38,[[["m8x32"]],["i32x8"]]],[11,"from_bits","","",3,[[["f64x8"]],["u8x64"]]],[11,"from_bits","","",5,[[["f32x8"]],["u32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",71,[[["vector_bool_short"]],["vector_bool_char"]]],[11,"from_bits","stdsimd::simd","",21,[[["f64x4"]],["u8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["u16x8"]],["vector_signed_short"]]],[11,"from_bits","","",69,[[["m8x16"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",60,[[["i32x2"]],["f32x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_signed_char"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",12,[[["vector_bool_char"]],["u16x8"]]],[11,"from_bits","","",56,[[["i64x2"]],["f32x4"]]],[11,"from_bits","","",8,[[["m32x8"]],["i16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["vector_signed_int"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",41,[[["vector_bool_char"]],["m8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["m16x8"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",48,[[["i32x8"]],["i8x32"]]],[11,"from_bits","","",59,[[["u16x8"]],["f64x2"]]],[11,"from_bits","","",7,[[["m8x8"]],["u32x2"]]],[11,"from_bits","","",43,[[["i64x2"]],["u8x16"]]],[11,"from_bits","","",56,[[["vector_bool_char"]],["f32x4"]]],[11,"from_bits","","",36,[[["u8x64"]],["i8x64"]]],[11,"from_bits","","",48,[[["m8x32"]],["i8x32"]]],[11,"from_bits","","",51,[[["vector_bool_char"]],["i32x4"]]],[11,"from_bits","","",6,[[["i64x8"]],["u64x8"]]],[11,"from_bits","","",58,[[["u8x64"]],["f32x16"]]],[11,"from_bits","","",17,[[["m32x4"]],["u32x4"]]],[11,"from_bits","","",5,[[["m32x8"]],["u32x8"]]],[11,"from_bits","","",54,[[["m8x4"]],["i8x4"]]],[11,"from_bits","","",62,[[["u16x16"]],["f32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["u32x4"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",27,[[["f32x16"]],["i16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["u32x4"]],["vector_signed_short"]]],[11,"from_bits","","",64,[[["vector_bool_short"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",59,[[["u8x16"]],["f64x2"]]],[11,"from_bits","","",6,[[["m1x16"]],["u64x8"]]],[11,"from_bits","","",57,[[["m1x32"]],["f64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["vector_bool_char"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",43,[[["vector_unsigned_char"]],["u8x16"]]],[11,"from_bits","","",57,[[["u64x8"]],["f64x8"]]],[11,"from_bits","","",17,[[["u64x2"]],["u32x4"]]],[11,"from_bits","","",62,[[["i16x16"]],["f32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",71,[[["m16x8"]],["vector_bool_char"]]],[11,"from_bits","","",65,[[["vector_bool_int"]],["vector_signed_char"]]],[11,"from_bits","","",65,[[["m16x8"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",54,[[["i16x2"]],["i8x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["u32x4"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",6,[[["i32x16"]],["u64x8"]]],[11,"from_bits","","",2,[[["u8x32"]],["u64x4"]]],[11,"from_bits","","",38,[[["u16x16"]],["i32x8"]]],[11,"from_bits","","",14,[[["u8x4"]],["u16x2"]]],[11,"from_bits","","",40,[[["u64x8"]],["i32x16"]]],[11,"from_bits","","",35,[[["i16x8"]],["i64x2"]]],[11,"from_bits","","",33,[[["vector_bool_char"]],["i8x16"]]],[11,"from_bits","","",36,[[["u16x32"]],["i8x64"]]],[11,"from_bits","","",29,[[["vector_bool_int"]],["m32x4"]]],[11,"from_bits","","",14,[[["m16x2"]],["u16x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["u64x2"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",12,[[["vector_signed_short"]],["u16x8"]]],[11,"from_bits","","",57,[[["u16x32"]],["f64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["u64x2"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",57,[[["m1x64"]],["f64x8"]]],[11,"from_bits","","",8,[[["f32x8"]],["i16x16"]]],[11,"from_bits","","",33,[[["u8x16"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["f32x4"]],["vector_signed_int"]]],[11,"from_bits","","",68,[[["m64x2"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",60,[[["u8x8"]],["f32x2"]]],[11,"from_bits","","",10,[[["u32x8"]],["u16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",63,[[["vector_bool_int"]],["vector_bool_short"]]],[11,"from_bits","stdsimd::simd","",33,[[["i16x8"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["m8x16"]],["vector_float"]]],[11,"from_bits","","",71,[[["m8x16"]],["vector_bool_char"]]],[11,"from_bits","","",67,[[["vector_signed_short"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",22,[[["i32x2"]],["u16x4"]]],[11,"from_bits","","",16,[[["m32x4"]],["u64x2"]]],[11,"from_bits","","",5,[[["u64x4"]],["u32x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["u64x2"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",17,[[["vector_unsigned_int"]],["u32x4"]]],[11,"from_bits","","",28,[[["u16x32"]],["u32x16"]]],[11,"from_bits","","",25,[[["u32x2"]],["i16x4"]]],[11,"from_bits","","",56,[[["m16x8"]],["f32x4"]]],[11,"from_bits","","",17,[[["vector_unsigned_short"]],["u32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["i16x8"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",55,[[["f64x2"]],["i16x8"]]],[11,"from_bits","","",56,[[["i8x16"]],["f32x4"]]],[11,"from_bits","","",12,[[["vector_bool_int"]],["u16x8"]]],[11,"from_bits","","",20,[[["f64x4"]],["i64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",65,[[["u8x16"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",59,[[["m8x16"]],["f64x2"]]],[11,"from_bits","","",51,[[["vector_bool_int"]],["i32x4"]]],[11,"from_bits","","",33,[[["vector_unsigned_char"]],["i8x16"]]],[11,"from_bits","","",12,[[["i32x4"]],["u16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_bool_short"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",46,[[["m1x32"]],["i64x8"]]],[11,"from_bits","","",51,[[["vector_unsigned_int"]],["i32x4"]]],[11,"from_bits","","",61,[[["u8x32"]],["f64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["m32x4"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",20,[[["m8x32"]],["i64x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["i32x4"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",55,[[["vector_bool_short"]],["i16x8"]]],[11,"from_bits","","",21,[[["u16x16"]],["u8x32"]]],[11,"from_bits","","",17,[[["f64x2"]],["u32x4"]]],[11,"from_bits","","",25,[[["m16x4"]],["i16x4"]]],[11,"from_bits","","",57,[[["i8x64"]],["f64x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_float"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",43,[[["u16x8"]],["u8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_signed_short"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",43,[[["vector_bool_char"]],["u8x16"]]],[11,"from_bits","","",55,[[["vector_bool_char"]],["i16x8"]]],[11,"from_bits","stdsimd::arch::powerpc","",69,[[["vector_bool_int"]],["vector_signed_int"]]],[11,"from_bits","stdsimd::simd","",51,[[["i8x16"]],["i32x4"]]],[11,"from_bits","","",12,[[["vector_float"]],["u16x8"]]],[11,"from_bits","","",2,[[["u16x16"]],["u64x4"]]],[11,"from_bits","","",33,[[["f64x2"]],["i8x16"]]],[11,"from_bits","","",33,[[["vector_signed_short"]],["i8x16"]]],[11,"from_bits","","",41,[[["vector_bool_int"]],["m8x16"]]],[11,"from_bits","","",20,[[["i8x32"]],["i64x4"]]],[11,"from_bits","","",12,[[["m64x2"]],["u16x8"]]],[11,"from_bits","","",21,[[["m8x32"]],["u8x32"]]],[11,"from_bits","","",51,[[["vector_signed_short"]],["i32x4"]]],[11,"from_bits","","",56,[[["u32x4"]],["f32x4"]]],[11,"from_bits","","",3,[[["u32x16"]],["u8x64"]]],[11,"from_bits","","",58,[[["m1x64"]],["f32x16"]]],[11,"from_bits","","",10,[[["i16x16"]],["u16x16"]]],[11,"from_bits","","",48,[[["u32x8"]],["i8x32"]]],[11,"from_bits","","",50,[[["m8x4"]],["u8x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["m64x2"]],["vector_unsigned_int"]]],[11,"from_bits","","",72,[[["i32x4"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",16,[[["f64x2"]],["u64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",71,[[["m32x4"]],["vector_bool_char"]]],[11,"from_bits","stdsimd::simd","",28,[[["f32x16"]],["u32x16"]]],[11,"from_bits","","",5,[[["i32x8"]],["u32x8"]]],[11,"from_bits","","",48,[[["i64x4"]],["i8x32"]]],[11,"from_bits","","",36,[[["i64x8"]],["i8x64"]]],[11,"from_bits","","",16,[[["u8x16"]],["u64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["f64x2"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",19,[[["m8x8"]],["i8x8"]]],[11,"from_bits","","",12,[[["u8x16"]],["u16x8"]]],[11,"from_bits","","",20,[[["u8x32"]],["i64x4"]]],[11,"from_bits","","",8,[[["i8x32"]],["i16x16"]]],[11,"from_bits","","",21,[[["u32x8"]],["u8x32"]]],[11,"from_bits","","",56,[[["vector_float"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["u8x16"]],["vector_bool_int"]]],[11,"from_bits","","",72,[[["i16x8"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",33,[[["i32x4"]],["i8x16"]]],[11,"from_bits","","",16,[[["i16x8"]],["u64x2"]]],[11,"from_bits","","",43,[[["vector_signed_int"]],["u8x16"]]],[11,"from_bits","","",36,[[["i32x16"]],["i8x64"]]],[11,"from_bits","","",10,[[["m8x32"]],["u16x16"]]],[11,"from_bits","","",59,[[["i32x4"]],["f64x2"]]],[11,"from_bits","","",40,[[["u32x16"]],["i32x16"]]],[11,"from_bits","","",61,[[["u16x16"]],["f64x4"]]],[11,"from_bits","","",17,[[["vector_signed_int"]],["u32x4"]]],[11,"from_bits","","",21,[[["i64x4"]],["u8x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["u32x4"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",54,[[["u8x4"]],["i8x4"]]],[11,"from_bits","","",17,[[["m8x16"]],["u32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["vector_bool_char"]],["vector_float"]]],[11,"from_bits","stdsimd::simd","",43,[[["vector_bool_int"]],["u8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",66,[[["m8x16"]],["vector_signed_short"]]],[11,"from_bits","stdsimd::simd","",12,[[["vector_unsigned_short"]],["u16x8"]]],[11,"from_bits","","",56,[[["vector_signed_short"]],["f32x4"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["vector_signed_short"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",2,[[["i16x16"]],["u64x4"]]],[11,"from_bits","","",17,[[["vector_bool_short"]],["u32x4"]]],[11,"from_bits","","",51,[[["vector_unsigned_char"]],["i32x4"]]],[11,"from_bits","","",27,[[["u16x32"]],["i16x32"]]],[11,"from_bits","stdsimd::arch::powerpc","",64,[[["u32x4"]],["vector_unsigned_char"]]],[11,"from_bits","stdsimd::simd","",28,[[["i32x16"]],["u32x16"]]],[11,"from_bits","","",33,[[["f32x4"]],["i8x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",70,[[["u16x8"]],["vector_unsigned_short"]]],[11,"from_bits","stdsimd::simd","",10,[[["m64x4"]],["u16x16"]]],[11,"from_bits","","",43,[[["u32x4"]],["u8x16"]]],[11,"from_bits","","",35,[[["m32x4"]],["i64x2"]]],[11,"from_bits","stdsimd::arch::powerpc","",67,[[["f32x4"]],["vector_float"]]],[11,"from_bits","","",65,[[["u16x8"]],["vector_signed_char"]]],[11,"from_bits","stdsimd::simd","",55,[[["u64x2"]],["i16x8"]]],[11,"from_bits","","",55,[[["vector_signed_char"]],["i16x8"]]],[11,"from_bits","","",10,[[["m16x16"]],["u16x16"]]],[11,"from_bits","","",10,[[["u8x32"]],["u16x16"]]],[11,"from_bits","stdsimd::arch::powerpc","",72,[[["vector_bool_char"]],["vector_unsigned_int"]]],[11,"from_bits","stdsimd::simd","",62,[[["i64x4"]],["f32x8"]]],[11,"from_bits","","",51,[[["f64x2"]],["i32x4"]]],[11,"from_bits","","",3,[[["f32x16"]],["u8x64"]]],[11,"from_bits","stdsimd::arch::powerpc","",68,[[["i16x8"]],["vector_bool_int"]]],[11,"from_bits","stdsimd::simd","",22,[[["i16x4"]],["u16x4"]]],[11,"from_bits","","",20,[[["u32x8"]],["i64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",44,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["u8x8"]]],[11,"lanes","","Returns the number of vector lanes.",44,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",44,[[["u8"]],["u8x8"]]],[11,"extract","","Extracts the value at `index`.",44,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",44,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["u8"]],["u8x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["u8"]],["u8x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",44,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",44,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",44,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",44,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"eq","","Lane-wise equality comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",44,[[["self"],["u8x8"]],["m8x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",44,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",44,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",44,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",44,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",44,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",44,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",44,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"max","","Maximum of two vectors.",44,[[["self"],["u8x8"]],["u8x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",44,[[["self"]],["u8x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",44,[[["self"]],["u8x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",44,[[["self"]],["u8x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",54,[[["i8"],["i8"],["i8"],["i8"]],["i8x4"]]],[11,"lanes","","Returns the number of vector lanes.",54,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",54,[[["i8"]],["i8x4"]]],[11,"extract","","Extracts the value at `index`.",54,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",54,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["i8"]],["i8x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["i8"]],["i8x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",54,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",54,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",54,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",54,N],[11,"eq","","Lane-wise equality comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",54,[[["self"],["i8x4"]],["m8x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",54,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",54,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",54,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",54,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",54,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",54,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",54,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"max","","Maximum of two vectors.",54,[[["self"],["i8x4"]],["i8x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",54,[[["self"]],["i8x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",54,[[["self"]],["i8x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",54,[[["self"]],["i8x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",7,[[["u32"],["u32"]],["u32x2"]]],[11,"lanes","","Returns the number of vector lanes.",7,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",7,[[["u32"]],["u32x2"]]],[11,"extract","","Extracts the value at `index`.",7,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",7,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["u32"]],["u32x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",7,[[["self"],["usize"],["u32"]],["u32x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",7,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",7,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",7,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",7,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",7,N],[11,"eq","","Lane-wise equality comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",7,[[["self"],["u32x2"]],["m32x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",7,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",7,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",7,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",7,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",7,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",7,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",7,[[["self"]],["u32"]]],[11,"min","","Minimum of two vectors.",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"max","","Maximum of two vectors.",7,[[["self"],["u32x2"]],["u32x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",7,[[["self"]],["u32x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",7,[[["self"]],["u32x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",7,[[["self"]],["u32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",47,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m1x32"]]],[11,"lanes","","Returns the number of vector lanes.",47,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",47,[[["bool"]],["m1x32"]]],[11,"extract","","Extracts the value at `index`.",47,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",47,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["bool"]],["m1x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["bool"]],["m1x32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",47,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",47,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",47,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",47,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",47,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",47,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",47,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",47,[[["self"],["m1x32"]],["m1x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",13,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m1x8"]]],[11,"lanes","","Returns the number of vector lanes.",13,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",13,[[["bool"]],["m1x8"]]],[11,"extract","","Extracts the value at `index`.",13,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",13,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["bool"]],["m1x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["bool"]],["m1x8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",13,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",13,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",13,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",13,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",13,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",13,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",13,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",13,[[["self"],["m1x8"]],["m1x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",9,[[["bool"],["bool"]],["m8x2"]]],[11,"lanes","","Returns the number of vector lanes.",9,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",9,[[["bool"]],["m8x2"]]],[11,"extract","","Extracts the value at `index`.",9,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",9,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["bool"]],["m8x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["bool"]],["m8x2"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",9,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",9,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",9,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",9,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",9,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",9,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",9,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",9,[[["self"],["m8x2"]],["m8x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",58,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["f32x16"]]],[11,"lanes","","Returns the number of vector lanes.",58,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",58,[[["f32"]],["f32x16"]]],[11,"extract","","Extracts the value at `index`.",58,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",58,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["f32"]],["f32x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["f32"]],["f32x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",58,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",58,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"eq","","Lane-wise equality comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",58,[[["self"],["f32x16"]],["m1x16"]]],[11,"sum","","Horizontal sum of the vector elements.",58,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",58,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",58,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",58,[[["self"]],["f32"]]],[11,"min","","Minimum of two vectors.",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"max","","Maximum of two vectors.",58,[[["self"],["f32x16"]],["f32x16"]]],[11,"abs","","Absolute-value",58,[[["self"]],["f32x16"]]],[11,"sqrt","","Square-root",58,[[["self"]],["f32x16"]]],[11,"sqrte","","Square-root estimate",58,[[["self"]],["f32x16"]]],[11,"rsqrte","","Reciprocal square-root estimate",58,[[["self"]],["f32x16"]]],[11,"fma","","Fused multiply add: `self * y + z`",58,[[["self"],["f32x16"],["f32x16"]],["f32x16"]]],[11,"sin","","Sin",58,[[["self"]],["f32x16"]]],[11,"cos","","Cos",58,[[["self"]],["f32x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",17,[[["u32"],["u32"],["u32"],["u32"]],["u32x4"]]],[11,"lanes","","Returns the number of vector lanes.",17,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",17,[[["u32"]],["u32x4"]]],[11,"extract","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",17,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u32"]],["u32x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["u32"]],["u32x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",17,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",17,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"eq","","Lane-wise equality comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",17,[[["self"],["u32x4"]],["m32x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",17,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",17,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",17,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",17,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",17,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",17,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",17,[[["self"]],["u32"]]],[11,"min","","Minimum of two vectors.",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"max","","Maximum of two vectors.",17,[[["self"],["u32x4"]],["u32x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",17,[[["self"]],["u32x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",17,[[["self"]],["u32x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",17,[[["self"]],["u32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",26,[[["bool"],["bool"],["bool"],["bool"]],["m64x4"]]],[11,"lanes","","Returns the number of vector lanes.",26,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",26,[[["bool"]],["m64x4"]]],[11,"extract","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["m64x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["m64x4"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",26,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",26,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",26,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",26,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",26,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",26,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",26,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",26,[[["self"],["m64x4"]],["m64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",29,[[["bool"],["bool"],["bool"],["bool"]],["m32x4"]]],[11,"lanes","","Returns the number of vector lanes.",29,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",29,[[["bool"]],["m32x4"]]],[11,"extract","","Extracts the value at `index`.",29,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",29,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["bool"]],["m32x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["bool"]],["m32x4"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",29,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",29,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",29,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",29,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",29,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",29,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",29,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",29,[[["self"],["m32x4"]],["m32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",61,[[["f64"],["f64"],["f64"],["f64"]],["f64x4"]]],[11,"lanes","","Returns the number of vector lanes.",61,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",61,[[["f64"]],["f64x4"]]],[11,"extract","","Extracts the value at `index`.",61,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",61,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["f64"]],["f64x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["f64"]],["f64x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",61,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",61,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",61,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",61,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"eq","","Lane-wise equality comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",61,[[["self"],["f64x4"]],["m64x4"]]],[11,"sum","","Horizontal sum of the vector elements.",61,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",61,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",61,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",61,[[["self"]],["f64"]]],[11,"min","","Minimum of two vectors.",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"max","","Maximum of two vectors.",61,[[["self"],["f64x4"]],["f64x4"]]],[11,"abs","","Absolute-value",61,[[["self"]],["f64x4"]]],[11,"sqrt","","Square-root",61,[[["self"]],["f64x4"]]],[11,"sqrte","","Square-root estimate",61,[[["self"]],["f64x4"]]],[11,"rsqrte","","Reciprocal square-root estimate",61,[[["self"]],["f64x4"]]],[11,"fma","","Fused multiply add: `self * y + z`",61,[[["self"],["f64x4"],["f64x4"]],["f64x4"]]],[11,"sin","","Sin",61,[[["self"]],["f64x4"]]],[11,"cos","","Cos",61,[[["self"]],["f64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",15,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m8x32"]]],[11,"lanes","","Returns the number of vector lanes.",15,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",15,[[["bool"]],["m8x32"]]],[11,"extract","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",15,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["m8x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["bool"]],["m8x32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",15,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",15,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",15,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",15,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",15,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",15,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",15,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",15,[[["self"],["m8x32"]],["m8x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",31,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m16x16"]]],[11,"lanes","","Returns the number of vector lanes.",31,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",31,[[["bool"]],["m16x16"]]],[11,"extract","","Extracts the value at `index`.",31,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",31,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["bool"]],["m16x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["bool"]],["m16x16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",31,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",31,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",31,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",31,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",31,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",31,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",31,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",31,[[["self"],["m16x16"]],["m16x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",32,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["u16x32"]]],[11,"lanes","","Returns the number of vector lanes.",32,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",32,[[["u16"]],["u16x32"]]],[11,"extract","","Extracts the value at `index`.",32,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",32,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["u16"]],["u16x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["u16"]],["u16x32"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",32,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",32,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",32,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",32,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",32,N],[11,"eq","","Lane-wise equality comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",32,[[["self"],["u16x32"]],["m1x32"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",32,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",32,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",32,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",32,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",32,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",32,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",32,[[["self"]],["u16"]]],[11,"min","","Minimum of two vectors.",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"max","","Maximum of two vectors.",32,[[["self"],["u16x32"]],["u16x32"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",32,[[["self"]],["u16x32"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",32,[[["self"]],["u16x32"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",32,[[["self"]],["u16x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",53,[[["bool"],["bool"]],["m64x2"]]],[11,"lanes","","Returns the number of vector lanes.",53,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",53,[[["bool"]],["m64x2"]]],[11,"extract","","Extracts the value at `index`.",53,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",53,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["bool"]],["m64x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["bool"]],["m64x2"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",53,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",53,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",53,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",53,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",53,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",53,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",53,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",53,[[["self"],["m64x2"]],["m64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",60,[[["f32"],["f32"]],["f32x2"]]],[11,"lanes","","Returns the number of vector lanes.",60,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",60,[[["f32"]],["f32x2"]]],[11,"extract","","Extracts the value at `index`.",60,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",60,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["f32"]],["f32x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["f32"]],["f32x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",60,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",60,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",60,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",60,N],[11,"eq","","Lane-wise equality comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",60,[[["self"],["f32x2"]],["m32x2"]]],[11,"sum","","Horizontal sum of the vector elements.",60,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",60,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",60,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",60,[[["self"]],["f32"]]],[11,"min","","Minimum of two vectors.",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"max","","Maximum of two vectors.",60,[[["self"],["f32x2"]],["f32x2"]]],[11,"abs","","Absolute-value",60,[[["self"]],["f32x2"]]],[11,"sqrt","","Square-root",60,[[["self"]],["f32x2"]]],[11,"sqrte","","Square-root estimate",60,[[["self"]],["f32x2"]]],[11,"rsqrte","","Reciprocal square-root estimate",60,[[["self"]],["f32x2"]]],[11,"fma","","Fused multiply add: `self * y + z`",60,[[["self"],["f32x2"],["f32x2"]],["f32x2"]]],[11,"sin","","Sin",60,[[["self"]],["f32x2"]]],[11,"cos","","Cos",60,[[["self"]],["f32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",38,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["i32x8"]]],[11,"lanes","","Returns the number of vector lanes.",38,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",38,[[["i32"]],["i32x8"]]],[11,"extract","","Extracts the value at `index`.",38,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",38,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["i32"]],["i32x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["i32"]],["i32x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",38,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",38,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"eq","","Lane-wise equality comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",38,[[["self"],["i32x8"]],["m32x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",38,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",38,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",38,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",38,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",38,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",38,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",38,[[["self"]],["i32"]]],[11,"min","","Minimum of two vectors.",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"max","","Maximum of two vectors.",38,[[["self"],["i32x8"]],["i32x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",38,[[["self"]],["i32x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",38,[[["self"]],["i32x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",38,[[["self"]],["i32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",18,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m8x8"]]],[11,"lanes","","Returns the number of vector lanes.",18,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",18,[[["bool"]],["m8x8"]]],[11,"extract","","Extracts the value at `index`.",18,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",18,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["bool"]],["m8x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["bool"]],["m8x8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",18,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",18,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",18,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",18,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",18,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",18,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",18,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",18,[[["self"],["m8x8"]],["m8x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",4,[[["i8"],["i8"]],["i8x2"]]],[11,"lanes","","Returns the number of vector lanes.",4,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",4,[[["i8"]],["i8x2"]]],[11,"extract","","Extracts the value at `index`.",4,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",4,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",4,[[["self"],["usize"],["i8"]],["i8x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",4,[[["self"],["usize"],["i8"]],["i8x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",4,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",4,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",4,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",4,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",4,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",4,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",4,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",4,N],[11,"eq","","Lane-wise equality comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",4,[[["self"],["i8x2"]],["m8x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",4,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",4,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",4,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",4,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",4,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",4,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",4,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"max","","Maximum of two vectors.",4,[[["self"],["i8x2"]],["i8x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",4,[[["self"]],["i8x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",4,[[["self"]],["i8x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",4,[[["self"]],["i8x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",28,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["u32x16"]]],[11,"lanes","","Returns the number of vector lanes.",28,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",28,[[["u32"]],["u32x16"]]],[11,"extract","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u32"]],["u32x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u32"]],["u32x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",28,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",28,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"eq","","Lane-wise equality comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",28,[[["self"],["u32x16"]],["m1x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",28,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",28,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",28,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",28,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",28,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",28,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",28,[[["self"]],["u32"]]],[11,"min","","Minimum of two vectors.",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"max","","Maximum of two vectors.",28,[[["self"],["u32x16"]],["u32x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",28,[[["self"]],["u32x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",28,[[["self"]],["u32x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",28,[[["self"]],["u32x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",50,[[["u8"],["u8"],["u8"],["u8"]],["u8x4"]]],[11,"lanes","","Returns the number of vector lanes.",50,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",50,[[["u8"]],["u8x4"]]],[11,"extract","","Extracts the value at `index`.",50,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",50,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["u8"]],["u8x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["u8"]],["u8x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",50,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",50,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",50,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",50,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",50,N],[11,"eq","","Lane-wise equality comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",50,[[["self"],["u8x4"]],["m8x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",50,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",50,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",50,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",50,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",50,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",50,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",50,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"max","","Maximum of two vectors.",50,[[["self"],["u8x4"]],["u8x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",50,[[["self"]],["u8x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",50,[[["self"]],["u8x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",50,[[["self"]],["u8x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",48,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["i8x32"]]],[11,"lanes","","Returns the number of vector lanes.",48,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",48,[[["i8"]],["i8x32"]]],[11,"extract","","Extracts the value at `index`.",48,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",48,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["i8"]],["i8x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["i8"]],["i8x32"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",48,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",48,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"eq","","Lane-wise equality comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",48,[[["self"],["i8x32"]],["m8x32"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",48,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",48,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",48,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",48,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",48,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",48,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",48,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"max","","Maximum of two vectors.",48,[[["self"],["i8x32"]],["i8x32"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",48,[[["self"]],["i8x32"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",48,[[["self"]],["i8x32"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",48,[[["self"]],["i8x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",35,[[["i64"],["i64"]],["i64x2"]]],[11,"lanes","","Returns the number of vector lanes.",35,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",35,[[["i64"]],["i64x2"]]],[11,"extract","","Extracts the value at `index`.",35,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",35,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["i64"]],["i64x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["i64"]],["i64x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",35,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",35,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"eq","","Lane-wise equality comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",35,[[["self"],["i64x2"]],["m64x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",35,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",35,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",35,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",35,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",35,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",35,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",35,[[["self"]],["i64"]]],[11,"min","","Minimum of two vectors.",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"max","","Maximum of two vectors.",35,[[["self"],["i64x2"]],["i64x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",35,[[["self"]],["i64x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",35,[[["self"]],["i64x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",35,[[["self"]],["i64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",10,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["u16x16"]]],[11,"lanes","","Returns the number of vector lanes.",10,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",10,[[["u16"]],["u16x16"]]],[11,"extract","","Extracts the value at `index`.",10,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",10,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["u16"]],["u16x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["u16"]],["u16x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",10,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",10,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",10,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",10,N],[11,"eq","","Lane-wise equality comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",10,[[["self"],["u16x16"]],["m16x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",10,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",10,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",10,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",10,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",10,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",10,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",10,[[["self"]],["u16"]]],[11,"min","","Minimum of two vectors.",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"max","","Maximum of two vectors.",10,[[["self"],["u16x16"]],["u16x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",10,[[["self"]],["u16x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",10,[[["self"]],["u16x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",10,[[["self"]],["u16x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",39,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m16x8"]]],[11,"lanes","","Returns the number of vector lanes.",39,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",39,[[["bool"]],["m16x8"]]],[11,"extract","","Extracts the value at `index`.",39,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",39,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["bool"]],["m16x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["bool"]],["m16x8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",39,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",39,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",39,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",39,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",39,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",39,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",39,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",39,[[["self"],["m16x8"]],["m16x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",14,[[["u16"],["u16"]],["u16x2"]]],[11,"lanes","","Returns the number of vector lanes.",14,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",14,[[["u16"]],["u16x2"]]],[11,"extract","","Extracts the value at `index`.",14,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",14,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["u16"]],["u16x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["u16"]],["u16x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",14,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",14,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"eq","","Lane-wise equality comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",14,[[["self"],["u16x2"]],["m16x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",14,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",14,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",14,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",14,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",14,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",14,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",14,[[["self"]],["u16"]]],[11,"min","","Minimum of two vectors.",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"max","","Maximum of two vectors.",14,[[["self"],["u16x2"]],["u16x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",14,[[["self"]],["u16x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",14,[[["self"]],["u16x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",14,[[["self"]],["u16x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",24,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m1x64"]]],[11,"lanes","","Returns the number of vector lanes.",24,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",24,[[["bool"]],["m1x64"]]],[11,"extract","","Extracts the value at `index`.",24,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",24,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["bool"]],["m1x64"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["bool"]],["m1x64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",24,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",24,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",24,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",24,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",24,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",24,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",24,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",24,[[["self"],["m1x64"]],["m1x64"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",41,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m8x16"]]],[11,"lanes","","Returns the number of vector lanes.",41,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",41,[[["bool"]],["m8x16"]]],[11,"extract","","Extracts the value at `index`.",41,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",41,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["bool"]],["m8x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["bool"]],["m8x16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",41,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",41,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",41,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",41,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",41,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",41,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",41,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",41,[[["self"],["m8x16"]],["m8x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",16,[[["u64"],["u64"]],["u64x2"]]],[11,"lanes","","Returns the number of vector lanes.",16,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",16,[[["u64"]],["u64x2"]]],[11,"extract","","Extracts the value at `index`.",16,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",16,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["u64"]],["u64x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["u64"]],["u64x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",16,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",16,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",16,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",16,N],[11,"eq","","Lane-wise equality comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",16,[[["self"],["u64x2"]],["m64x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",16,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",16,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",16,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",16,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",16,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",16,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",16,[[["self"]],["u64"]]],[11,"min","","Minimum of two vectors.",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"max","","Maximum of two vectors.",16,[[["self"],["u64x2"]],["u64x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",16,[[["self"]],["u64x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",16,[[["self"]],["u64x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",16,[[["self"]],["u64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",46,[[["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"]],["i64x8"]]],[11,"lanes","","Returns the number of vector lanes.",46,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",46,[[["i64"]],["i64x8"]]],[11,"extract","","Extracts the value at `index`.",46,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",46,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["i64"]],["i64x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["i64"]],["i64x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",46,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",46,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",46,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",46,N],[11,"eq","","Lane-wise equality comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",46,[[["self"],["i64x8"]],["m1x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",46,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",46,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",46,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",46,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",46,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",46,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",46,[[["self"]],["i64"]]],[11,"min","","Minimum of two vectors.",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"max","","Maximum of two vectors.",46,[[["self"],["i64x8"]],["i64x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",46,[[["self"]],["i64x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",46,[[["self"]],["i64x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",46,[[["self"]],["i64x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",21,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["u8x32"]]],[11,"lanes","","Returns the number of vector lanes.",21,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",21,[[["u8"]],["u8x32"]]],[11,"extract","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u8"]],["u8x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u8"]],["u8x32"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",21,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",21,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"eq","","Lane-wise equality comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",21,[[["self"],["u8x32"]],["m8x32"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",21,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",21,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",21,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",21,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",21,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",21,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",21,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"max","","Maximum of two vectors.",21,[[["self"],["u8x32"]],["u8x32"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",21,[[["self"]],["u8x32"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",21,[[["self"]],["u8x32"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",21,[[["self"]],["u8x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",56,[[["f32"],["f32"],["f32"],["f32"]],["f32x4"]]],[11,"lanes","","Returns the number of vector lanes.",56,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",56,[[["f32"]],["f32x4"]]],[11,"extract","","Extracts the value at `index`.",56,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",56,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["f32"]],["f32x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["f32"]],["f32x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",56,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",56,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"eq","","Lane-wise equality comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",56,[[["self"],["f32x4"]],["m32x4"]]],[11,"sum","","Horizontal sum of the vector elements.",56,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",56,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",56,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",56,[[["self"]],["f32"]]],[11,"min","","Minimum of two vectors.",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"max","","Maximum of two vectors.",56,[[["self"],["f32x4"]],["f32x4"]]],[11,"abs","","Absolute-value",56,[[["self"]],["f32x4"]]],[11,"sqrt","","Square-root",56,[[["self"]],["f32x4"]]],[11,"sqrte","","Square-root estimate",56,[[["self"]],["f32x4"]]],[11,"rsqrte","","Reciprocal square-root estimate",56,[[["self"]],["f32x4"]]],[11,"fma","","Fused multiply add: `self * y + z`",56,[[["self"],["f32x4"],["f32x4"]],["f32x4"]]],[11,"sin","","Sin",56,[[["self"]],["f32x4"]]],[11,"cos","","Cos",56,[[["self"]],["f32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",42,[[["bool"],["bool"],["bool"],["bool"]],["m16x4"]]],[11,"lanes","","Returns the number of vector lanes.",42,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",42,[[["bool"]],["m16x4"]]],[11,"extract","","Extracts the value at `index`.",42,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",42,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["bool"]],["m16x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["bool"]],["m16x4"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",42,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",42,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",42,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",42,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",42,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",42,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",42,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",42,[[["self"],["m16x4"]],["m16x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",51,[[["i32"],["i32"],["i32"],["i32"]],["i32x4"]]],[11,"lanes","","Returns the number of vector lanes.",51,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",51,[[["i32"]],["i32x4"]]],[11,"extract","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i32"]],["i32x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i32"]],["i32x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",51,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",51,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"eq","","Lane-wise equality comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",51,[[["self"],["i32x4"]],["m32x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",51,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",51,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",51,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",51,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",51,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",51,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",51,[[["self"]],["i32"]]],[11,"min","","Minimum of two vectors.",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"max","","Maximum of two vectors.",51,[[["self"],["i32x4"]],["i32x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",51,[[["self"]],["i32x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",51,[[["self"]],["i32x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",51,[[["self"]],["i32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",8,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["i16x16"]]],[11,"lanes","","Returns the number of vector lanes.",8,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",8,[[["i16"]],["i16x16"]]],[11,"extract","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i16"]],["i16x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i16"]],["i16x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",8,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",8,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"eq","","Lane-wise equality comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",8,[[["self"],["i16x16"]],["m16x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",8,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",8,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",8,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",8,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",8,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",8,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",8,[[["self"]],["i16"]]],[11,"min","","Minimum of two vectors.",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"max","","Maximum of two vectors.",8,[[["self"],["i16x16"]],["i16x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",8,[[["self"]],["i16x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",8,[[["self"]],["i16x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",8,[[["self"]],["i16x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",36,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["i8x64"]]],[11,"lanes","","Returns the number of vector lanes.",36,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",36,[[["i8"]],["i8x64"]]],[11,"extract","","Extracts the value at `index`.",36,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",36,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["i8"]],["i8x64"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["i8"]],["i8x64"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",36,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",36,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",36,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",36,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",36,N],[11,"eq","","Lane-wise equality comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",36,[[["self"],["i8x64"]],["m1x64"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",36,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",36,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",36,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",36,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",36,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",36,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",36,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"max","","Maximum of two vectors.",36,[[["self"],["i8x64"]],["i8x64"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",36,[[["self"]],["i8x64"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",36,[[["self"]],["i8x64"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",36,[[["self"]],["i8x64"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",55,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["i16x8"]]],[11,"lanes","","Returns the number of vector lanes.",55,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",55,[[["i16"]],["i16x8"]]],[11,"extract","","Extracts the value at `index`.",55,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",55,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["i16"]],["i16x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["i16"]],["i16x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",55,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",55,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"eq","","Lane-wise equality comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",55,[[["self"],["i16x8"]],["m16x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",55,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",55,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",55,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",55,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",55,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",55,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",55,[[["self"]],["i16"]]],[11,"min","","Minimum of two vectors.",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"max","","Maximum of two vectors.",55,[[["self"],["i16x8"]],["i16x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",55,[[["self"]],["i16x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",55,[[["self"]],["i16x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",55,[[["self"]],["i16x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",23,[[["bool"],["bool"]],["m32x2"]]],[11,"lanes","","Returns the number of vector lanes.",23,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",23,[[["bool"]],["m32x2"]]],[11,"extract","","Extracts the value at `index`.",23,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",23,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["bool"]],["m32x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["bool"]],["m32x2"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",23,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",23,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",23,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",23,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",23,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",23,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",23,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",23,[[["self"],["m32x2"]],["m32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",6,[[["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"]],["u64x8"]]],[11,"lanes","","Returns the number of vector lanes.",6,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",6,[[["u64"]],["u64x8"]]],[11,"extract","","Extracts the value at `index`.",6,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",6,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["u64"]],["u64x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",6,[[["self"],["usize"],["u64"]],["u64x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",6,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",6,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",6,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",6,N],[11,"eq","","Lane-wise equality comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",6,[[["self"],["u64x8"]],["m1x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",6,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",6,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",6,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",6,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",6,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",6,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",6,[[["self"]],["u64"]]],[11,"min","","Minimum of two vectors.",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"max","","Maximum of two vectors.",6,[[["self"],["u64x8"]],["u64x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",6,[[["self"]],["u64x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",6,[[["self"]],["u64x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",6,[[["self"]],["u64x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",12,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["u16x8"]]],[11,"lanes","","Returns the number of vector lanes.",12,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",12,[[["u16"]],["u16x8"]]],[11,"extract","","Extracts the value at `index`.",12,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",12,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["u16"]],["u16x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["u16"]],["u16x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",12,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",12,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"eq","","Lane-wise equality comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",12,[[["self"],["u16x8"]],["m16x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",12,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",12,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",12,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",12,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",12,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",12,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",12,[[["self"]],["u16"]]],[11,"min","","Minimum of two vectors.",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"max","","Maximum of two vectors.",12,[[["self"],["u16x8"]],["u16x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",12,[[["self"]],["u16x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",12,[[["self"]],["u16x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",12,[[["self"]],["u16x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",49,[[["u8"],["u8"]],["u8x2"]]],[11,"lanes","","Returns the number of vector lanes.",49,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",49,[[["u8"]],["u8x2"]]],[11,"extract","","Extracts the value at `index`.",49,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",49,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["u8"]],["u8x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["u8"]],["u8x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",49,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",49,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"eq","","Lane-wise equality comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",49,[[["self"],["u8x2"]],["m8x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",49,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",49,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",49,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",49,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",49,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",49,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",49,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"max","","Maximum of two vectors.",49,[[["self"],["u8x2"]],["u8x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",49,[[["self"]],["u8x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",49,[[["self"]],["u8x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",49,[[["self"]],["u8x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",40,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["i32x16"]]],[11,"lanes","","Returns the number of vector lanes.",40,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",40,[[["i32"]],["i32x16"]]],[11,"extract","","Extracts the value at `index`.",40,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",40,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["i32"]],["i32x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["i32"]],["i32x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",40,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",40,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",40,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",40,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",40,N],[11,"eq","","Lane-wise equality comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",40,[[["self"],["i32x16"]],["m1x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",40,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",40,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",40,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",40,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",40,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",40,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",40,[[["self"]],["i32"]]],[11,"min","","Minimum of two vectors.",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"max","","Maximum of two vectors.",40,[[["self"],["i32x16"]],["i32x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",40,[[["self"]],["i32x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",40,[[["self"]],["i32x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",40,[[["self"]],["i32x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",20,[[["i64"],["i64"],["i64"],["i64"]],["i64x4"]]],[11,"lanes","","Returns the number of vector lanes.",20,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",20,[[["i64"]],["i64x4"]]],[11,"extract","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i64"]],["i64x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i64"]],["i64x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",20,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",20,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"eq","","Lane-wise equality comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",20,[[["self"],["i64x4"]],["m64x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",20,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",20,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",20,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",20,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",20,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",20,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",20,[[["self"]],["i64"]]],[11,"min","","Minimum of two vectors.",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"max","","Maximum of two vectors.",20,[[["self"],["i64x4"]],["i64x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",20,[[["self"]],["i64x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",20,[[["self"]],["i64x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",20,[[["self"]],["i64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",11,[[["i32"],["i32"]],["i32x2"]]],[11,"lanes","","Returns the number of vector lanes.",11,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",11,[[["i32"]],["i32x2"]]],[11,"extract","","Extracts the value at `index`.",11,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",11,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["i32"]],["i32x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["i32"]],["i32x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",11,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",11,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",11,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",11,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"eq","","Lane-wise equality comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",11,[[["self"],["i32x2"]],["m32x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",11,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",11,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",11,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",11,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",11,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",11,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",11,[[["self"]],["i32"]]],[11,"min","","Minimum of two vectors.",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"max","","Maximum of two vectors.",11,[[["self"],["i32x2"]],["i32x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",11,[[["self"]],["i32x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",11,[[["self"]],["i32x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",11,[[["self"]],["i32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",5,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["u32x8"]]],[11,"lanes","","Returns the number of vector lanes.",5,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",5,[[["u32"]],["u32x8"]]],[11,"extract","","Extracts the value at `index`.",5,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",5,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",5,[[["self"],["usize"],["u32"]],["u32x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",5,[[["self"],["usize"],["u32"]],["u32x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",5,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",5,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",5,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",5,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",5,N],[11,"eq","","Lane-wise equality comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",5,[[["self"],["u32x8"]],["m32x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",5,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",5,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",5,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",5,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",5,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",5,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",5,[[["self"]],["u32"]]],[11,"min","","Minimum of two vectors.",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"max","","Maximum of two vectors.",5,[[["self"],["u32x8"]],["u32x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",5,[[["self"]],["u32x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",5,[[["self"]],["u32x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",5,[[["self"]],["u32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",52,[[["bool"],["bool"]],["m16x2"]]],[11,"lanes","","Returns the number of vector lanes.",52,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",52,[[["bool"]],["m16x2"]]],[11,"extract","","Extracts the value at `index`.",52,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",52,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["bool"]],["m16x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["bool"]],["m16x2"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",52,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",52,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",52,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",52,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",52,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",52,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",52,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",52,[[["self"],["m16x2"]],["m16x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",25,[[["i16"],["i16"],["i16"],["i16"]],["i16x4"]]],[11,"lanes","","Returns the number of vector lanes.",25,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",25,[[["i16"]],["i16x4"]]],[11,"extract","","Extracts the value at `index`.",25,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",25,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["i16"]],["i16x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["i16"]],["i16x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",25,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",25,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"eq","","Lane-wise equality comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",25,[[["self"],["i16x4"]],["m16x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",25,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",25,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",25,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",25,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",25,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",25,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",25,[[["self"]],["i16"]]],[11,"min","","Minimum of two vectors.",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"max","","Maximum of two vectors.",25,[[["self"],["i16x4"]],["i16x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",25,[[["self"]],["i16x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",25,[[["self"]],["i16x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",25,[[["self"]],["i16x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",43,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["u8x16"]]],[11,"lanes","","Returns the number of vector lanes.",43,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",43,[[["u8"]],["u8x16"]]],[11,"extract","","Extracts the value at `index`.",43,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",43,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["u8"]],["u8x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["u8"]],["u8x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",43,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",43,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",43,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",43,N],[11,"eq","","Lane-wise equality comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",43,[[["self"],["u8x16"]],["m8x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",43,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",43,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",43,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",43,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",43,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",43,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",43,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"max","","Maximum of two vectors.",43,[[["self"],["u8x16"]],["u8x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",43,[[["self"]],["u8x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",43,[[["self"]],["u8x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",43,[[["self"]],["u8x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",19,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["i8x8"]]],[11,"lanes","","Returns the number of vector lanes.",19,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",19,[[["i8"]],["i8x8"]]],[11,"extract","","Extracts the value at `index`.",19,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",19,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["i8"]],["i8x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["i8"]],["i8x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",19,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",19,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",19,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",19,N],[11,"eq","","Lane-wise equality comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",19,[[["self"],["i8x8"]],["m8x8"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",19,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",19,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",19,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",19,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",19,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",19,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",19,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"max","","Maximum of two vectors.",19,[[["self"],["i8x8"]],["i8x8"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",19,[[["self"]],["i8x8"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",19,[[["self"]],["i8x8"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",19,[[["self"]],["i8x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",3,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["u8x64"]]],[11,"lanes","","Returns the number of vector lanes.",3,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",3,[[["u8"]],["u8x64"]]],[11,"extract","","Extracts the value at `index`.",3,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",3,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",3,[[["self"],["usize"],["u8"]],["u8x64"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",3,[[["self"],["usize"],["u8"]],["u8x64"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",3,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",3,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",3,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",3,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",3,N],[11,"eq","","Lane-wise equality comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"ne","","Lane-wise inequality comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"lt","","Lane-wise less-than comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"gt","","Lane-wise greater-than comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",3,[[["self"],["u8x64"]],["m1x64"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",3,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",3,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",3,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",3,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",3,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",3,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",3,[[["self"]],["u8"]]],[11,"min","","Minimum of two vectors.",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"max","","Maximum of two vectors.",3,[[["self"],["u8x64"]],["u8x64"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",3,[[["self"]],["u8x64"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",3,[[["self"]],["u8x64"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",3,[[["self"]],["u8x64"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",27,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["i16x32"]]],[11,"lanes","","Returns the number of vector lanes.",27,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",27,[[["i16"]],["i16x32"]]],[11,"extract","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i16"]],["i16x32"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i16"]],["i16x32"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",27,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",27,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"eq","","Lane-wise equality comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"ne","","Lane-wise inequality comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"lt","","Lane-wise less-than comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"gt","","Lane-wise greater-than comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",27,[[["self"],["i16x32"]],["m1x32"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",27,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",27,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",27,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",27,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",27,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",27,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",27,[[["self"]],["i16"]]],[11,"min","","Minimum of two vectors.",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"max","","Maximum of two vectors.",27,[[["self"],["i16x32"]],["i16x32"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",27,[[["self"]],["i16x32"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",27,[[["self"]],["i16x32"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",27,[[["self"]],["i16x32"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",45,[[["bool"],["bool"],["bool"],["bool"]],["m8x4"]]],[11,"lanes","","Returns the number of vector lanes.",45,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",45,[[["bool"]],["m8x4"]]],[11,"extract","","Extracts the value at `index`.",45,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",45,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["bool"]],["m8x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["bool"]],["m8x4"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",45,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",45,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",45,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",45,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",45,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",45,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",45,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",45,[[["self"],["m8x4"]],["m8x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",57,[[["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"]],["f64x8"]]],[11,"lanes","","Returns the number of vector lanes.",57,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",57,[[["f64"]],["f64x8"]]],[11,"extract","","Extracts the value at `index`.",57,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",57,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["f64"]],["f64x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["f64"]],["f64x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",57,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",57,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",57,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",57,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",57,N],[11,"eq","","Lane-wise equality comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"ne","","Lane-wise inequality comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"lt","","Lane-wise less-than comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"gt","","Lane-wise greater-than comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",57,[[["self"],["f64x8"]],["m1x8"]]],[11,"sum","","Horizontal sum of the vector elements.",57,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",57,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",57,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",57,[[["self"]],["f64"]]],[11,"min","","Minimum of two vectors.",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"max","","Maximum of two vectors.",57,[[["self"],["f64x8"]],["f64x8"]]],[11,"abs","","Absolute-value",57,[[["self"]],["f64x8"]]],[11,"sqrt","","Square-root",57,[[["self"]],["f64x8"]]],[11,"sqrte","","Square-root estimate",57,[[["self"]],["f64x8"]]],[11,"rsqrte","","Reciprocal square-root estimate",57,[[["self"]],["f64x8"]]],[11,"fma","","Fused multiply add: `self * y + z`",57,[[["self"],["f64x8"],["f64x8"]],["f64x8"]]],[11,"sin","","Sin",57,[[["self"]],["f64x8"]]],[11,"cos","","Cos",57,[[["self"]],["f64x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",30,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m32x8"]]],[11,"lanes","","Returns the number of vector lanes.",30,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",30,[[["bool"]],["m32x8"]]],[11,"extract","","Extracts the value at `index`.",30,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",30,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["bool"]],["m32x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["bool"]],["m32x8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",30,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",30,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",30,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",30,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",30,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",30,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",30,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",30,[[["self"],["m32x8"]],["m32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",33,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["i8x16"]]],[11,"lanes","","Returns the number of vector lanes.",33,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",33,[[["i8"]],["i8x16"]]],[11,"extract","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i8"]],["i8x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i8"]],["i8x16"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",33,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",33,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"eq","","Lane-wise equality comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",33,[[["self"],["i8x16"]],["m8x16"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",33,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",33,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",33,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",33,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",33,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",33,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",33,[[["self"]],["i8"]]],[11,"min","","Minimum of two vectors.",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"max","","Maximum of two vectors.",33,[[["self"],["i8x16"]],["i8x16"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",33,[[["self"]],["i8x16"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",33,[[["self"]],["i8x16"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",33,[[["self"]],["i8x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",62,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["f32x8"]]],[11,"lanes","","Returns the number of vector lanes.",62,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",62,[[["f32"]],["f32x8"]]],[11,"extract","","Extracts the value at `index`.",62,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",62,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["f32"]],["f32x8"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["f32"]],["f32x8"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",62,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",62,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"eq","","Lane-wise equality comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",62,[[["self"],["f32x8"]],["m32x8"]]],[11,"sum","","Horizontal sum of the vector elements.",62,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",62,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",62,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",62,[[["self"]],["f32"]]],[11,"min","","Minimum of two vectors.",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"max","","Maximum of two vectors.",62,[[["self"],["f32x8"]],["f32x8"]]],[11,"abs","","Absolute-value",62,[[["self"]],["f32x8"]]],[11,"sqrt","","Square-root",62,[[["self"]],["f32x8"]]],[11,"sqrte","","Square-root estimate",62,[[["self"]],["f32x8"]]],[11,"rsqrte","","Reciprocal square-root estimate",62,[[["self"]],["f32x8"]]],[11,"fma","","Fused multiply add: `self * y + z`",62,[[["self"],["f32x8"],["f32x8"]],["f32x8"]]],[11,"sin","","Sin",62,[[["self"]],["f32x8"]]],[11,"cos","","Cos",62,[[["self"]],["f32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",59,[[["f64"],["f64"]],["f64x2"]]],[11,"lanes","","Returns the number of vector lanes.",59,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",59,[[["f64"]],["f64x2"]]],[11,"extract","","Extracts the value at `index`.",59,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",59,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["f64"]],["f64x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["f64"]],["f64x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",59,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",59,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"eq","","Lane-wise equality comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",59,[[["self"],["f64x2"]],["m64x2"]]],[11,"sum","","Horizontal sum of the vector elements.",59,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",59,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",59,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",59,[[["self"]],["f64"]]],[11,"min","","Minimum of two vectors.",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"max","","Maximum of two vectors.",59,[[["self"],["f64x2"]],["f64x2"]]],[11,"abs","","Absolute-value",59,[[["self"]],["f64x2"]]],[11,"sqrt","","Square-root",59,[[["self"]],["f64x2"]]],[11,"sqrte","","Square-root estimate",59,[[["self"]],["f64x2"]]],[11,"rsqrte","","Reciprocal square-root estimate",59,[[["self"]],["f64x2"]]],[11,"fma","","Fused multiply add: `self * y + z`",59,[[["self"],["f64x2"],["f64x2"]],["f64x2"]]],[11,"sin","","Sin",59,[[["self"]],["f64x2"]]],[11,"cos","","Cos",59,[[["self"]],["f64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",34,[[["i16"],["i16"]],["i16x2"]]],[11,"lanes","","Returns the number of vector lanes.",34,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",34,[[["i16"]],["i16x2"]]],[11,"extract","","Extracts the value at `index`.",34,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",34,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["i16"]],["i16x2"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["i16"]],["i16x2"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",34,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",34,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"eq","","Lane-wise equality comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",34,[[["self"],["i16x2"]],["m16x2"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",34,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",34,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",34,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",34,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",34,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",34,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",34,[[["self"]],["i16"]]],[11,"min","","Minimum of two vectors.",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"max","","Maximum of two vectors.",34,[[["self"],["i16x2"]],["i16x2"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",34,[[["self"]],["i16x2"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",34,[[["self"]],["i16x2"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",34,[[["self"]],["i16x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",37,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["m1x16"]]],[11,"lanes","","Returns the number of vector lanes.",37,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",37,[[["bool"]],["m1x16"]]],[11,"extract","","Extracts the value at `index`.",37,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",37,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["bool"]],["m1x16"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["bool"]],["m1x16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",37,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",37,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",37,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",37,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",37,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",37,[[["self"]],["bool"]]],[11,"select","","Selects elements of `a` and `b` using mask.",37,[[["self"],["t"],["t"]],["t"]]],[11,"eq","","Lane-wise equality comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"ne","","Lane-wise inequality comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"lt","","Lane-wise less-than comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"gt","","Lane-wise greater-than comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",37,[[["self"],["m1x16"]],["m1x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",22,[[["u16"],["u16"],["u16"],["u16"]],["u16x4"]]],[11,"lanes","","Returns the number of vector lanes.",22,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",22,[[["u16"]],["u16x4"]]],[11,"extract","","Extracts the value at `index`.",22,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",22,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["u16"]],["u16x4"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["u16"]],["u16x4"]]],[11,"store_aligned","","Writes the values of the vector to the `slice`.",22,N],[11,"store_unaligned","","Writes the values of the vector to the `slice`.",22,N],[11,"store_aligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"store_unaligned_unchecked","","Writes the values of the vector to the `slice`.",22,N],[11,"load_aligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_unaligned","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"load_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",22,N],[11,"eq","","Lane-wise equality comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",22,[[["self"],["u16x4"]],["m16x4"]]],[11,"wrapping_sum","","Horizontal sum of the vector elements.",22,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal product of the vector elements.",22,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",22,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",22,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",22,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",22,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",22,[[["self"]],["u16"]]],[11,"min","","Minimum of two vectors.",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"max","","Maximum of two vectors.",22,[[["self"],["u16x4"]],["u16x4"]]],[11,"swap_bytes","","Reverses the byte order of the vector.",22,[[["self"]],["u16x4"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",22,[[["self"]],["u16x4"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",22,[[["self"]],["u16x4"]]]],"paths":[[8,"IntoBits"],[8,"FromBits"],[3,"u64x4"],[3,"u8x64"],[3,"i8x2"],[3,"u32x8"],[3,"u64x8"],[3,"u32x2"],[3,"i16x16"],[3,"m8x2"],[3,"u16x16"],[3,"i32x2"],[3,"u16x8"],[3,"m1x8"],[3,"u16x2"],[3,"m8x32"],[3,"u64x2"],[3,"u32x4"],[3,"m8x8"],[3,"i8x8"],[3,"i64x4"],[3,"u8x32"],[3,"u16x4"],[3,"m32x2"],[3,"m1x64"],[3,"i16x4"],[3,"m64x4"],[3,"i16x32"],[3,"u32x16"],[3,"m32x4"],[3,"m32x8"],[3,"m16x16"],[3,"u16x32"],[3,"i8x16"],[3,"i16x2"],[3,"i64x2"],[3,"i8x64"],[3,"m1x16"],[3,"i32x8"],[3,"m16x8"],[3,"i32x16"],[3,"m8x16"],[3,"m16x4"],[3,"u8x16"],[3,"u8x8"],[3,"m8x4"],[3,"i64x8"],[3,"m1x32"],[3,"i8x32"],[3,"u8x2"],[3,"u8x4"],[3,"i32x4"],[3,"m16x2"],[3,"m64x2"],[3,"i8x4"],[3,"i16x8"],[3,"f32x4"],[3,"f64x8"],[3,"f32x16"],[3,"f64x2"],[3,"f32x2"],[3,"f64x4"],[3,"f32x8"],[3,"vector_bool_short"],[3,"vector_unsigned_char"],[3,"vector_signed_char"],[3,"vector_signed_short"],[3,"vector_float"],[3,"vector_bool_int"],[3,"vector_signed_int"],[3,"vector_unsigned_short"],[3,"vector_bool_char"],[3,"vector_unsigned_int"]]};
initSearch(searchIndex);
